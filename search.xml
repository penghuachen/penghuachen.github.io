<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS modules</title>
    <url>/2020/09/27/CSS-modules/</url>
    <content><![CDATA[<h1 id="CSS-modules"><a class="header-anchor" href="#CSS-modules"></a>CSS modules</h1>
<p>CSS modules 是另外一種可以用來設定元件樣式的方式，但這個部分需要修改 webpack 中的設定，所以今天就來看看怎麼修改以及需要注意的細節吧！</p>
<span id="more"></span>
<h3 id="Webpack-設定藏在哪裡"><a class="header-anchor" href="#Webpack-設定藏在哪裡"></a>Webpack 設定藏在哪裡?</h3>
<p>如果是透過 <code>npx create-react-app</code> 建立的專案，<strong>webpack 的設定預設是隱藏起來的</strong>，所以這時候要透過這個指令打開:</p>
<p>這個指令的用途在於將所有 webpack 配置的部分顯示出來，這對於我們如果需要額外有客製化(如 webpack 的設定)時可以使用。</p>
<p>但有個在使用上的前提，依據官方的描述:</p>
<blockquote>
<p>Note: this is a one-way operation. Once you eject, you can’t go back!</p>
</blockquote>
<p><strong>這是一項不可逆的指令</strong>，一旦執行後就無法再將這個專案回到使用 <code>npm run eject</code> 之前的狀態。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run eject</span><br></pre></td></tr></table></figure>
<p>還有這邊要注意的是在執行這個指令之前需要先將專案 commit 起來後才可以執行，否則會出現提示先完成當前專案的修改後再執行的訊息。</p>
<p>執行之後，觀察一下專案中 <code>package.json</code> 這隻檔案，會發現 create-creat-app 多了很多的配置，此外也會出現 config、scripts 這兩個資料夾。</p>
<p>由於沒辦法預測使用者究竟會需要哪些配置，所以才會預先安裝了這麼多套件與設定在 create-react-app 中。</p>
<p>接著，我們要修改一下 webpack 的設定:</p>
<h2 id="修改-webpack-中-css-loader-的設定"><a class="header-anchor" href="#修改-webpack-中-css-loader-的設定"></a>修改 webpack 中 css-loader 的設定</h2>
<p>這邊需要注意的部分是在 <strong>css-loader 的版本問題，在 3.0.0 的版本後，對於 <code>localIdentName</code> 的配置上不太一樣，這部分來看看文件 <a href="https://github.com/webpack-contrib/css-loader/blob/master/CHANGELOG.md#300-2019-06-11">3.0.0 (2019-06-11)</a>的 README:</strong></p>
<blockquote>
<p>…略<br>
modules option now can be {Object} and allow to setup CSS Modules options:</p>
<ul>
<li>localIdentName option was removed in favor modules.localIdentName option<br>
…略</li>
</ul>
</blockquote>
<p>這代表在使用上原本的寫法是這樣:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...略</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">use</span>: &#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="attr">sourceMap</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">importLoaders</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">localIdentName</span>: <span class="string">&#x27;[name]__[local]___[hash:base64:5]&#x27;</span>, </span><br><span class="line">      <span class="attr">modules</span>: <span class="literal">true</span> </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...略</span></span><br></pre></td></tr></table></figure>
<p><strong>在 3.0.0 的版本後要調整成如下的寫法:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...略=</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">use</span>: &#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="attr">sourceMap</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">importLoaders</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">modules</span>: &#123;</span><br><span class="line">        <span class="attr">localIdentName</span>: <span class="string">&#x27;[name]__[local]__[hash:base64:5]&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...略</span></span><br></pre></td></tr></table></figure>
<p><strong>其中 <code>localIdentName</code> 的意思是在使用 css module 下要產生的 class 名稱</strong>，而 <code>'[name]__[local]__[hash:base64:5]'</code> 則是產生後的格式，以這個格式而言，會是如下呈現:</p>
<p><code>index__Card__M1d8z</code></p>
<p>在 create-reate-app 的 webpack.config.js 中，應該會看到類似如下的程式碼:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: cssRegex,</span><br><span class="line">  <span class="attr">exclude</span>: cssModuleRegex,</span><br><span class="line">  <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(&#123;</span><br><span class="line">    <span class="attr">importLoaders</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">sourceMap</span>: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">    <span class="comment">// 新增這一行</span></span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">      <span class="attr">localIdentName</span>: <span class="string">&#x27;[name]__[local]__[hash:base64:5]&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// Don&#x27;t consider CSS imports dead code even if the</span></span><br><span class="line">  <span class="comment">// containing package claims to have no side effects.</span></span><br><span class="line">  <span class="comment">// Remove this when webpack adds a warning or an error for this.</span></span><br><span class="line">  <span class="comment">// See https://github.com/webpack/webpack/issues/6571</span></span><br><span class="line">  <span class="attr">sideEffects</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>完成 webpack 的重新配置後，記得要重啟專案才會生效哦！</p>
<p>接著我們先將 Card 元件建立起來:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(styles)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Card</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.Card&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a card.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>card content...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Card</span>;</span><br></pre></td></tr></table></figure>
<p>如果透過 <code>console</code> 查看 <code>styles</code> 的值，會得到如下的呈現:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="title class_">Card</span>-<span class="attr">div</span>: <span class="string">&quot;index__Card__M1d8z&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果可以成功看到這段結果，這代表已經可以像是使用物件特性(property)般那樣使用 <code>Card-div</code> 了</p>
<p>最後讓我們在元件中使用 css module 的方式來設定樣式吧!</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* card.css */</span></span><br><span class="line"><span class="selector-class">.Card-div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#8d8d8d</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">900px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">700px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.Card-div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這裡簡單設定了 <code>Card</code> 元件的樣式以及在裝置尺寸小於 <code>700px</code> 時會將寬度修改為 <code>500px</code>。</p>
<p>沒意外的話應該可以成功看到樣式設定後的結果囉</p>
<p><img src="https://i.imgur.com/tiiXLd6.png" alt=""></p>
<h2 id="透過-file-modules-css-的方式使用-css-module"><a class="header-anchor" href="#透過-file-modules-css-的方式使用-css-module"></a>透過 file.modules.css 的方式使用 css module</h2>
<p>最後要提的部分是，如果是透過 create-react-app 建立起來的專案，還在 webpack 的設定中應該會發現這一段設定與註解：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 略</span></span><br><span class="line"><span class="comment">// Adds support for CSS Modules (https://github.com/css-modules/css-modules)</span></span><br><span class="line"><span class="comment">// using the extension .module.css</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: cssModuleRegex,</span><br><span class="line">  <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(&#123;</span><br><span class="line">    <span class="attr">importLoaders</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">sourceMap</span>: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">      <span class="attr">getLocalIdent</span>: getCSSModuleLocalIdent,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// Opt-in support for SASS (using .scss or .sass extensions).</span></span><br><span class="line"><span class="comment">// By default we support SASS Modules with the</span></span><br><span class="line"><span class="comment">// extensions .module.scss or .module.sass</span></span><br></pre></td></tr></table></figure>
<p>這代表我們可以透過將 <code>index.css</code> 檔案名稱修改為 <code>index.module.css</code>，一樣可以向前面那樣將 css 當作 property 來使用。</p>
<p>這裡我們額外建立一個 <code>CardTwo</code> 元件，讓這個元件的樣式設定和前一個相同:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./index.module.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(styles)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CardTwo</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.Card&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a card two.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>card content...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CardTwo</span>;</span><br></pre></td></tr></table></figure>
<p>需要注意的是 css 檔案與剛剛不同，變成了 index.module.css。</p>
<p>而如果喜歡撰寫 scss 的開發者，這個方式一樣適用哦，只需要將檔名更改為 index.module.scss 即可</p>
<p>關於 css module 的學習就先這樣囉！</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://github.com/webpack-contrib/css-loader/blob/master/CHANGELOG.md#300-2019-06-11">Webpack changelog</a></li>
<li><a href="https://create-react-app.dev/docs/available-scripts/#npm-run-eject">npm run eject</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Class-based Component 生命週期方法(續)</title>
    <url>/2020/09/23/Class-based-Component-%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F%E6%96%B9%E6%B3%95-%E7%BA%8C/</url>
    <content><![CDATA[<h1 id="Class-based-Component-生命週期方法-續"><a class="header-anchor" href="#Class-based-Component-生命週期方法-續"></a>Class-based Component 生命週期方法(續)</h1>
<p>今天的篇幅要延續昨天的部分繼續，要來看看在<a href="https://zh-hant.reactjs.org/docs/react-component.html">官方文件</a>中如何定義了這些方法，以及哪些是常用的、應用在什麼地方。</p>
<span id="more"></span>
<p>學習順序會依照元件建立、更新及銷毀的生命週期順序來學習。</p>
<p>並在最後透過發一個非同步請求的範例來作為 ending，事不宜遲，趕緊來學習吧!</p>
<h2 id="元件-Component-建立時-mounting-的生命週期方法"><a class="header-anchor" href="#元件-Component-建立時-mounting-的生命週期方法"></a>元件(Component)建立時(mounting)的生命週期方法</h2>
<p>所有方法:</p>
<ul>
<li><code>constructor</code></li>
<li><code>static getDerivedStateFromProps</code></li>
<li><code>render</code></li>
<li><code>componentDidMount</code></li>
</ul>
<p><strong>常用方法:</strong></p>
<ul>
<li><code>constructor</code></li>
<li><code>render</code></li>
<li><code>componentDidMount</code></li>
</ul>
<h3 id="contructor"><a class="header-anchor" href="#contructor"></a>contructor</h3>
<p>首先在 mounting 階段時，最先被初始化的是 <code>constructor</code> 的部分，而這部分同時也是 JS class 類別，文件中提到:</p>
<blockquote>
<p>通常在 React 中 constructor 只會有兩種用途：</p>
<ul>
<li>透過指定一個 this.state 物件來初始化內部 state。</li>
<li>為 event handler 方法綁定 instance。</li>
</ul>
</blockquote>
<p>於是我們常常會有如下的設計:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">persons</span>: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">changeNameHandler</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// do something...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而由於 ES7 中將 Class 的寫法簡化，所以我們可以將上方改寫成如下的方式:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">persons</span>: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  changeNameHandler = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此外文件中還有提到:</p>
<p><strong>Constructor 應該要是開發者唯一指定 state 的地方，其餘地方則是透過 this.setState 的方式修改 state 的狀態。</strong></p>
<p><mark>直接修改 state 的資料是雖然會改變 state 的狀態，但是並不會觸發畫面的更新。</mark></p>
<h3 id="static-getDerivedStateFromProps-props-state"><a class="header-anchor" href="#static-getDerivedStateFromProps-props-state"></a>static getDerivedStateFromProps(props, state)</h3>
<p><strong>當子元件中具有自己的 state，並且這個 <code>state</code> 的改變是依賴父層 <code>props</code> 進來的值，那就可能需要用到這個方法。</strong></p>
<p>此時會需要回傳一個物件來更新 <code>state</code>，但是如果並不需要更新的話，那其實也可以直接回傳 null 即可。</p>
<p>這邊我們設計一種情境:</p>
<p>父元件、子元件中皆有一個 radio box，切換任意一個的狀態時，都需要可以同步更新另一個 radio box 的狀態。</p>
<p>相關測試程式碼，<a href="https://codesandbox.io/s/boring-perlman-vhrwy?file=/src/App.js">點擊前往</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SubComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./SubComponent&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">isTrue</span>: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeRadioHandler = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> value = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">const</span> checkTrue = value === <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      ? <span class="literal">true</span></span><br><span class="line">      : <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">isTrue</span>: checkTrue</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123; this.state.persons.map((person, idx) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Card</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;</span> <span class="attr">idx</span> &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">changeRadioHandler</span>=<span class="string">&#123;</span> <span class="attr">this.changeRadioHandler</span> &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">isTrue</span>=<span class="string">&#123;</span> <span class="attr">this.state.isTrue</span> &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span> </span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        True: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;</span> <span class="attr">e</span> =&gt;</span> this.changeRadioHandler(e) &#125; checked=&#123; this.state.isTrue &#125; type=&quot;radio&quot; name=&quot;main&quot; value=&quot;true&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">        False: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;</span> <span class="attr">e</span> =&gt;</span> this.changeRadioHandler(e) &#125; checked=&#123; !this.state.isTrue &#125; type=&quot;radio&quot; name=&quot;main&quot; value=&quot;false&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SubComponent.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">isTrue</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">props, state</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(state);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(props.<span class="property">isTrue</span> != state.<span class="property">isTrue</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">isTrue</span>: props.<span class="property">isTrue</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;sub&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Sub Component<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        True: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;</span> <span class="attr">e</span> =&gt;</span> this.props.changeRadioHandler(e) &#125; checked=&#123; this.state.isTrue &#125; type=&quot;radio&quot; name=&quot;sub&quot; value=&quot;true&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">        False: <span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;</span> <span class="attr">e</span> =&gt;</span> this.props.changeRadioHandler(e) &#125; checked=&#123; !this.state.isTrue &#125; type=&quot;radio&quot; name=&quot;sub&quot; value=&quot;false&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">SubComponent</span>;</span><br></pre></td></tr></table></figure>
<p>在 <code>SubComponent</code> 元件中使用了 <code>getDerivedStateFromProps</code> 方法，可以<strong>透過 props 取得外層傳入的最新值，透過比對元件自身的 state 決定是否要更新子元件中的 state 狀態</strong>，而這個就是一個簡單的使用情境。</p>
<h3 id="render"><a class="header-anchor" href="#render"></a>render</h3>
<ol>
<li><code>render()</code> 是 <strong>class component 中唯一必要的方法。</strong></li>
<li>透過 <code>render</code> 方法可以在瀏覽器上渲染出我們需要的 DOM。</li>
<li>此外，不應該在 <code>render</code> 方法中改變 component 的 <code>state</code>。</li>
</ol>
<p>而 render 方法中接受以下的值(關於 portal 與  fragement 的細節留待後續學習)</p>
<ul>
<li>React element</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 略</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... 略</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Array 和 fragment</li>
</ul>
<p>透過 array 產生數個元件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 略</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   &#123; </span></span><br><span class="line"><span class="language-xml">    [1,2,3].map(num =&gt; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    )) </span></span><br><span class="line"><span class="language-xml">   &#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... 略</span></span><br></pre></td></tr></table></figure>
<p>透過 Fragment 減少額外新增一個節點</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 略</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">ChildA</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">ChildB</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">ChildC</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... 略</span></span><br></pre></td></tr></table></figure>
<p>等同於：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 略</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">ChildA</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">ChildB</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">ChildC</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... 略</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Portal</li>
</ul>
<blockquote>
<p>它們讓你將 children render 到不同的 DOM subtree 中</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參考官方範例</span></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">ReactDOM</span>.<span class="title function_">createPortal</span>(</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">children</span>,</span><br><span class="line">  domNode</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ul>
<li>String 和 number</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 略</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... 略</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Boolean 或 null</li>
</ul>
<p><code>test</code> 作為 flag，當 <code>test</code> 為 true 時才渲染 <code>&lt;Child /&gt;</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 略</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    test &amp;&amp; <span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... 略</span></span><br></pre></td></tr></table></figure>
<h3 id="componentDidMount"><a class="header-anchor" href="#componentDidMount"></a>componentDidMount</h3>
<p>這個方法是一個<strong>蠻重要的方法</strong>，依據官方描述，<mark>我們可以在這個方法中做網路請求</mark></p>
<p>意思是如果需要透過 call api 取得一些資料的話，在這個方法中非常適合。</p>
<p>而文件中有描述到:</p>
<blockquote>
<p>這個方法適合設立任何 subscription。設立完 subscription 後，別忘了在 componentWillUnmount() 內取消 subscription。</p>
</blockquote>
<p>這是什麼意思呢? 意思是我們可能有時候會需要透過額外建立像是監聽事件:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn);</span><br></pre></td></tr></table></figure>
<p>我們可以在 <code>componentDidMount</code> 中建立類似這種監聽事件，並於元件銷毀時取消:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 componentWillUnmount life cycle method 中取消</span></span><br><span class="line">div.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn);</span><br></pre></td></tr></table></figure>
<p>另外就是可以在<strong>componentDidMount() 內呼叫 setState()</strong>，而這會觸發額外的一次 render ，但是會在瀏覽器更新螢幕之前發生。代表使用者並不會察覺到變化。</p>
<p>但使用上需要注意，可能會<strong>導致效能問題</strong>。</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/wizardly-shtern-15gnn?file=/src/App.js">點擊前往</a>。</p>
<h2 id="元件-Component-更新時-updating-的生命週期方法"><a class="header-anchor" href="#元件-Component-更新時-updating-的生命週期方法"></a>元件(Component)更新時(updating)的生命週期方法</h2>
<p>所有方法:</p>
<ul>
<li><code>static getDerivedStateFromProps()</code></li>
<li><code>shouldComponentUpdate()</code></li>
<li><code>render()</code></li>
<li><code>getSnapshotBeforeUpdate()</code></li>
<li><code>componentDidUpdate()</code></li>
</ul>
<p><strong>常用方法:</strong></p>
<ul>
<li><code>render()</code></li>
<li><code>componentDidUpdate()</code></li>
</ul>
<h3 id="shouldComponentUpdate-nextProps-nextState"><a class="header-anchor" href="#shouldComponentUpdate-nextProps-nextState"></a>shouldComponentUpdate(nextProps, nextState)</h3>
<p><strong>透過 shouldComponentUpdate 可以用來決定 component 會不會跟著被更新的 state 或者 props 而有所變動。</strong></p>
<p>當我們回傳 <code>false</code> 時，可以阻止 component 重新 render。</p>
<p><strong>但 React 的預設行為是每次只要有更新就會觸發重新 render，所以在使用這個方法時要特別注意。雖然這個方法的存在是為了效能最佳化，使我們可以透過比對前後的 state, prop 來決定是否做此次的更新，但透過回傳 <code>false</code> 並不會避免子元件在自身 state 改變時的重新 render</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="title function_">shouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>) &#123;</span><br><span class="line"> <span class="comment">// 可以在這裡比對 state, props 決定是否要做此次更新</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
<h3 id="getSnapshotBeforeUpdate-prevProps-prevState"><a class="header-anchor" href="#getSnapshotBeforeUpdate-prevProps-prevState"></a>getSnapshotBeforeUpdate(prevProps, prevState)</h3>
<p><strong>在最近一次 render 前可以讓我們做些處理的方法，通常可以用來在 DOM 改變之前先從其中抓取一些資訊，此外當使用了這個方法時，會回傳一個值作為參數傳遞給 componentDidUpdate()</strong></p>
<p>最常使用的情況是用來處理 <strong>取得滾動軸位置</strong>，以官方的例子為例:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ScrollingList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">listRef</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getSnapshotBeforeUpdate</span>(<span class="params">prevProps, prevState</span>) &#123;</span><br><span class="line">    <span class="comment">// Are we adding new items to the list?</span></span><br><span class="line">    <span class="comment">// Capture the scroll position so we can adjust scroll later.</span></span><br><span class="line">    <span class="keyword">if</span> (prevProps.<span class="property">list</span>.<span class="property">length</span> &lt; <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">list</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> list = <span class="variable language_">this</span>.<span class="property">listRef</span>.<span class="property">current</span>;</span><br><span class="line">      <span class="keyword">return</span> list.<span class="property">scrollHeight</span> - list.<span class="property">scrollTop</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps, prevState, snapshot</span>) &#123;</span><br><span class="line">    <span class="comment">// If we have a snapshot value, we&#x27;ve just added new items.</span></span><br><span class="line">    <span class="comment">// Adjust scroll so these new items don&#x27;t push the old ones out of view.</span></span><br><span class="line">    <span class="comment">// (snapshot here is the value returned from getSnapshotBeforeUpdate)</span></span><br><span class="line">    <span class="keyword">if</span> (snapshot !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> list = <span class="variable language_">this</span>.<span class="property">listRef</span>.<span class="property">current</span>;</span><br><span class="line">      list.<span class="property">scrollTop</span> = list.<span class="property">scrollHeight</span> - snapshot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.listRef&#125;</span>&gt;</span>&#123;/* ...contents... */&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>透過在 <code>getSnapshotBeforeUpdate</code> 做些判斷並回傳值，作為 <code>componentDidUpdate</code> 中可以用來判斷並額外處理的值。</p>
<h3 id="componentDidUpdate-prevProps-prevState-snapshot"><a class="header-anchor" href="#componentDidUpdate-prevProps-prevState-snapshot"></a>componentDidUpdate(prevProps, prevState, snapshot)</h3>
<p>這是<strong>更新時最重要的方法</strong>，在<strong>更新後</strong>會馬上被呼叫。</p>
<p>而依據官方解釋，在這邊也<strong>非常適合做網路請求，這代表我們也可以在這個生命週期 call api。</strong></p>
<p><code>componentDidUpdate</code> 與 <code>componentDidMount</code> 用法類似，也可以在此呼叫 <code>setState</code> 來更新 <code>state</code> 的值，但需要特別注意的是，<strong>在 <code>componentDidUpdate</code> 中記得比較前後的值是否有差異，如果有差異的話才做新的一次網路請求，否則可能會影響 component 的效能。</strong></p>
<p>此官方例子為例:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">componentDidUpdate</span>(<span class="params">prevProps</span>) &#123;</span><br><span class="line">  <span class="comment">// 常見用法（別忘了比較 prop）：</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">userID</span> !== prevProps.<span class="property">userID</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">fetchData</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">userID</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="元件-Component-卸下時-Unmount-的生命週期方法"><a class="header-anchor" href="#元件-Component-卸下時-Unmount-的生命週期方法"></a>元件(Component)卸下時(Unmount)的生命週期方法</h2>
<p>最後是元件生命週期的最後一哩路，就是銷毀或卸下這個元件。</p>
<p>這個部分的生命週期方法只有 <code>componentWillUnmount</code>， <strong>會在一個 component 被 unmount 和 destroy 後馬上被呼叫，我們可以在這裡做一些清除的行為。</strong></p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://zh-hant.reactjs.org/docs/react-component.html#componentdidupdate">React.Component</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Class-based Component 的生命週期</title>
    <url>/2020/09/22/Class-based-Component-%E7%9A%84%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F/</url>
    <content><![CDATA[<h1 id="Class-based-Component-的生命週期"><a class="header-anchor" href="#Class-based-Component-的生命週期"></a>Class-based Component 的生命週期</h1>
<p>今天要學習關於 Class-based Component 的生命週期(lifecycle)，了解元件(Component)在建立、更新及銷毀時會經歷過哪些階段、元件和子元件之間的建立順序與我們可以在這些時候做些什麼事情。</p>
<span id="more"></span>
<p>而這些生命週期的方法只能在<strong>Class-based Component 中使用，在 Function Component 中則是需要透過 React hooks 的方式達成，但這個我們留待後面的篇幅在做學習。</strong></p>
<p>而 Class-based Component 的生命週期會拆分兩篇來做學習，今天先透過測試範例，一步步了解 Class-based Component 中建立元件、更新元件以及銷毀元件時會用到的生命週期方法:</p>
<p>明天的部分則是針對這些方法來了解官方的定義。</p>
<p>接著讓我們趕緊進入正題吧!</p>
<h2 id="Class-component-的生命週期"><a class="header-anchor" href="#Class-component-的生命週期"></a>Class component 的生命週期</h2>
<p>在官方文件中有提供一份清楚易懂的<a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">生命週期示意圖</a>。</p>
<p><img src="https://i.imgur.com/Ongt46L.png" alt=""></p>
<p>接著，讓我們先透過幾個簡單的測試範例來了解關於生命週期，後續再來看看官方對於每個方法又是怎麼定義的吧!!</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/runtime-pine-8imyu">點擊前往</a></p>
<p>首先我們建立 <code>Card</code> 元件，並在 App 中將 <code>state</code> 的中 <code>persons</code> 的資料 <code>props</code> 到 Card 元件:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Card</span> <span class="keyword">from</span> <span class="string">&#x27;./Card&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">persons</span>: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span>, <span class="attr">age</span>: <span class="number">27</span>, <span class="attr">habbit</span>: <span class="string">&#x27;Play ball&#x27;</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Card</span> <span class="attr">persons</span>=<span class="string">&#123;</span> <span class="attr">this.state.persons</span> &#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Card.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Card</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123; this.props.persons[0].name &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; this.props.persons[0].age &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; this.props.persons[0].habbit &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Card</span>;</span><br></pre></td></tr></table></figure>
<p>接著在 <code>App</code> 這個 containers 與 <code>Card</code> 這個元件中，我們依據官方提供的示意圖，設定好生命週期的方法。</p>
<p>這邊我們先觀察 <strong>Mounting 時的階段</strong>，依如下順序在 App, Card 中設定:</p>
<ul>
<li><code>constructor</code></li>
<li><code>static getDerivedStateFromProps</code></li>
<li><code>render</code></li>
<li><code>componentDidMount</code></li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js Mounting life cycle</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Card</span> <span class="keyword">from</span> <span class="string">&#x27;./Card&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[App.js]: constructor&#x27;</span>);</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">persons</span>: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span>, <span class="attr">age</span>: <span class="number">27</span>, <span class="attr">habbit</span>: <span class="string">&#x27;Play ball&#x27;</span>&#125;</span><br><span class="line">      ],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">props, state</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[App.js]: getDerivedStateFromProps&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;props&#x27;</span>, props);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;state&#x27;</span>, state);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[App.js]: componentDidMount&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[App.js]: render&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Card</span> <span class="attr">persons</span>=<span class="string">&#123;</span> <span class="attr">this.state.persons</span> &#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Card.js Mounting life cycle</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Card</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[Card.js]: constructor&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">props, state</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[Card.js]: getDerivedStateFromProps&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;props&#x27;</span>, props);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;state&#x27;</span>, state);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[Card.js]: componentDidMount&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[Card.js]: render&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123; this.props.persons[0].name &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; this.props.persons[0].age &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; this.props.persons[0].habbit &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Card</span>;</span><br></pre></td></tr></table></figure>
<p>此時會得到這樣的結果：</p>
<p><img src="https://i.imgur.com/LZnSNWk.png" alt=""></p>
<p>而其中在 <code>Card</code> 元件中使用 <code>getDerivedStateFromProps</code> 方法會報錯的部分是因為 <code>Card</code> 元件這邊是接收 App <code>props</code> 進來的值，而本身沒有 init state，所以才會報錯，而稍後我們會了解 <code>getDerivedStateFromProps</code> 這個方法的定義。</p>
<p>不過從結果可以得知，<mark>當 App containers 中有子元件 Card 時，在 App 執行到 <code>render</code> 方法時，並不會先完成 App 的掛載(componentDidMount)，而是會進入到 Card 中並依據這個元件的生命週期建立後，最後才會回到 App 並完成掛載(componentDidMount)</mark>。</p>
<p>接著讓我們往 <strong>Updating 的階段</strong>繼續前進，這邊我們設定一個情境:</p>
<p>點擊卡片時會將名字從「Bill」切換成 「Henry」。</p>
<p>並將如下的生命週期方法依序設定:</p>
<ul>
<li><code>static getDerivedStateFromProps</code></li>
<li><code>shouldComponentUpdate</code></li>
<li><code>render</code></li>
<li><code>getSnapshotBeforeUpdate</code></li>
<li><code>componentDidUpdate</code></li>
</ul>
<p>相關測試範例： <a href="https://codesandbox.io/s/affectionate-easley-zp0j1?file=/src/App.js">點擊前往</a>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js updating life cycle</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Card</span> <span class="keyword">from</span> <span class="string">&#x27;./Card&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">persons</span>: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span>, <span class="attr">age</span>: <span class="number">27</span>, <span class="attr">habbit</span>: <span class="string">&#x27;Play ball&#x27;</span>&#125;</span><br><span class="line">      ],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeNameHandler = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> arr = state.<span class="property">persons</span>;</span><br><span class="line">      arr[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&#x27;Henry&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">persons</span>: arr</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">props, state</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[App.js]: getDerivedStateFromProps&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;props&quot;</span>, props);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;state&quot;</span>, state);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">shouldComponentUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[App.js]: shouldComponentUpdate&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getSnapshotBeforeUpdate</span>(<span class="params">props, state</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[App.js]: getSnapshotBeforeUpdate&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;props&quot;</span>, props);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;state&quot;</span>, state);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[App.js]: componentDidUpdate&#x27;</span>); </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[App.js]: render&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Card</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">persons</span>=<span class="string">&#123;</span> <span class="attr">this.state.persons</span> &#125; </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">changeNameHandler</span>=<span class="string">&#123;</span> <span class="attr">this.changeNameHandler</span> &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Card.js updating life cycle</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Card</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">props, state</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[Card.js]: getDerivedStateFromProps&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;props&quot;</span>, props);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;state&quot;</span>, state);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">shouldComponentUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[Card.js]: shouldComponentUpdate&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getSnapshotBeforeUpdate</span>(<span class="params">props, state</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[Card.js]: getSnapshotBeforeUpdate&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;props&quot;</span>, props);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;state&quot;</span>, state);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[Card.js]: componentDidUpdate&#x27;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[Card.js]: render&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">this.props.changeNameHandler</span> &#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123; this.props.persons[0].name &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; this.props.persons[0].age &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; this.props.persons[0].habbit &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Card</span>;</span><br></pre></td></tr></table></figure>
<p>可以取得以下結果：</p>
<p><img src="https://i.imgur.com/FrNGvte.png" alt=""></p>
<p><mark>這邊比較特別的大概是執行 <code>getSnapshotBeforeUpdate</code> 的部分，並不是先完成 <code>Card</code> 元件更新的生命週期方法後回到 App 中，而是先回到 App 中執行完 <code>getSnapshotBeforeUpdate</code> 方法後才會完成 <code>Card</code> 元件的更新，接著才是 <code>App</code> 的更新</mark>。</p>
<p>最後一個階段是 <strong>Unmounting</strong>，這個階段<strong>會在 component 被 unmount 或者 destroy 的時候觸發</strong>，這邊我們一樣給一個情境:</p>
<p>點擊按鈕時，會將卡片隱藏起來</p>
<p>相關測試範例： <a href="https://codesandbox.io/s/frosty-rain-bfoqo">點擊前往</a>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js unmounting life cycle</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Card</span> <span class="keyword">from</span> <span class="string">&#x27;./Card&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">persons</span>: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span>, <span class="attr">age</span>: <span class="number">27</span>, <span class="attr">habbit</span>: <span class="string">&#x27;Play ball&#x27;</span>&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">isHide</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeNameHandler = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> arr = state.<span class="property">persons</span>;</span><br><span class="line">      arr[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&#x27;Henry&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">persons</span>: arr</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  hideCardHandler = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">persons</span>: [] &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">props, state</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[App.js]: getDerivedStateFromProps&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;props&quot;</span>, props);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;state&quot;</span>, state);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">shouldComponentUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[App.js]: shouldComponentUpdate&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getSnapshotBeforeUpdate</span>(<span class="params">props, state</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;props&quot;</span>, props);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;state&quot;</span>, state);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[App.js]: componentDidUpdate&#x27;</span>); </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[App.js]: componentWillUnmount&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[App.js]: render&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123; this.state.persons.map(person =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Card</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">persons</span>=<span class="string">&#123;</span> <span class="attr">this.state.persons</span> &#125; </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">changeNameHandler</span>=<span class="string">&#123;</span> <span class="attr">this.changeNameHandler</span> &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">isHide</span>=<span class="string">&#123;</span> <span class="attr">this.state.isHide</span> &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span> </span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">this.hideCardHandler</span> &#125;&gt;</span>隱藏卡片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Card.js unmounting life cycle</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Card</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">props, state</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[Card.js]: getDerivedStateFromProps&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(state);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">shouldComponentUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[Card.js]: shouldComponentUpdate&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getSnapshotBeforeUpdate</span>(<span class="params">props, state</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[Card.js]: getSnapshotBeforeUpdate&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(state);;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[Card.js]: componentDidUpdate&#x27;</span>); </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[Card.js]: componentWillUnmount&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[Card.js]: render&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">this.props.changeNameHandler</span> &#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123; this.props.persons[0].name &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; this.props.persons[0].age &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; this.props.persons[0].habbit &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Card</span>;</span><br></pre></td></tr></table></figure>
<p>可以得到執行結果如下:</p>
<p><img src="https://i.imgur.com/ZvAeyxj.png" alt=""></p>
<p>由於被 destroy 的是 <code>Card</code> 元件，所以可以發現在 <code>App</code> 中的 life cycle 一樣會執行，但是 <code>Card</code> 元件則是只有觸發了 ComponentWillUnmount 方法。</p>
<p>以上就是關於 Class-based component 中從建立元件、更新元件以及銷毀元件的生命週期展示，下個篇幅就針對上述的生命週期方法，看看官方是怎麼定義的吧!</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">React Lifecycle Methods diagram</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Context API</title>
    <url>/2020/09/30/Context-API/</url>
    <content><![CDATA[<h1 id="Context-API"><a class="header-anchor" href="#Context-API"></a>Context API</h1>
<p>今天要學習的部分是 Context API 的簡單使用。</p>
<p>在一般的使用情境中，我們都透過傳遞 <code>props</code> 到子元件中，讓子元件可以使用父層的資料，但隨著專案的複雜度提升等等的因素，可能會有需要<strong>傳遞多層 <code>props</code> 的情況發生</strong>，這時候可在開發與維護時都會造成一定的疏漏或困擾。</p>
<span id="more"></span>
<p>而透過這個 API 提供的方法，可以讓我們在 class component 或者 function component 中解決因為 <strong>多層傳遞 props 可能會造成的問題。</strong></p>
<p>而用法上其實也很清楚易懂，趕緊往下學習吧!</p>
<h2 id="Context-API-的使用"><a class="header-anchor" href="#Context-API-的使用"></a>Context API 的使用</h2>
<p>這裡我們將流程大致順過一次:</p>
<ol>
<li>使用 Context API 的第一步，就是<strong>先建立一個 Context 物件，讓元件可以訂閱這個 Context 物件</strong>。</li>
<li>透過 <strong><code>Context.Provider </code>的方式讓訂閱的元件可以使用到這個 <code>Context</code> 物件中，我們指定的值</strong>(<strong>這邊要設定在使用元件 Tag 的地方</strong>)。</li>
<li><strong>最後透過 <code>Context.Consumer</code> 的方式在元件中使用這個 <code>Context</code> 物件中的值。</strong></li>
<li>在 class-based component 中需要定義 <strong><code>static contextType = MyContext;</code></strong> 或者 <code>Component.contextType = MyContext;</code> 才可以在元件中使用 <code>this.context</code></li>
<li>在 function component 中，可以透過 <strong><code>&#123; context =&gt; &#123; React element, component &#125; &#125;</code></strong> 的方式使用 <code>context</code> 物件</li>
</ol>
<p>最後需要注意的一點時， <strong>Context 物件可以放入的不是單純只有值，函式、物件及陣列等等都可以在這裡設定，並且讓所有使用到這個 Context 物件的地方都可以享用這些設定</strong></p>
<p>為了可以更清楚差別，這邊我們先撰寫一個正常傳遞 <code>props</code> 的方式:</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/cranky-minsky-ylh80">點擊前往</a>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Card</span> <span class="keyword">from</span> <span class="string">&quot;./components/Card&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setTextState] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&quot;Initial value&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeTextHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTextState</span>(&#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;change text by props data&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Card</span> <span class="attr">text</span>=<span class="string">&#123;state.text&#125;</span> <span class="attr">changeTextHandler</span>=<span class="string">&#123;changeTextHandler&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Card.</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Card</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.props.changeTextHandler&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.props.text&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Card</span>;</span><br></pre></td></tr></table></figure>
<p>上面這個方式相信大家已經熟悉用法，接著我們透過 Context API 來達成。</p>
<p>我們先透過 <strong><code>React.createContext</code> 建立一個 Context 元件</strong>，這裡面可以設定好預設值</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Context.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Context</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(&#123;</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">changeTextByContextAPI</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">  <span class="attr">changeTextByContextAPIInFuncComponent</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">  <span class="attr">changeTextByUseContextInFuncComponent</span>: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Context</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>接著我們來看看在 class-based component 與 function component 中的寫法</p>
<p>首先是 class-based component，使用的重點在於:</p>
<ol>
<li><code>Context.Provider</code></li>
<li><code>static contextType = Context;</code> or <code>Card2.contextType = Context;</code></li>
<li><code>Context.Consumer, &#123;context =&gt; &#123; React element / component &#125;&#125;</code></li>
</ol>
<p>備註: 2, 3 擇一使用即可</p>
<p>透過上述設定方式可以讓我們在<strong>class-based component 中的任何地方都可以透過取得 this.context 的值</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Card2</span> <span class="keyword">from</span> <span class="string">&quot;./components/Card2&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Context</span> <span class="keyword">from</span> <span class="string">&quot;./components/Context&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setTextState] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">contextText</span>: <span class="string">&quot;Initial value&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeTextByContextAPI</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTextState</span>(&#123;</span><br><span class="line">      ...state,</span><br><span class="line">      <span class="attr">contextText</span>: <span class="string">&quot;change text by Context Provider/Consumer&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>透過 Context.Provider 提供 Coontext 物件的值到 card 元件中<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>此為 Class-based component<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Context.Provider</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">...state</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">changeTextByContextAPI</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Card2</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Card2.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Context</span> <span class="keyword">from</span> <span class="string">&quot;../Context&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Card2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="comment">// 可以這麼宣告來使用 this.context</span></span><br><span class="line">  <span class="comment">//static contextType = Context;</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.context.changeTextByContextAPI&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.context.contextText&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      <span class="comment">// 這個方式也可以</span></span><br><span class="line">      &#123;<span class="comment">/* &lt;Context.Consumer&gt;</span></span><br><span class="line"><span class="comment">        &#123;(context) =&gt; (</span></span><br><span class="line"><span class="comment">          &lt;div</span></span><br><span class="line"><span class="comment">            className=&quot;card&quot;</span></span><br><span class="line"><span class="comment">            onClick=&#123;context.changeTextByContextAPIInFuncComponent&#125;</span></span><br><span class="line"><span class="comment">          &gt;</span></span><br><span class="line"><span class="comment">            &#123;context.contextTextInFuncComponent&#125;</span></span><br><span class="line"><span class="comment">          &lt;/div&gt;</span></span><br><span class="line"><span class="comment">        )&#125;</span></span><br><span class="line"><span class="comment">      &lt;/Context.Consumer&gt; */</span>&#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以選擇這種方式來使用 this.context</span></span><br><span class="line"><span class="title class_">Card2</span>.<span class="property">contextType</span> = <span class="title class_">Context</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Card2</span>;</span><br></pre></td></tr></table></figure>
<p>接著是在 function component 中的寫法，使用重點:</p>
<ol>
<li><code>Context.Provider</code></li>
<li><code>Context.Consumer</code>, <code>&#123;context =&gt; &#123; React element / component &#125;&#125;</code></li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Card3.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Context</span> <span class="keyword">from</span> <span class="string">&quot;../Context&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Card3</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Context.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;(context) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">className</span>=<span class="string">&quot;card&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;context.changeTextByContextAPIInFuncComponent&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;context.contextTextInFuncComponent&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Context.Consumer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Card3</span>;</span><br></pre></td></tr></table></figure>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://zh-hant.reactjs.org/docs/context.html#dynamic-context">Context</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Free Cell 新接龍</title>
    <url>/2021/02/27/Free-Cell-%E6%96%B0%E6%8E%A5%E9%BE%8D/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/ei6wvxQ.gif" alt=""></p>
<h2 id="使用技術"><a class="header-anchor" href="#使用技術"></a>使用技術</h2>
<ul>
<li><strong>HTML</strong></li>
<li><strong>SCSS</strong></li>
<li><strong>VanillaJS</strong></li>
</ul>
<h2 id="實現功能"><a class="header-anchor" href="#實現功能"></a>實現功能</h2>
<h4 id="開啟新遊戲的提示"><a class="header-anchor" href="#開啟新遊戲的提示"></a>開啟新遊戲的提示</h4>
<p>點擊右方 「NEW」 按鈕會跳出開啟新遊戲的彈跳視窗，選擇開啟一局新的遊戲或者返回當前遊戲</p>
<p><img src="https://i.imgur.com/zTLaRRk.gif" alt=""></p>
<span id="more"></span>
<h4 id="重新開啟該局遊戲的提示"><a class="header-anchor" href="#重新開啟該局遊戲的提示"></a>重新開啟該局遊戲的提示</h4>
<p>點擊右方 「RESTART」 按鈕會跳出重新開始該局遊戲的彈跳視窗，選擇重新開始該局的遊戲或者返回當前遊戲</p>
<p><img src="https://i.imgur.com/wKeO567.gif" alt=""></p>
<h4 id="回到上一步-Undo-功能"><a class="header-anchor" href="#回到上一步-Undo-功能"></a>回到上一步(Undo)功能</h4>
<p>當卡牌成功放置於上方區塊時，此時右方 「UNDO」 按鈕顯示為可點擊，點擊該按鈕時，能退回到前一次的拖曳結果</p>
<p><img src="https://i.imgur.com/UpfGR4I.gif" alt=""></p>
<h4 id="遊戲時間計時功能-右上角區塊"><a class="header-anchor" href="#遊戲時間計時功能-右上角區塊"></a>遊戲時間計時功能(右上角區塊)</h4>
<p>遊戲於開局動畫結束後開始計時，記錄遊戲遊玩時間</p>
<h4 id="移動卡牌次數計算功能-右上角區塊"><a class="header-anchor" href="#移動卡牌次數計算功能-右上角區塊"></a>移動卡牌次數計算功能(右上角區塊)</h4>
<p>每次成功移動卡牌到上方區域時，記錄移動的次數</p>
<h4 id="卡牌暫存區-左上四個放置卡牌的區塊"><a class="header-anchor" href="#卡牌暫存區-左上四個放置卡牌的區塊"></a>卡牌暫存區(左上四個放置卡牌的區塊)</h4>
<p>左方為卡牌暫時存放的區塊，一次只能放置單張卡牌</p>
<p><img src="https://i.imgur.com/uxY5Evf.gif" alt=""></p>
<h4 id="卡牌完成區-右上四個放置卡牌的區塊"><a class="header-anchor" href="#卡牌完成區-右上四個放置卡牌的區塊"></a>卡牌完成區(右上四個放置卡牌的區塊))</h4>
<p>右方為完成卡牌存放的區塊，可放置多張卡牌，順序由小至大(A 到 K)</p>
<p><img src="https://i.imgur.com/ei6wvxQ.gif" alt=""></p>
<h2 id="學習重點紀錄"><a class="header-anchor" href="#學習重點紀錄"></a>學習重點紀錄</h2>
<ul>
<li><a href="https://penghuachen.github.io/2021/01/31/%E6%8A%8A%E7%8E%A9-HTML-Drag-and-Drop-API/">把玩 HTML Drag and Drop API</a></li>
<li><code>e.target</code>/<code>e.currentTarget</code> 的差別(待整理)</li>
</ul>
<h2 id="Github-repo-及作品連結"><a class="header-anchor" href="#Github-repo-及作品連結"></a>Github repo 及作品連結</h2>
<ul>
<li><a href="https://github.com/penghuachen/solitaire">Github repo</a></li>
<li><a href="https://penghuachen.github.io/solitaire/">Repo Demo</a></li>
</ul>
<h2 id="參考來源"><a class="header-anchor" href="#參考來源"></a>參考來源</h2>
<ul>
<li><a href="https://challenge.thef2e.com/user/1461?schedule=2812#works-2812">The F2E 精神時光屋 - 設計稿</a></li>
</ul>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>HTML/CSS</tag>
        <tag>sideproject</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 模板字串(Template literals)</title>
    <url>/2019/10/14/ES6-%E6%A8%A1%E6%9D%BF%E5%AD%97%E4%B8%B2-Template-literals/</url>
    <content><![CDATA[<h1 id="ES6-模板字串-Template-literals"><a class="header-anchor" href="#ES6-模板字串-Template-literals"></a>ES6 模板字串(Template literals)</h1>
<p>今天要來學習的部分是 ES6 好用的語法，<strong>模板字串(Template literals)</strong></p>
<p>這個語法大大增加了開發的效率，是個非常好用的技巧，讓我們趕緊學起來吧！</p>
<span id="more"></span>
<h2 id="ES6之前新增字串的方式"><a class="header-anchor" href="#ES6之前新增字串的方式"></a>ES6之前新增字串的方式</h2>
<p>在ES6之前我們新增字串的方式是透過 <code>' '</code> 以及 <code>+</code> 作為字串間串連的橋樑，程式碼大致如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Bill&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi, my name is:&#x27;</span> + name);</span><br></pre></td></tr></table></figure>
<p>透過上述的方式可以讓變數的值與字串搭配運用。</p>
<p>但如果今天字串的內容是一段HTML架構呢?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var className = container;</span><br><span class="line">var string  = &#x27;&lt;div class=&quot;&#x27;+ className +&#x27;&quot;&gt;&lt;/div&gt;&#x27;</span><br></pre></td></tr></table></figure>
<p>如果字串是一組HTML架構時，這時候可讀性跟開發效率肯定就不會太好。</p>
<p>不過自從有了ES6 的模板字串(Template literals)後，這個問題就大幅度的被改善囉</p>
<h2 id="ES6之後新增字串的方式"><a class="header-anchor" href="#ES6之後新增字串的方式"></a>ES6之後新增字串的方式</h2>
<p>關於使用模板字串(Template literals)有幾種常見的方式:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 第一種</span></span><br><span class="line"><span class="string">`string text`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 第二種</span></span><br><span class="line"><span class="string">`string text line 1</span></span><br><span class="line"><span class="string"> string text line 2`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 第三種</span></span><br><span class="line"><span class="string">`string text <span class="subst">$&#123;expression&#125;</span> string text`</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Template_literals#%E8%AA%9E%E6%B3%95">模板字串(Template literals)</a></p>
</blockquote>
<p>簡單透過一個反引號，就可以輕鬆的將 HTML 架構呈現:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul class=&quot;list&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;123&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;456&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;789&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;101&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure>
<p>那如果有變數時，這時候只需要透過 <code>$&#123;...&#125;</code> 就可以輕鬆將需要的變數放入到字串中囉：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> className = <span class="string">&quot;list-li&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul class=&quot;list&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;li class=<span class="subst">$&#123;className&#125;</span>&gt;123&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li class=<span class="subst">$&#123;className&#125;</span>&gt;456&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li class=<span class="subst">$&#123;className&#125;</span>&gt;789&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li class=<span class="subst">$&#123;className&#125;</span>&gt;101&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure>
<p>但其實 <code>$&#123;...&#125;</code> 的好用之處可不只這些，從 MDN 提供的語法來看可以發現，剛剛用於放入變數的地方，其實是可以放入一個表達式(expression)的，換句話說，我們也可以這麼使用:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Total : <span class="subst">$&#123;a + b&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
<p><code> $&#123;a + b&#125;</code> 中的 <code>a + b</code> 是一個表達式(expression)，所以可以使用。</p>
<p>或者我們也可以放入條件判斷：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buyCar</span>(<span class="params">name,money</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;(money &gt; <span class="number">500000</span>) ? <span class="string">&#x27;can buy a car.&#x27;</span>:<span class="string">&#x27;can not afford it.&#x27;</span>&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">buyCar</span>(<span class="string">&#x27;Jack&#x27;</span>,<span class="number">700000</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Higher order component(HOC)</title>
    <url>/2020/09/28/Higher-order-component-HOC/</url>
    <content><![CDATA[<h1 id="Higher-order-component-HOC"><a class="header-anchor" href="#Higher-order-component-HOC"></a>Higher order component(HOC)</h1>
<p>今天要學習的部分是 Higher order component，這是一種可以複用元件邏輯的高階技術。</p>
<p>但除了複用元件的邏輯之外，也可以用於增強樣式、元件內容等等，在正常的情況下，不會對於原本的元件有任何的修改。</p>
<span id="more"></span>
<p>像是前幾天學習到的 styled component 其實就有使用到這個概念</p>
<p>接著讓我們用一個情境來學習這個部分吧!</p>
<h2 id="如何使用-Higher-order-component-HOC"><a class="header-anchor" href="#如何使用-Higher-order-component-HOC"></a>如何使用 Higher order component(HOC)</h2>
<p>首先 Higher order component(HOC) 並不是使用了 React 的任何 API ，這個部分我們可以透過官方的定義來理解:</p>
<blockquote>
<p>a higher-order component is a function that takes a component and returns a new component</p>
</blockquote>
<p><strong>僅僅是一個函式，且傳入一個元件，會回傳一個被包裝後的元件回來。</strong></p>
<p>先來看看一個簡單的使用情境: 透過 HOC 的方式包裝一個按鈕(Button)改變它的背景顏色。</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/magical-elbakyan-cryr4?file=/src/App.js">點擊前往</a>。</p>
<p>備註： 為了理解 HOC 的方式才使用 HOC 的方式來理解。</p>
<p>首先我們先建立一個 <code>BaseButton</code> 元件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  BaseButton.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">BaseButton</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>BaseButton<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">BaseButton</span>;</span><br></pre></td></tr></table></figure>
<p>接著我們建立一個要用來包裝這個 <code>BaseButton</code> 元件的 <code>WrapComponent</code>，並且透過一個 div 包住，此外我們先設定成要將 Button 背景顏色改成藍色，文字顏色改成白色。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;.index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">WithButtonBgAndColor</span> = (<span class="params">WrapComponent</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">props</span> =&gt;</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;btn-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">WrapComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">WithButtonBgAndColor</span>;</span><br></pre></td></tr></table></figure>
<p>HOC 設置好之後，接著這邊可以有幾種寫法：</p>
<p>第一種，<strong>將 <code>BaseButton</code> 引入到這個 HOC 函式中，我們在 <code>WithButtonBgAndColor</code> 中傳入 <code>BaseButton</code> 元件並且 <code>export</code> 出去，這樣在 App.js 中使用時會得到一個被包裝後的元件</strong>：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WithButtonBgAndColor.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;.index.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BaseButton</span> <span class="keyword">from</span> <span class="string">&quot;../../components/BaseButton/&quot;</span>; <span class="comment">// 要被包裝的 BaseButton</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">WithButtonBgAndColor</span> = (<span class="params">WrapComponent</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">props</span> =&gt;</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;btn-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">WrapComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">WithButtonBgAndColor</span>(<span class="title class_">BaseButton</span>);</span><br></pre></td></tr></table></figure>
<p>還記得一開始提到 HOC 定義嗎?</p>
<p>「<strong>僅僅是一個函式，且傳入一個元件，會回傳一個被包裝後的元件回來。</strong>」。</p>
<p>從這邊可以看到我們在 <code>WithButtonBgAndColor</code> 中回傳了一個元件。</p>
<p>而由於這邊我們 <code>export</code> 時是回傳一個元件，<code>所以這邊要使用大寫的方式寫成WithButtonBgAndColor</code></p>
<p>接著讓我們在 App.js 中使用：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BaseButton</span> <span class="keyword">from</span> <span class="string">&quot;./components/BaseButton/&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">WithButtonBgAndColor</span> <span class="keyword">from</span> <span class="string">&#x27;./HOC/WithButtonBgAndColor&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">BaseButton</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">WithButtonBgAndColor</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除了上述的方式外，我們也可以這麼寫</p>
<p>將 <code>withButtonBgAndColor</code> 函式在 App.js 中引入，並包裝 <code>BaseButton</code> 後取得一個被包裝後的元件</p>
<p>至於為什麼要把 <code>const AnotherButtonBgAndColor =  withButtonBgAndColor(BaseButton); </code> 寫在 App.js 之外呢，這部分在文件中有提到：</p>
<p><strong>1. 每一次 render 都會重新建立一個新的 <code>WrapComponet</code> 元件</strong><br>
<strong>2. 由於每次都是新的元件，所以 React 的 diff 算法會將舊的元件移除，並掛載新的元件，導致元件的狀態和子元件等都會丟失。</strong><br>
<strong>3. 應該在定義元件的外部建立 HOC ，這樣就只會被創建一次。</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// withButtonBgAndColor.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">withButtonBgAndColor</span> = (<span class="params">WrapComponent</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">props</span>) =&gt;</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;btn-container-1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">WrapComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withButtonBgAndColor;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BaseButton</span> <span class="keyword">from</span> <span class="string">&quot;./components/BaseButton/&quot;</span>;</span><br><span class="line"><span class="comment">// 請注意 WithButtonBgAndColor 和 withButtonBgAndColor 的差異</span></span><br><span class="line"><span class="comment">// 回傳一個元件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">WithButtonBgAndColor</span> <span class="keyword">from</span> <span class="string">&quot;./HOC/WithButtonBgAndColor&quot;</span>;</span><br><span class="line"><span class="comment">// 是一個函式</span></span><br><span class="line"><span class="keyword">import</span> withButtonBgAndColor <span class="keyword">from</span> <span class="string">&quot;./HOC/withButtonBgAndColor&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AnotherButtonBgAndColor</span> = <span class="title function_">withButtonBgAndColor</span>(<span class="title class_">BaseButton</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>基本的 Button<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">BaseButton</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>HOC - 直接包裝後回傳一個被包裝後的 Button<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">WithButtonBgAndColor</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>HOC - 呼叫函式後回傳一個被包裝後的 Button<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">AnotherButtonBgAndColor</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>但我們<strong>一定有需要依據值的不同而取得不同的內容</strong>，這個時候又該怎麼做呢?</p>
<p>所以這邊我們將情境修改一下，我們透過動態傳入的值，來取得不同的 button 背景與文字顏色</p>
<p>備註： 撰寫的方式很多種，這裡我們透過像是<strong>使用一般在函式使用的方式般傳入參數來達成</strong>，當然我們也可以透過傳入 props 的方式達到。</p>
<p>首先，我們一樣先建立一個按鈕 <code>AnotherBaseButton</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AnotherBaseButton</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">AnotherBaseButton</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> &#123;<span class="attr">...props</span>&#125;&gt;</span>AnotherBaseButton<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AnotherBaseButton</span>;</span><br></pre></td></tr></table></figure>
<p>這邊可以看到和前一個的些微不同之處，這在後面會提到，接著我們撰寫一個 HOC</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// withDynamicButtonBgAndColor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">withDynamicButtonBgAndColor</span> = (<span class="params">WrapComponent, type</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">props</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrapComponent</span> <span class="attr">className</span>=<span class="string">&#123;type&#125;</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withDynamicButtonBgAndColor;</span><br></pre></td></tr></table></figure>
<p>最後則是在 App.js 中使用，為了方便呈現，僅保留動態傳入值的程式碼，測試範例則包含兩者。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> withDynamicButtonBgAndColor <span class="keyword">from</span> <span class="string">&quot;./HOC/withDynamicButtonBgAndColor&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AnotherBaseButton</span> <span class="keyword">from</span> <span class="string">&quot;./components/AnotherBaseButton&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 透過 props 不同的值來取得被包裝後的元件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">YellowBgAndBlackColor</span> = <span class="title function_">withDynamicButtonBgAndColor</span>(</span><br><span class="line">  <span class="title class_">AnotherBaseButton</span>,</span><br><span class="line">  <span class="string">&quot;yellow-bg-and-black-color&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">RedBgAndWhiteColor</span> = <span class="title function_">withDynamicButtonBgAndColor</span>(</span><br><span class="line">  <span class="title class_">AnotherBaseButton</span>,</span><br><span class="line">  <span class="string">&quot;red-bg-and-white-color&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>HOC - 傳入不同的值動態修改 Button 的樣式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">RedBgAndWhiteColor</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">YellowBgAndBlackColor</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們在 HOC 中設定了兩組樣式 <code>yellow-bg-and-black-color</code>, <code>red-bg-and-white-color</code>，接著我們透過傳入的方式在 HOC 中可以將其作為元件的 class name 使用，這裡有幾個細節需要注意:</p>
<ol>
<li>在 <code>AnotherBaseButton</code> 元件中的 <code>&#123; ...props &#125;</code> 是為了讓元件可以獲得由 HOC 那層傳入的 <code>props</code>，否則會無法取得 <code>props</code> 進來的參數</li>
<li>在 <code>withDynamicButtonBgAndColor</code> 函式中的 <code>&#123; ...props &#125;</code>是為了將由外層傳入的 <code>props</code> 的參數傳遞給 <code>AnotherBaseButton</code> 元件而寫，否則 <code>AnotherBaseButton</code> 元件會無法取得 props 進來的參數</li>
<li><code>&#123; ...props &#125; </code>代表的是我們這次用不到的 <code>props</code> 的參數，如果需要用到的部分，可以透過 <code>className=&#123;type&#125;</code> 的方式額外撰寫。</li>
</ol>
<p>以上就是 HOC 的基礎學習，明天繼續下一個部分～</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://zh-hant.reactjs.org/docs/higher-order-components.html">Higher-Order Components</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Ajax及XMLHttpRequest物件</title>
    <url>/2019/12/07/JavaScript-Ajax%E5%8F%8AXMLHttpRequest%E7%89%A9%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="Ajax-Asynchronous-JavaScript-and-XML-非同步-JavaScript-及-XML"><a class="header-anchor" href="#Ajax-Asynchronous-JavaScript-and-XML-非同步-JavaScript-及-XML"></a>Ajax(Asynchronous JavaScript and XML) 非同步 JavaScript 及 XML</h2>
<p>在 MDN 是這麼解釋著：</p>
<span id="more"></span>
<blockquote>
<p>AJAX 代表 Asynchronous JavaScript And XML，即非同步 JavaScript 及 XML。簡單地說，AJAX 使用 XMLHttpRequest(XHR) 物件來與伺服器進行通訊。它可以傳送並接收多種格式的資訊，包括 JSON、XML、HTML、以及文字檔案。AJAX 最吸引人的特點是「非同步」的本質，這代表它可以與伺服溝通、交換資料、以及更新頁面，且無須重整網頁。<br>
<a href="https://developer.mozilla.org/zh-TW/docs/Web/Guide/AJAX/Getting_Started#AJAX_%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F">什麼是AJAX?</a></p>
</blockquote>
<p>而上述提到了關於Ajax兩個很重要的觀念：</p>
<ol>
<li>
<p>AJAX 使用 XMLHttpRequest 物件來與伺服器進行溝通、交換資料、以及更新頁面，且無須重整網頁(此為AJAX的非同步特性)</p>
</li>
<li>
<p>XMLHttpRequest 物件可以傳送並接收多種格式的資訊，包括 JSON、XML、HTML、以及文字檔案</p>
</li>
</ol>
<h2 id="XMLHttpRequest-物件-XHR物件"><a class="header-anchor" href="#XMLHttpRequest-物件-XHR物件"></a>XMLHttpRequest 物件(XHR物件)</h2>
<p>既然 Ajax 是使用 XMLHttpRequest 物件作為與伺服器溝通的橋樑，那就必須了解一下關於這個XHR物件的屬性、方法。</p>
<p>由於XHR物件有許多的屬性與方法，在此不一一敘述，僅提到測試例子有使用到的語法。</p>
<p>(註：XMLHttpRequest物件以下簡稱為XHR物件)</p>
<p>首先，要使用XHR物件的話，需要先實體化XHR物件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xhr);</span><br></pre></td></tr></table></figure>
<p>此時應該可以看到下圖的資訊</p>
<p><img src="https://i.imgur.com/9ADZwvY.png" alt="Day24-1"><br>
再來我們繼續往下看看它的屬性與方法</p>
<p>剛建立的XHR物件，因為還沒有要和伺服器發出請求，所以可以看到readyState的狀態為0，<strong>代表是XHR物件已經被建立，但open()方法還沒有被呼叫</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">readyState</span>);</span><br></pre></td></tr></table></figure>
<p>關於readyState的狀態變化，可以參考mdn的這個表格</p>
<p><img src="https://i.imgur.com/Ir6N6Pw.png" alt="Day24-2"></p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/XMLHttpRequest/readyState">XMLHttpRequest readyState</a></p>
</blockquote>
<p>當成功請求到資料時，會回傳一個DOMString，可以透過responseText屬性查看回應的內容，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">//還沒發出請求，會是空值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br></pre></td></tr></table></figure>
<p>需要注意的是這邊拿到的會是字串型別的資料，我們還需要透過<strong>JSON.parse()的語法將資料轉成物件</strong>，如此一來才可以使用物件的操作技巧。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line"><span class="comment">//如果有成功拿到資料，經過JSON.parse()轉換後會得到物件型別的資料</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure>
<p>然後除了可以透過XHR物件查看對於伺服器發出的請求狀態之外，我們也可以透過 status屬性查看伺服器如何回應我們這次的請求。</p>
<p>而statusText則是會回傳如&quot;200&quot;、&quot;OK&quot;這類的文字訊息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">//還沒發出請求，會是空值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">status</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">statusText</span>);</span><br></pre></td></tr></table></figure>
<p>大致提完了關於XHR物件的屬性，接下來要講到XHR物件的方法</p>
<p>透過這些方法我們才能成功的向伺服器發出請求</p>
<p>xhr.open()，設定請求</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(method,url,<span class="keyword">async</span>,user,password);</span><br></pre></td></tr></table></figure>
<ul>
<li>method: 可以使用&quot;GET&quot;，“POST”，“PUT”，&quot;DELETE&quot;等方式做出請求</li>
<li>url: 要提出請求的URL</li>
<li>async: 是否執行非同步操作，預設值為true</li>
<li>user: 用於身份驗證的使用者名稱，預設值為null</li>
<li>password: 用於身份驗證的使用者密碼，預設值為null</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/XMLHttpRequest/open">XMLHttpRequest.open()<br>
</a></p>
</blockquote>
<p>初始化請求之後，再來是要發送請求</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(method,url,<span class="keyword">async</span>,user,password);</span><br><span class="line">xhr.<span class="title function_">send</span>(body);</span><br></pre></td></tr></table></figure>
<p>這裡的send()操作會因為GET、POST的使用不同而有所不同。</p>
<p>單純請求資料(GET)，則xhr.send()可以是空值 -&gt; <code>xhr.send(null)</code></p>
<p>若是需要將資料傳遞至伺服器，則還要補充相關訊息</p>
<p>以傳遞純文字資料為例:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">//需要告知要傳遞的資料格式</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;/log.php&quot;</span>);</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;text/plain;charset=UTF-8&quot;</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;1234&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>重點在於 <code>xhr.setRequestHeader(&quot;Content-type&quot;,&quot;text/plain;charset=UTF-8&quot;);</code></p>
<p>上面這行程式碼表明請求主體為純文字，而這就是我們如果需要將資料往伺服器端傳送時需要補充的訊息。</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/XMLHttpRequest/send">XMLHttpRequest.send()<br>
</a></p>
</blockquote>
<p>最後要提到的部分是關於對XHR物件的監聽</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>,getRequest);</span><br><span class="line">request.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, endpoint,<span class="literal">true</span>);</span><br><span class="line">request.<span class="title function_">send</span>(<span class="literal">null</span>); </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRequest</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因為發出請求時不一定可以即時拿到資料，所以必須監聽當請求得到回覆後，才往下執行程式碼</p>
<p>如果沒有這麼做的話會拿到空值。</p>
<p>觸發事件的類型有很多，這邊則使用load事件，<strong>當目標資源加載完之後才觸發事件</strong></p>
<h2 id="實作：透過XHR物件介接高雄市政府資料開放平台的Open-Data"><a class="header-anchor" href="#實作：透過XHR物件介接高雄市政府資料開放平台的Open-Data"></a>實作：透過XHR物件介接高雄市政府資料開放平台的Open Data</h2>
<p>這個例子會透過XHR物件的GET方法取得高雄市政府資料開放平台的Open Data</p>
<p>可以將程式碼貼到自己的編輯器嘗試運作看看</p>
<blockquote>
<p><a href="https://data.kcg.gov.tw/dataset/a98754a3-3446-4c9a-abfc-58dc49f2158c/resource/48d4dfc4-a4b2-44a5-bdec-70f9558cd25d/download/yopendata1070622opendatajson-1070622.json">電動機車充電站名稱及充電站地址</a></p>
</blockquote>
<ol>
<li>撰寫HTML、CSS部分</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- css part --&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    background: #f0d0d0;</span><br><span class="line">  &#125;</span><br><span class="line">  h1 &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    font-size: 48px;</span><br><span class="line">  &#125;</span><br><span class="line">  .charge-list &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    list-style: none;</span><br><span class="line">    flex-wrap: wrap;</span><br><span class="line">  &#125;</span><br><span class="line">  .charge-list li &#123;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    flex: 0 1 24%;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    margin: 0 1% 2% 0;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    transition: all .4s;</span><br><span class="line">  &#125;</span><br><span class="line">  .charge-list li:hover &#123;</span><br><span class="line">    margin-top: -1%;</span><br><span class="line">  &#125;</span><br><span class="line">  .charge-list li:nth-child(n) &#123;</span><br><span class="line">    background: #aaaadd;</span><br><span class="line">  &#125;</span><br><span class="line">  .charge-list li:nth-child(2n) &#123;</span><br><span class="line">    background: #ddddaa;</span><br><span class="line">  &#125;</span><br><span class="line">  .charge-list li:nth-child(3n) &#123;</span><br><span class="line">    background: #dad;</span><br><span class="line">  &#125;</span><br><span class="line">  .charge-list li:nth-child(3n+1) &#123;</span><br><span class="line">    background: #aaf;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- html --&gt;</span><br><span class="line">&lt;ul class=&quot;charge-list&quot;&gt;&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>透過xhr物件向高雄市政府Open Data請求資料</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> endpoint = <span class="string">&#x27;https://data.kcg.gov.tw/dataset/a98754a3-3446-4c9a-abfc-58dc49f2158c/resource/48d4dfc4-a4b2-44a5-bdec-70f9558cd25d/download/yopendata1070622opendatajson-1070622.json&#x27;</span>; </span><br><span class="line"><span class="keyword">const</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">request.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, endpoint,<span class="literal">true</span>);</span><br><span class="line">request.<span class="title function_">send</span>(<span class="literal">null</span>); </span><br><span class="line">request.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, getRequest); </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRequest</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 可以將註解拿掉查看</span></span><br><span class="line">  <span class="comment">//console.log(request);</span></span><br><span class="line">  <span class="keyword">const</span> charge = [];</span><br><span class="line">  charge.<span class="title function_">push</span>(...<span class="title class_">JSON</span>.<span class="title function_">parse</span>(request.<span class="property">responseText</span>));</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">createDomElement</span>(charge);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>將指定的資料內容(位置、地址)渲染到HTML頁面中</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createDomElement</span>(<span class="params">charge</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> domElements = charge.<span class="title function_">map</span>(<span class="function"><span class="params">place</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;li&gt;</span></span><br><span class="line"><span class="string">      &lt;p class=&quot;location&quot;&gt;位置： <span class="subst">$&#123; place.Location &#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p class=&quot;address&quot;&gt;地址：<span class="subst">$&#123; place.Address &#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">  &#125;).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> chargeList = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.charge-list&#x27;</span>);</span><br><span class="line">  chargeList.<span class="property">innerHTML</span> = domElements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript ES6 解構賦值</title>
    <url>/2019/10/13/JavaScript-ES6-%E8%A7%A3%E6%A7%8B%E8%B3%A6%E5%80%BC/</url>
    <content><![CDATA[<h1 id="JavaScript-ES6-解構賦值"><a class="header-anchor" href="#JavaScript-ES6-解構賦值"></a>JavaScript ES6 解構賦值</h1>
<blockquote>
<p>MDN : 可以將陣列或物件中的資料取出成獨立變數。</p>
</blockquote>
<p>解構賦值是ES6的新特性，可以快速的將值從陣列或物件中取出。</p>
<span id="more"></span>
<p>如果能好好熟悉運用的話，不僅快速、更可以提高程式碼的可讀性。</p>
<p>趕緊往下看吧!</p>
<h2 id="陣列解構"><a class="header-anchor" href="#陣列解構"></a>陣列解構</h2>
<p>有一個很重要的觀念需要記住: <mark>等號的左側要用來儲存右側解開後的值</mark></p>
<p>把握住這個觀念，在使用解構賦值的技巧就會容易許多</p>
<p>關於陣列如何解構，讓我們透過底下幾個測試例子來看看吧</p>
<p>一、 基本變數</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;Bill&#x27;</span>,<span class="string">&#x27;Jack&#x27;</span>,<span class="string">&#x27;Alice&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> [nameA,nameB,nameC] = names;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;透過解構獲得nameA的值為: &#x27;</span> + nameA);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;透過解構獲得nameB的值為: &#x27;</span> + nameB);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;透過解構獲得nameC的值為: &#x27;</span> + nameC);</span><br></pre></td></tr></table></figure>
<p>等號的左側是要用來儲存右側解開後的值，從這個觀點延伸可以知道:</p>
<ol>
<li>等號右側的值會依序解開為: <code>Bill</code>、<code>Jack</code>、<code>Alice</code></li>
<li>等號左側的變數 <code>nameA</code>、<code>nameB</code>、<code>nameC</code> 則會依序將<code>Bill</code>、<code>Jack</code>、<code>Alice</code> 的值存入。</li>
</ol>
<p>因此就可以得到圖中的結果:</p>
<p><img src="https://lh3.google.com/u/0/d/1F07HBoDlDsXf5f8TZ2kXNdys17SmOf9k=w1444-h1498-iv1" alt="Day18-1"></p>
<p>除了上方的寫法之外，也可以寫成如下程式碼:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nameA,nameB,nameC;</span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;Bill&#x27;</span>,<span class="string">&#x27;Jack&#x27;</span>,<span class="string">&#x27;Alice&#x27;</span>];</span><br><span class="line"></span><br><span class="line">[nameA,nameB,nameC] = names;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;透過解構獲得nameA的值為: &#x27;</span> + nameA);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;透過解構獲得nameB的值為: &#x27;</span> + nameB);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;透過解構獲得nameC的值為: &#x27;</span> + nameC);</span><br></pre></td></tr></table></figure>
<p>同樣也可以獲得一樣的結果</p>
<h3 id="基本變數-設定預設值"><a class="header-anchor" href="#基本變數-設定預設值"></a>基本變數(設定預設值)</h3>
<p>有時候為了避免沒有輸入值，會事先設定一個預設值來解決。</p>
<p>而解構的技巧同樣也可以運用這個概念。</p>
<p>來看看測試例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nameA,nameB,nameC;</span><br><span class="line"><span class="keyword">var</span> names = [,,<span class="string">&#x27;Alice&#x27;</span>];</span><br><span class="line"></span><br><span class="line">[nameA = <span class="string">&quot;John&quot;</span>,nameB = <span class="string">&quot;Henry&quot;</span>,nameC = <span class="string">&quot;David&quot;</span>] = names;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;透過解構獲得nameA的值為: &#x27;</span> + nameA);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;透過解構獲得nameB的值為: &#x27;</span> + nameB);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;透過解構獲得nameC的值為: &#x27;</span> + nameC);</span><br></pre></td></tr></table></figure>
<p>這裡的程式碼替變數 <code>nameA</code>、<code>nameB</code>、<code>nameC</code> 都設定了預設值，分別為 <code>John</code>、<code>Henry</code>、<code>David</code>，如此一來當如果等號左側要被解開的任一個值為 <code>undefined</code> 時，就會以預設值來取代 <code>undefined</code> 。</p>
<p>所以可以從圖中得到，<code>John</code>、<code>Henry</code>的值取代了 <code>names</code> 陣列中值為<code>undefined</code> 的部分。</p>
<p><img src="https://lh3.google.com/u/0/d/16h7XGuZXY5tuw64QZiwybauktMgz27AV=w1444-h1498-iv1" alt="Day18-2"></p>
<h3 id="變數交換"><a class="header-anchor" href="#變數交換"></a>變數交換</h3>
<p>透過解構技巧，可以輕易的變換變數的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nameA = <span class="string">&quot;Bill&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> nameB = <span class="string">&quot;Jen&quot;</span>;</span><br><span class="line"></span><br><span class="line">[nameB,nameA] = [nameA,nameB];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;nameB的值為: &#x27;</span> + nameB);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;nameA的值為: &#x27;</span> + nameA);</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1qj1scsfcjnxZesIyL6e6v_jpysFOlH2G=w1444-h1498-iv1" alt="Day18-3"></p>
<p>可以發現 <code>nameB</code> 與 <code>nameA</code> 的值已經對調了。</p>
<p>接下來寫一個陣列方法搭配與解構技巧搭配的測試例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numberArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> [number,number2,...numbers] = numberArray.<span class="title function_">map</span>(<span class="function"><span class="params">value</span> =&gt;</span> value * value);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...numbers]);</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1Hmd3mTTBO5Dr-xCpaqod-wRwhnWUXqfN=w1444-h1498-iv1" alt="Day18-4"></p>
<p>上面的程式碼透過 <code>map()</code> 方法取得每一個元素的平方值，而且透過解構賦值的技巧取得 <code>number</code>、<code>number2</code> 的值，而剩餘的元素則透過展開運算符一併取出。</p>
<p>關於陣列解構的部分就先到這裡，接下來往下看看物件解構的部分</p>
<h2 id="物件解構"><a class="header-anchor" href="#物件解構"></a>物件解構</h2>
<p>關於物件解構的技巧，這邊就直接寫些測試例子來看看</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person =&#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;20歲&#x27;</span>,</span><br><span class="line">  <span class="attr">habbit</span>: <span class="string">&#x27;閱讀書籍&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;age,habbit&#125; = person;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這個人的年紀為:&#x27;</span> + age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這個人的興趣是:&#x27;</span> + habbit);</span><br></pre></td></tr></table></figure>
<p>物件解構技巧與陣列解構技巧相似，但是差別在於物件解構是將物件的<mark>特性值取出來</mark>，而陣列解構則是取出陣列元素的值</p>
<p><img src="https://lh3.google.com/u/0/d/1Qzl_zuvbRZENUXOg9J_dp_x9UlFXEWTa=w1444-h1498-iv1" alt="Day18-5"></p>
<p>但是也可以直接將<mark>用來解構物件而設定的物件特性值設定為變數</mark>，然後透過這個變數將值取出</p>
<p>有點饒舌，所以直接來看看測試例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;20歲&#x27;</span>,</span><br><span class="line">  <span class="attr">habbit</span>: <span class="string">&#x27;閱讀書籍&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;age :hisAge,<span class="attr">habbit</span>:hisHabbit&#125; = person;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這個人的年紀為:&#x27;</span> + hisAge);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這個人的興趣是:&#x27;</span> + hisHabbit);</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1rrk_JuMcHbaL67u5ywcdIBZHVg1fz1Bi=w1444-h1498-iv1" alt="Day18-6"></p>
<p>和前一個程式碼的差別在於: 等號左邊用來解構物件的設定中，另外設定了兩個變數，分別為 <code>hisAge</code> 、 <code>hisHabbit</code>，並透過這兩個變數將 <code>person</code> 物件的值取出。</p>
<p>為了避免沒有值的情況，所以在物件解構上也有和陣列解構一樣的技巧:設定預設值。</p>
<p>來看看下列的測試:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;20歲&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;age = <span class="string">&#x27;15歲&#x27;</span>,habbit = <span class="string">&#x27;閱讀書籍&#x27;</span>&#125; = person;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這個人的年紀為:&#x27;</span> + age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這個人的興趣是:&#x27;</span> + habbit);</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1wSf4CYcld1br5oZtEgzVZYuBpeFkCpkL=w1444-h1498-iv1" alt="Day18-7"></p>
<p>將 <code>age</code>、<code>habbit</code> 都設定了預設值，當要被解構的物件中沒有這個特性值，就可以透過預設值去填補。</p>
<p>上述而外對於特性值設定變數與設定預設值的方式還可以搭配運用，如此一來就可以做到當<mark>被解構物件有值時，就透過該變數取出，否則就使用預設值填補</mark>的目的</p>
<p>來看看測試例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;20歲&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;age :hisAge = <span class="string">&#x27;15歲&#x27;</span>,habbit : hisHabbit = <span class="string">&#x27;閱讀書籍&#x27;</span>&#125; = person;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這個人的年紀為:&#x27;</span> + hisAge);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這個人的興趣是:&#x27;</span> + hisHabbit);</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/18oh9Nz4tFTDlAm6_NMkVEq9q9dimImBn=w1444-h1498-iv1" alt="Day18-8"></p>
<h2 id="巢狀物件解構"><a class="header-anchor" href="#巢狀物件解構"></a>巢狀物件解構</h2>
<p>最後要討論的部分是關於當物件有多層結構時，要如何快速解構該物件</p>
<p>直接透過測試例子來看看吧!</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Bill&quot;</span>,</span><br><span class="line">  <span class="attr">details</span>:&#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="string">&#x27;20歲&#x27;</span>,</span><br><span class="line">    <span class="attr">habbit</span>: <span class="string">&#x27;閱讀書籍&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;name,<span class="attr">details</span>:&#123;age,habbit&#125;&#125; = person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這個人的年紀為:&#x27;</span> + age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這個人的興趣是:&#x27;</span> + habbit);</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/10rdxD9V04TiTAR4oSnrN9gtjKTPYvuwM=w1444-h1498-iv1" alt="Day18-9"></p>
<p>其實很簡單，透過對於巢狀結構的物件，可以再設定一層==:{…}==</p>
<p>就可以將巢狀結構中的特性值取出來囉！</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">解構賦值</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Promise-Part1</title>
    <url>/2020/01/18/JavaScript-Promise-Part1/</url>
    <content><![CDATA[<h2 id="什麼是-Promise"><a class="header-anchor" href="#什麼是-Promise"></a>什麼是 <code>Promise</code></h2>
<p>先來看看 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise">MDN</a> 怎麼解釋 Promise 的:</p>
<span id="more"></span>
<blockquote>
<p><code>Promise</code> 物件代表一個即將完成、或失敗的<strong>非同步操作</strong>，以及它所產生的值。</p>
</blockquote>
<h2 id="建立-Promise-物件與簡易操作"><a class="header-anchor" href="#建立-Promise-物件與簡易操作"></a>建立 <code>Promise</code> 物件與簡易操作</h2>
<p>建立一個 <code>Promise</code> 物件的方式很簡單:透過 <code>new</code> 關鍵字即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timeUp = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span><span class="title function_">resolve</span>(<span class="string">&#x27;時間到了!&#x27;</span>),<span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如上面的程式碼，這樣就已經建立一個 <code>Promise</code> 物件。</p>
<p>再來，要怎麼拿到 <code>時間到了!</code> 這個值呢?</p>
<p><mark>如果要拿到<code>resolve()</code>中的 <code>時間到了!</code>這個值，必須要透過 <code>then(...)</code>的方式取出。</mark></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timeUp = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;時間到了!&#x27;</span>), <span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">timeUp.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br></pre></td></tr></table></figure>
<p>可以預期到的結果是: <mark>當時間過了一秒之後，會顯示 <code>時間到了!</code></mark></p>
<p>在 <code>Promise</code> 物件中會有兩個參數， <code>resolve</code> 及 <code>reject</code> 。 這兩個參數處理著不一樣的事情。</p>
<p>來看看 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise#%E8%AA%9E%E6%B3%95">MDN</a> 的語法:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>( <span class="comment">/* executor */</span> <span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123; ... &#125; );</span><br></pre></td></tr></table></figure>
<ul>
<li><mark><code>resolve</code> 是當執行非同步操作時，若成功完成時使用。</mark></li>
<li><mark><code>reject</code> 則是當執行非同步操作時，有錯誤時使用。</mark></li>
</ul>
<p>所以上面的例子可以知道， <code>setTimeout()</code> 的執行為非同步操作，且當經過1秒後，會執行裡面的程式碼 <code>resolve(時間到了!)</code>，接著再透過<code>then()</code> 取得成功完成後 <code>resolve</code> 的值 <code>時間到了!</code>。</p>
<p>接下來來看看當非同步的操作有錯誤時， <code> reject()</code> 的使用。</p>
<p><mark>如果要拿到 <code>reject</code> 的值，可以使用 <code>catch()</code> 的語法取得</mark></p>
<p>讓我們改寫一下上面的例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">timeUp</span> = time =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (time &gt; <span class="number">1</span>)</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">`輸入的秒數為: <span class="subst">$&#123;time / <span class="number">1000</span>&#125;</span> 秒，大於1秒`</span>), time);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&#x27;輸入的時間小於1秒&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">timeUp</span>(<span class="number">0</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br><span class="line"></span><br><span class="line"><span class="title function_">timeUp</span>(<span class="number">2000</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>當輸入的值小於1時，因為設定了條件判斷，所以會執行 <code>reject()</code>，然後透過 <code>catch()</code> 取得值 <code>輸入的時間小於1秒</code>。</p>
<h2 id="Promise-物件的狀態"><a class="header-anchor" href="#Promise-物件的狀態"></a><code>Promise</code> 物件的狀態</h2>
<p><code>Promise</code> 物件的狀態會處於以下幾種狀態:</p>
<ul>
<li>等待(pending): 初始狀態，代表正在等待中</li>
<li>實現(fulfilled):表示非同步操作成功且完成</li>
<li>拒絕(rejected):表示非同步操作失敗了</li>
</ul>
<p>來看看 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise#%E6%8F%8F%E8%BF%B0">MDN</a> 關於 <code>Promise</code> 物件的狀態圖</p>
<p><img src="https://i.imgur.com/EReOUrV.png" alt="Day26-1"></p>
<p>從這張圖可以獲得一些訊息:</p>
<ol>
<li>一個處於等待(pending)狀態的 <code>Promise</code> 物件會有兩種狀態的轉換，那就是實現(fulfilled)或拒絕(rejected)</li>
<li>如果是實現(fulfilled)，代表非同步操作完成且成功;但如果拒絕(rejected)則代表非同步操作失敗。</li>
</ol>
<p>讓我們再多用幾個例子來更加了解 <code>Promise</code> 物件吧!</p>
<ul>
<li>測試例子一:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;B&quot;</span>));</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">resolve</span>(p3));</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;A&quot;</span>));</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v));</span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v));</span><br></pre></td></tr></table></figure>
<p><code>p2</code> 可以直接取得 <code>A</code> 的值，但是對於 <code>p1</code> 卻需要先解析 <code>p3</code> 後才能得到值 <code>B</code></p>
<p><img src="https://i.imgur.com/NY93Ksi.png" alt="Day26-2"></p>
<ul>
<li>測試例子二:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">42</span>);</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">resolve</span>(v * <span class="number">2</span>));</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v));</span><br></pre></td></tr></table></figure>
<p>所以執行流程如下:</p>
<ol>
<li><code>p.then(...)</code> 取得 <code>v</code> 的值 <code>42</code>，並回傳一個另一個 <code>Promise</code> 物件</li>
<li>此時的 <code>then(...)</code> 會取得的是 <code>resolve(v * 2)</code> 的值，所以為 <code>84</code></li>
</ol>
<p><img src="https://i.imgur.com/z8Bxh5I.png" alt="Day26-3"></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Promise-Part2</title>
    <url>/2020/01/19/JavaScript-Promise-Part2/</url>
    <content><![CDATA[<h2 id="Promise-resolve"><a class="header-anchor" href="#Promise-resolve"></a><code>Promise.resolve()</code></h2>
<p>先來看看一段 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve">MDN</a>的解釋:</p>
<span id="more"></span>
<blockquote>
<p>Promise.resolve(value) 方法回傳一個以 value 判定結果的 Promise 物件。若 value 是個 thenable (例如，具有 &quot;then&quot;方法)，則回傳的 promise 將依其結果採取其最終狀態；若 value 是 promise，則作為呼叫 Promise.resolve 之結果；其他情形都將回傳以 value 實現的 promise。</p>
</blockquote>
<p>有點繞舌，不過大致重點如下:</p>
<ol>
<li><code>Promise.resolve()</code> 接受三種形式的值: <code>value</code>、<code>promise</code>、<code>thenable</code>。</li>
<li>如果是 <code>Promise.resolve(value)</code>，會得到一個以 <code>value</code> 做為判定成功(resolve)或失敗(reject)的一個 <code>Promise</code> 物件。</li>
<li>如果是 <code>Promise.resolve(promise)</code>，則會呼叫該 <code>promise</code> 成功執行且完成的結果</li>
<li>如果是 <code>Promise.resolve(thenable)</code>，則會以 <code>thenable</code> 的最終狀態作為結果。</li>
</ol>
<p>接下來，來針對第2、3、4點來做些測試的例子吧！</p>
<ul>
<li>測試例子一: <code>Promise.resolve(value)</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Success&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value));</span><br></pre></td></tr></table></figure>
<p>當 <code>Promise.resolve(value)</code> 的 <code>value</code> 是一個值時，透過 <code>then()</code> 取得的就是那個 <code>value</code> 的值 <code>Success</code></p>
<p><img src="https://i.imgur.com/7RBzwIS.png" alt="Day27-1"></p>
<ul>
<li>測試例子二: <code>Promise.resolve(promise)</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">runTime</span> = times =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> <span class="title function_">resolve</span>(times))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">runTime</span>(<span class="number">5</span>)).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value));</span><br></pre></td></tr></table></figure>
<p>當 <code>Promise.resolve(promise)</code> 執行的是另一個 <code>Promise</code> 物件時，會先呼叫該<code>Promise</code> 物件後，再透過 <code>then()</code> 取得該<code>Promise</code> 物件成功且完成的值 <code>5</code></p>
<p><img src="https://i.imgur.com/5vOxC0L.png" alt="Day27-2"></p>
<ul>
<li>測試例子三: <code>Promise.resolve(thenable)</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> thenable = &#123;</span><br><span class="line">  <span class="attr">then</span>: <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Throwing Error&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;Resolving&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(thenable);</span><br><span class="line">promise2</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br></pre></td></tr></table></figure>
<p>當 <code>Promise.resolve(thenable)</code> 執行的是一個 <code>thenable</code> 時，會依照該 <code>thenable</code> 的最終狀態決定最後的結果，所以透過 <code>then()</code> 會取得值 <code>Throwing Error</code>。</p>
<p><img src="https://i.imgur.com/uj70gch.png" alt="Day27-3"></p>
<p>再看看另一個 <code>thenable</code> 的測試:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> thenable = &#123;</span><br><span class="line">  <span class="attr">then</span>: <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;Success&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(thenable);</span><br><span class="line">promise2</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br></pre></td></tr></table></figure>
<p>當 <code>Promise.resolve(thenable)</code> 執行的是一個 <code>thenable</code> 時，會依照該 <code>thenable</code> 的最終狀態決定最後的結果，所以透過 <code>then()</code> 會取得值 <code>Success</code>。</p>
<p>![<a href="https://i.imgur.com/rs9gsHL.png">Day27-4</a></p>
<h2 id="Promise-reject"><a class="header-anchor" href="#Promise-reject"></a><code>Promise.reject()</code></h2>
<blockquote>
<p>MDN : 靜態函式 Promise.reject 回傳一個被拒絕的 Promise。由於除錯目的及選擇性錯誤捕捉（selective error catching），使用一個 instanceof Error 作為 reason 是很有幫助的。</p>
</blockquote>
<p>直接來看個測試例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;fail&#x27;</span>))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br></pre></td></tr></table></figure>
<p><code>Promise.reject()</code> 會回傳操作後失敗的結果，這裡透過 <code>catch</code> 接住 <code>reject</code> 的值 <code>fail</code> 。</p>
<p><img src="https://i.imgur.com/uG1YcSP.png" alt="Day27-5"></p>
<h2 id="Promise-race"><a class="header-anchor" href="#Promise-race"></a><code>Promise.race()</code></h2>
<blockquote>
<p>MDN: Promise.race(iterable) 方法回傳一個 promise 物件，此 promise 物件會於 iterable 引數中任一個 promise 轉為 resolve 或 rejected 時立即轉變成 resolve 或 rejected，並且接收其成功值或失敗訊息。</p>
</blockquote>
<p>意思是在使用這個語法時，只要其中有一個 <code>Promise</code> 物件 執行了 <code>resolve</code> 或者 <code>reject</code> ，就馬上轉為那個 <code>Promise</code> 物件的狀態(<code>resolve</code> 或者 <code>reject</code>)，並取得它的成功或者失敗的值。</p>
<p>這裡透過 <code>setTimeout</code> 來看看 <code>promise.race()</code> 的用途:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">doneWork</span> = (<span class="params">person,times</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">`<span class="subst">$&#123; person &#125;</span> 先完成了工作!`</span>);</span><br><span class="line">    &#125;,times);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([<span class="title function_">doneWork</span>(<span class="string">&#x27;Bill&#x27;</span>,<span class="number">2000</span>),<span class="title function_">doneWork</span>(<span class="string">&#x27;Jack&#x27;</span>,<span class="number">3000</span>)])</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br></pre></td></tr></table></figure>
<p>這裡要做的事情是，得到第一個成功抵達的人的訊息，之後的都不需要獲得。</p>
<p>而 <code>promise.race()</code> 用於將第一個 <code>resolve</code> 或者 <code>reject</code> 的 <code>Promise</code> 物件的成功或者失敗的值接收，所以可以得到值為 <code>Bill 先完成了工作!</code> (因為Bill的秒數比較快)。</p>
<p><img src="https://i.imgur.com/fwsJxFc.png" alt="Day27-6"></p>
<h2 id="Promise-all"><a class="header-anchor" href="#Promise-all"></a><code>Promise.all()</code></h2>
<blockquote>
<p>Promise.all() 方法回傳一個 Promise 物件，當引數 iterable 中所有的 promises 都被實現（resolved），或引數 iterable 不含任何 promise 時，被實現。或以第一個被拒絕的 promise 的原因被拒絕。</p>
</blockquote>
<p>意思是要所有的 <code>Promise</code> 物件都 <code>resolve</code> 才會回傳，但如果有任一個 <code>Promise</code> 物件 <code>reject</code> 則就回傳第一個 <code>reject</code> 的失敗訊息。</p>
<p>此外會以陣列的方式儲存每一個 <code>Promise</code> 物件的值。</p>
<p>這裡透過 <code>setTimeout</code> 來看看 <code>promise.all()</code> 的用途</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">doneWork</span> = (<span class="params">person,times</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">`<span class="subst">$&#123; person &#125;</span> 完成了工作!`</span>);</span><br><span class="line">    &#125;,times);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">doneWork</span>(<span class="string">&#x27;Bill&#x27;</span>,<span class="number">3000</span>),<span class="title function_">doneWork</span>(<span class="string">&#x27;Jack&#x27;</span>,<span class="number">2000</span>)])</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/KIxSK0e.png" alt="Day27-7"></p>
<h2 id="Promise-chain"><a class="header-anchor" href="#Promise-chain"></a><code>Promise </code> chain</h2>
<p>如果我們有需要<mark>一個緊接著一個地</mark>執行非同步函式，這個時候就會建立所謂的 <code>Promise</code> 鏈。</p>
<p>直接來看看測試的例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">doneWork</span> = (<span class="params">person,times</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">`<span class="subst">$&#123; person &#125;</span> 完成了工作!`</span>);</span><br><span class="line">    &#125;,times);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">doneWork</span>(<span class="string">&#x27;Bill&#x27;</span>,<span class="number">4000</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doneWork</span>(<span class="string">&#x27;Jack&#x27;</span>,<span class="number">3000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>第一個被執行的非同步函式是 <code>doneWork('Bill',4000)</code>，且在取得值 <code>Bill 完成了工作!</code> 之後回傳另一個非同步函式 <code>doneWork('Jack',3000)</code> 並取得值 <code>Jack 完成了工作!</code>。</p>
<p><img src="https://i.imgur.com/5PFtve7.png" alt="Day27-8"></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript class 類別</title>
    <url>/2019/10/11/JavaScript-class-%E9%A1%9E%E5%88%A5/</url>
    <content><![CDATA[<h1 id="JavaScript-class-類別"><a class="header-anchor" href="#JavaScript-class-類別"></a>JavaScript class 類別</h1>
<p>今天要學習的部分是 <code>class</code> 類別。</p>
<span id="more"></span>
<p><code>class</code> 類別是 ES6 新引進的語法，但總是被戲稱為「語法糖」，至於原因讓我們來看看 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Classes">MDN</a> 怎麼描述這個語法:</p>
<blockquote>
<p>ECMAScript 6 中引入了類別 (<code>class</code>) 作為 JavaScript 現有原型程式(prototype-based)繼承的語法糖。 類別語法並不是要引入新的物件導向繼承模型到 JavaScript 中，而是提供一個更簡潔的語法來建立物件和處理繼承。</p>
</blockquote>
<p>也因此在 JavaScript 的 <code>class</code> 其實與多數語言的對於 <code>class</code> 定義是不太一樣的。</p>
<p>接下來，讓我們看看如何透過這個語法改寫傳統函式建立物件與處理繼承的部分吧。</p>
<h2 id="ES6-class-類別比較與使用"><a class="header-anchor" href="#ES6-class-類別比較與使用"></a>ES6 <code>class</code> 類別比較與使用</h2>
<p>首先，我們先透過傳統寫法來建立物件的原型。</p>
<p>先來看看這個測試的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age,habbit</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">habbit</span> = habbit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Bill</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Bill&#x27;</span>,<span class="number">22</span>,<span class="string">&#x27;Read books&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Bill</span>);</span><br><span class="line"><span class="title class_">Bill</span>.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure>
<p>在 ES6 之前，我們都是透過這樣的方式設定原型物件並透過繼承這個原型來建立物件。</p>
<p><img src="https://lh3.google.com/u/0/d/1KP3uwH8_M-8_yZsC2cSt7fn_PhbYX9Uy=w1318-h1530-iv1" alt="Day16-1"></p>
<p>接下來讓我們看看如何使用 ES6 <code>class</code> 達到同樣的目的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name,age,habbit</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">habbit</span> = habbit;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Bill</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Bill&#x27;</span>,<span class="number">22</span>,<span class="string">&#x27;Read books&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Bill</span>);</span><br><span class="line"><span class="title class_">Bill</span>.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1HQJNBLxJRRtnpb6NVznChbdaItiwu4Z3=w1318-h1530-iv1" alt="Day16-2"></p>
<p>來逐一的比較兩者的差別吧！</p>
<p>首先是:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此區塊僅用於比較差異，無法正常運作</span></span><br><span class="line"><span class="comment">// 傳統透過 function 建立原型物件的寫法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age,habbit</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">habbit</span> = habbit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class 類別建立原型物件的寫法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name,age,habbit</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">habbit</span> = habbit;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不難看出其實 <mark><code>constructor()&#123;...&#125;</code> 與 <code>function Person()&#123;...&#125;</code>都是用於新增原型的特性</mark>。</p>
<p><code>constructor()</code> 用來建立和初始化類別的物件，且一個類別只能有一個 <code>constructor()</code>，否則就會報錯。</p>
<p>再來是:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此區塊僅用於比較差異，無法正常運作</span></span><br><span class="line"><span class="comment">// 傳統透過 `prototype` 新增原型方法的方式</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class 類別新增原型方法的方式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以發現 class 的語法將 <code>sayHi</code> 方法包於自己的區塊中。</p>
<p>另外還有一個必須要提醒的部分是: <mark>一定要先宣告 <code>class</code>才可以使用，否則就會報錯。</mark></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Bill</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Bill&#x27;</span>,<span class="number">22</span>,<span class="string">&#x27;Read books&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Bill</span>);</span><br><span class="line"><span class="title class_">Bill</span>.<span class="title function_">sayHi</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name,age,habbit</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">habbit</span> = habbit;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1hzREit1BnylLDoZojuoTMPk3jYr8BXXE=w1318-h1530-iv1" alt="Day16-3"></p>
<h2 id="靜態方法-static-method"><a class="header-anchor" href="#靜態方法-static-method"></a>靜態方法 (static method)</h2>
<p>如果將 <code>class</code> 類別中的方法設定為 <code>static</code> 的話，這個方法可以<mark>直接透過這個類別呼叫，但是不能透過被建立的物件實體呼叫</mark></p>
<p>來改寫一下上面的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name,age,habbit</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">habbit</span> = habbit;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">static</span> <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Bill</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Bill&#x27;</span>,<span class="number">22</span>,<span class="string">&#x27;Read books&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Bill</span>);</span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">sayHi</span>();</span><br><span class="line"><span class="title class_">Bill</span>.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure>
<p>從結果可以看到設定為 <code>static</code> 的方法不能讓被建立的物件使用，但卻可以給 <code>Person</code> 類別做使用。</p>
<p><img src="https://lh3.google.com/u/0/d/1mho8mk8ng_TBgHl9TEt28eZw0SNhQuHm=w1318-h1530-iv1" alt="Day16-4"></p>
<h2 id="extends-建立子類別-與-透過-super-使用主類別的特性"><a class="header-anchor" href="#extends-建立子類別-與-透過-super-使用主類別的特性"></a><code>extends</code> 建立子類別 與 透過 <code>super</code> 使用主類別的特性</h2>
<p>如果除了<mark>主類別的設定滿足不了當前建立物件的需求</mark>，這時候就可以使用 <code>extends</code> 。</p>
<p>透過 <code>extends</code> 可以建立自己額外擴充需求的子類別。</p>
<p>而透過 <code>super</code> 則可以使用主類別定義好的的特性與方法。</p>
<p>來看看這個測試例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name,age,habbit</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">habbit</span> = habbit;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Assets</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name,age,habbit,house</span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>(name,age,habbit);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">house</span> = house;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">sayHi</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello everyone&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Bill</span> = <span class="keyword">new</span> <span class="title class_">Assets</span>(<span class="string">&#x27;Bill&#x27;</span>,<span class="number">22</span>,<span class="string">&#x27;Read books&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Bill</span>);</span><br><span class="line"><span class="title class_">Bill</span>.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure>
<p>從結果可以得到幾個結論:</p>
<ol>
<li>透過 <code>extends</code> 擴充了 <code>Assets</code> 子類別，並新增 <code>house</code> 特性到這個子類別中。</li>
<li>因為使用 <code>super</code> 語法，所以可以使用主類別 <code>Person</code> 的特性(<code>name</code>、<code>age</code>、<code>habbit</code>、<code>habbit</code>)以及 <code>sayHi</code> 這個方法。</li>
<li>當 <code>Assets</code> 子類別有自己的 <code>sayHi</code> 方法時，如果也需要使用 <code>Person</code> 主類別的方法，則必須透過 <code>super</code> 語法，才可以得到兩個值分別為 <code>Hello</code> 、 <code>Hello everyone</code> 。</li>
</ol>
<p><img src="https://lh3.google.com/u/0/d/1bO7PEhX-jsPh6QwXEukil7Kilb8dfp6i=w1318-h1530-iv1" alt="Day16-5"></p>
<h2 id="instanceof"><a class="header-anchor" href="#instanceof"></a><code>instanceof</code></h2>
<p>如果要判斷某個實體是否透過某個類別建立而成，就需要用 <code>instanceof</code>。</p>
<p>來看看測試例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FormatError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>(msg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> err = <span class="keyword">new</span> <span class="title class_">FormatError</span>(<span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`err 實體是否是透過 FormatError 類別建立: <span class="subst">$&#123;err <span class="keyword">instanceof</span> FormatError&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
<p><code>err instanceof FormatError</code> 表示<mark>檢驗 <code>err</code> 是否是透過 <code>FormatError</code> 類別建立而成</mark>。</p>
<p>這邊回傳 <code>true</code> ，所以代表 <code>err</code> 是透過 <code>FormatError</code> 類別建立而成。</p>
<p><img src="https://lh3.google.com/u/0/d/14Z2nqH1qz4rMHtQVZ8csTYABZtl0fLC2=w1318-h1530-iv1" alt="Day16-６"></p>
<p>關於 class 類別的學習就到這裡囉</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 嚴格模式(Strict mode)</title>
    <url>/2019/10/12/JavaScript-%E5%9A%B4%E6%A0%BC%E6%A8%A1%E5%BC%8F-Strict-mode/</url>
    <content><![CDATA[<h1 id="JavaScript-嚴格模式-Strict-mode"><a class="header-anchor" href="#JavaScript-嚴格模式-Strict-mode"></a>JavaScript 嚴格模式(Strict mode)</h1>
<h2 id="簡單介紹"><a class="header-anchor" href="#簡單介紹"></a>簡單介紹</h2>
<p>嚴格模式(strict mode) 在ES5被引進，提供開發者能夠在語法更為嚴謹、受限的模式下進行開發，彌補了 JavaScript 的一些重要缺陷。</p>
<p>也提供了更強大的檢查與更高的安全性。</p>
<span id="more"></span>
<h2 id="怎麼使用嚴格模式-strict-mode"><a class="header-anchor" href="#怎麼使用嚴格模式-strict-mode"></a>怎麼使用嚴格模式(strict mode)</h2>
<p>當設定 <code>'use strict'</code> 或者 <code>&quot;use strict&quot;</code>，就代表後續的程式碼處於嚴格模式下，但依據設定的位置不同，則嚴格模式的有效範圍也不同:</p>
<ol>
<li><strong>在全域設定的話，代表全部的程式碼都會處於嚴格模式(strict mode)</strong>;</li>
<li><strong>在函式中設定，則嚴格模式(strict mode)的有效範圍則侷限在該函式底下的所有程式碼。</strong></li>
</ol>
<p>來看看測試例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">3</span> ;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  b = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1zAcwGbgwK0z1c7v5LfczTTIh8JeNsUkJ=w1318-h1530-iv1" alt="Day17-1"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  b = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1F0ZNp5G7x074b7VvpeZEO4e6eqknIU4y=w1318-h1530-iv1" alt="Day17-2"></p>
<p>從上面兩個結果可以得到，<mark>在全域設定嚴格模式(strict mode)</mark>，則所有的程式碼都會在嚴格模式的有效範圍內。</p>
<p>接下再來看看另外一個例子:把 <code>'use strict'</code> 寫在函式內</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line">  b = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1_kinMnwLL7ZOgXk_8zANZFERPHGUvVYe=w1318-h1530-iv1" alt="Day17-3"></p>
<p>從結果可以得知: <mark>嚴格模式(strict mode)設定在函式內時，則影響的範圍就只有函式內而已</mark>，而全域變數 <code>a</code>因為不在嚴格模式(strict mode)的有效範圍內，所以會依照原本的方式，被隱性的宣告成全域變數(不會報錯)。</p>
<h2 id="細談嚴格模式-strict-mode"><a class="header-anchor" href="#細談嚴格模式-strict-mode"></a>細談嚴格模式(strict mode)</h2>
<p>再來要來提提在於嚴格模式(strict mode)下，是什麼做了調整，調整了什麼</p>
<ol>
<li>嚴格模式(strict mode)中，<mark>不允許使用 <code>with</code> 述句</mark></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a, x, y;</span><br><span class="line"><span class="keyword">var</span> r = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (<span class="title class_">Math</span>) &#123;</span><br><span class="line">  a = <span class="variable constant_">PI</span> * r * r;</span><br><span class="line">  x = r * <span class="title function_">cos</span>(<span class="variable constant_">PI</span>);</span><br><span class="line">  y = r * <span class="title function_">sin</span>(<span class="variable constant_">PI</span> / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1449bRfcUASFY4l-R2515c4LX6DePVwki=w1318-h1530-iv1" alt="Day17-4"></p>
<p><code>with()</code> 述句會增加程式碼閱讀的困難度，以及變數的查詢，所以在嚴格模式(strict mode)被撇除。</p>
<ol start="2">
<li>嚴格模式(strict mode)中，<mark>所有變數都必須被宣告</mark>，否則會報錯(ReferenceError)。 但在非嚴格模式則視為隱性的宣告全域變數。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line">  b = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1_kinMnwLL7ZOgXk_8zANZFERPHGUvVYe=w1318-h1530-iv1" alt="Day17-3"></p>
<p>如同前面所提，所有的變數都必須被宣告才可以。</p>
<ol start="3">
<li>嚴格模式(strict mode)中，<mark>不是當作方法的函式</mark>:
<ul>
<li><code>this</code> 值為 <code>undefined</code></li>
<li>若是使用 <code>call()</code>,<code>apply()</code>,<code>bind()</code>等方法指定<code>this</code>那麼 <code>this</code> 的值就依照其語法設定而決定。</li>
<li>但若是使用 <code>call()</code>,<code>apply()</code>,<code>bind()</code>等方法指定<code>this</code>，但參數為<code>null</code>、<code>undefined</code>，則 <code>this</code> 為 <code>null</code>、<code>undefined</code>。不會像非嚴格模式下會自動轉成全域物件。</li>
</ul>
</li>
</ol>
<p>在非嚴格模式下， <code>this</code> 會指向全域物件，所以可以取得全域變數 <code>age</code> 的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getAge</span>();</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1p0OWjsc8Q17tCupphpdddfqWYFHhBS_9=w1318-h1530-iv1" alt="Day17-5"></p>
<p>透過如 <code>call()</code> 設定 <code>this</code> 的值，當值為 <code>null</code> 時，則指向全域物件，所以可以獲得和前一個一樣的結果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line">getAge.<span class="title function_">call</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1p0OWjsc8Q17tCupphpdddfqWYFHhBS_9=w1318-h1530-iv1" alt="Day17-5"></p>
<p>但在嚴格模式下， <code>this</code> 會是 <code>undefined</code> ，所以想取得全域變數 <code>age</code> 的值就會報錯。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getAge</span>();</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1KzyZ5Xj6Y7vmBkPAMNvnhN7QDmcWJBQB=w1318-h1530-iv1" alt="Day17-6"></p>
<p>如果透過 <code>call()</code> 設定 <code>this</code> 的值，當值為 <code>null</code> 時 <code>this</code> 值就為 <code>null</code> ，不會指向全域物件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">getAge.<span class="title function_">call</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1im7leUYSYwC4I9A8CxYogllAdrJ5cbQi=w1318-h1530-iv1" alt="Day17-7"></p>
<ol start="4">
<li>嚴格模式(strict mode)中，<mark>對於不可寫入(nonwritable)的物件或不可擴充(nonextensible)的物件嘗試建立新特性會報錯。</mark>  但在非嚴格模式下雖然會失敗，但不會有錯誤訊息。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&quot;age&quot;</span>,&#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">25</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1XSXaX1AeVCn34z46UDSzXzTkdSarStqO=w1318-h1530-iv1" alt="Day17-8"></p>
<p>但在嚴格模式下，就會提供相關的錯誤訊息了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&quot;age&quot;</span>,&#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">25</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>
<ul>
<li>物件為唯讀(read only)時，提供相關的錯誤訊息。</li>
</ul>
<p><img src="https://lh3.google.com/u/0/d/17mSmQexVVwJ7tHOY7tR8qmbleH2KO9Wm=w1318-h1530-iv1" alt="Day17-9"></p>
<ul>
<li>物件為非擴充性，提供相關的錯誤訊息。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&quot;age&quot;</span>,&#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">seal</span>(obj);</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;Bill&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1mpdZPMScqf7NACZvCUrouLoxVAnw4Esp=w1318-h1530-iv1" alt="Day17-10"></p>
<ol start="5">
<li>嚴格模式(strict mode)中，<mark>在 <code>eval()</code> 不能宣告變數或者定義函式。</mark> 但在非嚴格模式下可以。</li>
</ol>
<p>在非嚴格模式下，在 <code>eval()</code> 中宣告變數是被允許的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;var age = 22&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1mpdZPMScqf7NACZvCUrouLoxVAnw4Esp=w1318-h1530-iv1" alt="Day17-11"></p>
<p>但在嚴格模式，直接在 <code>eval()</code> 中宣告變數則會報錯。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;var age = 22&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1Kf3OhUWYA1Wjvcdj4KriJuGmAm5X_B0a=w1318-h1530-iv1" alt="Day17-12"></p>
<ol start="6">
<li>嚴格模式(strict mode)中的 <code>arguments</code> 物件:
<ul>
<li>是唯讀的</li>
<li>對於<code>arguments.callee</code> 、 <code>arguments.caller</code> 存取會報錯</li>
</ul>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1SiAioSAJZplGBmB0Ajr6kkpvys8KeG2S=w1318-h1530-iv1" alt="Day17-13"></p>
<ol start="7">
<li><mark>在ES6之前</mark> ，嚴格模式(strict mode)中<mark>對於物件特性重複宣告會報錯</mark>，但非嚴格模式中不會發生錯誤。 但<mark>ES6之後並不會有任何錯誤訊息提示</mark>。</li>
</ol>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Strict_mode#Converting_mistakes_into_errors">MDN: strict mode</a></p>
</blockquote>
<p><img src="https://lh3.google.com/u/0/d/14PH2cLdZjGjgqwcY1WTtq7B0Hsge40TZ=w1318-h1530-iv1" alt="Day17-14"></p>
<ol start="8">
<li>嚴格模式(strict mode)中， <mark><code>delete</code> 如果不是用於刪除物件特性，就會報錯。</mark> 但在非嚴格模式下則是不會有錯誤訊息，但會回傳 <code>false</code></li>
</ol>
<p>非嚴格模式下，使用 <code>delete</code> 用於刪除非物件的特性，只會回傳<code>false</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">delete</span> age;</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1EGEEZEzrB7FzQtnZPfzSRfy2o-jPLgAv=w1318-h1530-iv1" alt="Day17-15"></p>
<p>但嚴格模式下就會報錯。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">delete</span> age;</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1LLTkoNbpjlVoVRwswQD6c5MDjdOXCjC0=w1318-h1530-iv1" alt="Day17-16"></p>
<ol start="9">
<li>嚴格模式(strict mode)中， <mark>函式的參數若是重複命名會報錯。</mark> 但在非嚴格模式下則不會。</li>
</ol>
<p>非嚴格模式下，下列的程式碼並不會報錯。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a,a</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>但嚴格模式下，參數重複命名就會提示相關錯誤訊息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a,a</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1woKbq0D_cgRBT76yjFigjm-XJaBK3GFa=w1052-h1530-iv1" alt="Day17-17"></p>
<ol start="10">
<li>嚴格模式(strict mode)中，八進位整數字面值(以0開頭，後面不接x)是不被允許的。但在非嚴格模式下有些實作會允許。</li>
</ol>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 捕捉(capturing)與氣泡(bubbling)</title>
    <url>/2019/11/30/JavaScript-%E6%8D%95%E6%8D%89-capturing-%E8%88%87%E6%B0%A3%E6%B3%A1-bubbling/</url>
    <content><![CDATA[<p>今天要學習的部分是關於 DOM 的傳遞機制:捕捉與氣泡</p>
<p>在切入今日的主題之前，先快速了解一下 <code>addEventListener</code> 的語法。</p>
<span id="more"></span>
<h2 id="addEventListener"><a class="header-anchor" href="#addEventListener"></a><code>addEventListener</code></h2>
<p>透過這個語法，我們可以將事件綁定在某個 HTML 元素上，並透過觸發的條件(如滑鼠點擊、按下鍵盤某一個按鍵等)進而得到需求的資訊並執行我們設定的行為。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">target.<span class="title function_">addEventListener</span>(type, listener[, options]);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>type</code> : 表示要觸發的方式，例如 <code>click</code>、 <code>keydown</code> 等。</li>
<li><code>listener</code>: 會是一個函式，用於當條件觸發時需要做的任務</li>
<li><code>options</code>: 條件觸發時決定是在捕捉或氣泡階段執行。預設為 <code>false</code> ，此時表示於氣泡階段執行; <code>true</code> 則為捕捉階段。</li>
</ul>
<p>來看看 <code>addEventListener</code> 的測試例子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">  width:100px;</span><br><span class="line">  height:100px;</span><br><span class="line">  background:#ccc;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,test,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述就是一個透過 <code>addEventListener</code> 語法而設計的監聽事件，被監聽的對象是 <code>&lt;div&gt;</code> 元素，觸發條件為 <code>click</code> (滑鼠點擊時才觸發)，而作為監聽事件的 <code>test</code> 函式，會傳入一個 <code>e</code> 的參數，這個參數用於接收當事件被觸發時，可以獲得的對應訊息。</p>
<h2 id="捕捉與氣泡"><a class="header-anchor" href="#捕捉與氣泡"></a>捕捉與氣泡</h2>
<p>接下來要進入主題，關於捕捉與氣泡的規範可以到 <a href="https://www.w3.org/TR/DOM-Level-3-Events/#event-flow">w3c event-flow</a> 詳讀，有著更詳細的圖例。</p>
<p>而這裡為了搭配測試例子，所以簡化了 DOM 的結構。</p>
<p>先直接來看圖，並透過圖貫穿後續的篇幅:</p>
<p><img src="https://i.imgur.com/GJskxuv.png" alt="Day22-1"></p>
<p>上圖為接下來程式碼的 DOM 結構，並標示出了捕捉與氣泡階段的位置，再來來看看測試例子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .container &#123;</span><br><span class="line">    width: 500px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: #aaaadd;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .text &#123;</span><br><span class="line">    background: #cccccc;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  container area</span><br><span class="line">  &lt;p class=&quot;text&quot;&gt;Lorem ipsum dolor sit amet.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.text&#x27;</span>);</span><br><span class="line"></span><br><span class="line">container.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, test, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;點擊到的元素為: container&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">text.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, test2, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;點擊到的元素為: text&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>HTML 畫面如下：</p>
<p><img src="https://i.imgur.com/bFRdwAF.png" alt="Day22-2"></p>
<ol>
<li>
<p><strong><code>container</code> 與 <code>text</code> 皆設定參數為<code>false</code></strong>，當點擊 <code>text</code> 時:<br>
搭配剛剛的 DOM 結構圖驗證，表示兩者皆於氣泡階段執行，在氣泡階段的執行順序為先 <code>text</code> 在 <code>container</code>，所以會得到如圖的結果。<br>
<img src="https://i.imgur.com/Uw4DWwQ.png" alt="Day22-3"></p>
</li>
<li>
<p><strong><code>container</code> 與 <code>text</code> 皆設定參數為<code>true</code></strong>，當點擊 <code>text</code> 時:<br>
表示兩者皆於捕捉階段執行，在捕捉階段的執行順序為先 <code>container</code> 在 <code>text</code>，所以會得到如圖的結果。<br>
<img src="https://i.imgur.com/UC99eGw.png" alt="Day22-4"></p>
</li>
<li>
<p><strong><code>container</code> 參數為<code>true</code> 而 <code>text</code> 參數為<code>false</code></strong>，當點擊 <code>text</code> 時:<br>
表示<code>container</code> 在捕捉階段執行而 <code>text</code> 在氣泡階段執行。所以執行順序為先 <code>container</code> 在 <code>text</code>，所以會得到如圖的結果。<br>
<img src="https://i.imgur.com/UC99eGw.png" alt="Day22-4"></p>
</li>
<li>
<p><strong><code>container</code> 參數為<code>false</code> 而 <code>text</code> 參數為<code>true</code></strong> ，當點擊 <code>text</code> 時:<br>
表示<code>container</code> 在氣泡階段執行而 <code>text</code> 在捕捉階段執行。所以執行順序為先 <code>text</code> 在 <code>container</code>，所以會得到如圖的結果。<br>
<img src="https://i.imgur.com/Uw4DWwQ.png" alt="Day22-3"></p>
</li>
</ol>
<h2 id="e-stopPropagation"><a class="header-anchor" href="#e-stopPropagation"></a><code>e.stopPropagation</code></h2>
<p>因為傳遞機制，所以在點擊 <code>text</code> 元素時，也會因此讓 <code>container</code> 也在這個過程中觸發行為。</p>
<p>但如果不想要這樣子的話，就必須使用 <code>e.stopPropagation()</code></p>
<p><code>e.stopPropagation()</code> 可以阻止當前事件捕捉與冒泡的傳遞，如此就不會在這個過程中同時也觸發到其他元素。</p>
<p>所以來將測試例子改寫一下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.text&#x27;</span>);</span><br><span class="line"></span><br><span class="line">container.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, test, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;點擊到的元素為: container&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">text.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, test2, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;點擊到的元素為: text&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當點擊 <code>text</code> 元素時，因為 <code>e.stopPropagation()</code> 會終止事件傳遞，所以可以得到如圖結果。</p>
<p><img src="https://i.imgur.com/OddQ6ye.png" alt="Day22-5"></p>
<h2 id="e-preventDefault"><a class="header-anchor" href="#e-preventDefault"></a><code>e.preventDefault</code></h2>
<p>最後是如何取消元素自有的預設行為，舉例來說，當點擊 html 的 <code>&lt;a&gt;</code> 標籤時，會直接導向設定的連結。</p>
<p>但有時候我們會希望先經過一些處理後才導向某個網址，這個時候就需要用到 <code>e.preventDefault()</code> 了。</p>
<p>透過 <code>e.preventDefault</code> 可以將 HTML 的 <code>&lt;a&gt;</code> 標籤點擊後自動導向的默認行為取消，來看看測試例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href =&quot;http://www.google.com&quot; class=&quot;link&quot;&gt;This is a link&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> link  = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.link&#x27;</span>);</span><br><span class="line">link.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,test);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以嘗試將 <code>e.preventDefault()</code> 註解並看看差異性。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>React Element 與 Component</title>
    <url>/2020/09/19/React-Element-%E8%88%87-Component/</url>
    <content><![CDATA[<h1 id="React-Element-與-Component"><a class="header-anchor" href="#React-Element-與-Component"></a>React Element 與 Component</h1>
<p>今天 React 好朋友要帶我了解:</p>
<ol>
<li>什麼是 <strong>React Element</strong>。</li>
<li><strong>Component</strong> 的建立與使用的方式。</li>
</ol>
<p>事不宜遲，趕緊學習吧!!</p>
<span id="more"></span>
<h2 id="React-Element"><a class="header-anchor" href="#React-Element"></a>React Element</h2>
<p>首先要了解的部分是 React Element，先來看看官方怎麼定義一個 React 應用程式的最小組成:</p>
<blockquote>
<p>建立 React 應用程式最小的單位是 element。</p>
</blockquote>
<p>我們透過 JSX 語法所建立的 element，只是一個<strong>單純的物件(Object)</strong>，但有一個很重要的觀念在於 「<strong>React 透過 React DOM ，比對當前 HTML 上的 DOM 與我們建立的 React Element，如果有不同就會將當前 HTML 上的 DOM 更新來符合 React Element 目前的結構」。</strong></p>
<p>此外需要先建立的觀念是: <strong>React Element 並不一定是 component，但是 component 是由 React Element 而組成的。</strong></p>
<h3 id="將-React-Element-渲染到-DOM-中"><a class="header-anchor" href="#將-React-Element-渲染到-DOM-中"></a>將 React Element 渲染到 DOM 中</h3>
<p>了解了什麼是 React Element 與它和 component 的關係後，接著我們要看看如何將 React Element 渲染到 DOM 中。</p>
<p>在 React 中，我們可以透過調用下面這個方法來達成：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element, container[, callback])</span><br></pre></td></tr></table></figure>
<ul>
<li><code>element</code> 是我們要準備<strong>渲染到 DOM 上的 React Element</strong></li>
<li><code>container</code> 則是我們指定<strong>要放入的 DOM 節點</strong>。</li>
</ul>
<p>以<a href="https://zh-hant.reactjs.org/docs/rendering-elements.html#rendering-an-element-into-the-dom">官方文件範例程式碼</a>為例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  element,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>我們將建立好的 React Element(<code>&lt;h1&gt;Hello, world&lt;/h1&gt;</code>) 放入到 <code>root</code> DOM 節點中，如此一來就可以在網頁中看到囉。</p>
<h3 id="更新-React-Element"><a class="header-anchor" href="#更新-React-Element"></a>更新 React Element</h3>
<p>更新 React Element 有幾種方式:</p>
<ol>
<li>每次都重新建立一個新的 React Element，然後透過再次呼叫 <code>ReactDOM.render()</code> 方法更新畫面。</li>
<li>透過<strong>更新 state 中的資料更新畫面。</strong></li>
</ol>
<p>第一點這裡以<a href="https://zh-hant.reactjs.org/docs/rendering-elements.html#updating-the-rendered-element">官方文件範例程式碼</a>為例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UpdateTime.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> element = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;new Date().toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(tick, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>從上方這個程式碼可以看到 <code>setInterval</code> 每秒調用 <code>ReactDOM.render()</code> 重新將 React Element 再次地放到 <code>root</code> DOM 節點中。</p>
<p>而第二點則可以從兩個角度下手:</p>
<ul>
<li>Class-based Component</li>
<li>Fucntion Component</li>
</ul>
<p>這邊提供兩種元件(Component)更新的方式，而這些更新方式與生命週期相關的部分會於後續的天數多做了解。</p>
<p>首先是 Class-based Component 的部分，這邊擷取 TimerOne Component 的程式碼:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TimerOne.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">TimerOne</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">updateTimer</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">updateTimer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>現在時間是: &#123;this.state.date.toLocaleTimeString()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>透過生命週期方法 <code>componentDidMount</code> 於元件掛載時(mounted)，執行更新 Timer 的函式 <code>updateTimer</code></p>
<p>此時 <code>updateTimer</code> 會觸發<strong>在 Class-besed Component 中用來更新 state 的 <code>setState</code> 方法</strong>，並於更新 state 後重新渲染(render)畫面。</p>
<p>接著是 <code>Function Component</code> 的部分，擷取 TimerTwo Component 的程式碼:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">TimerTwo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">updateTimer</span>();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">updateTimer</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>現在時間是: &#123;state.date.toLocaleTimeString()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TimerTwo</span>;</span><br></pre></td></tr></table></figure>
<p>透過 React Hook 方法 <code>useEffect</code> 於元件掛載時(mounted)，執行更新 Timer 的函式 <code>updateTimer</code></p>
<p>此時 <code>updateTimer</code> 會觸發<strong>在 Class-besed Component 中用來更新 state 的 <code>setState</code> 方法</strong>，並於更新 state 後重新渲染(render)畫面。</p>
<p>這邊額外需要提的部分是為什麼會需要額外呼叫 <code>toLocaleTiemString()</code></p>
<p>原因在於我們透過 <code>new Date()</code> 拿到的其實是 Date 這個物件，而在 React 中如果直接將這個物件設在 <code>&#123;&#125;</code> 中的話，會得到如下的錯誤:</p>
<p><img src="https://i.imgur.com/06fewoq.png" alt=""></p>
<p>所以才需要透過呼叫 <code>toLocaleTiemString()</code> 將值轉為字串才可以。</p>
<h2 id="Component-的建立與使用"><a class="header-anchor" href="#Component-的建立與使用"></a>Component 的建立與使用</h2>
<p>接著要來學習的是 React 的重點之一: 元件(Component)，整個 React 應用程式是基於一個個元件(Component)才能搭建而成的，而如何更好的使用元件(Component)就是一門需要學習的課題了。</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/react-component-0prku">點擊前往</a>。</p>
<h3 id="建立-Function-Component-與-Class-Component"><a class="header-anchor" href="#建立-Function-Component-與-Class-Component"></a>建立 Function Component 與 Class Component</h3>
<p>建立 Function Component 最簡單的方式就是<strong>撰寫一個 Javascript function</strong>，如官方提供的範例程式碼:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Welcome</span>  = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>上面的 function <code>Welcome</code> 會回傳用來描述畫面的 React Element，並且也接受一個代表<strong>屬性(properties)的物件</strong>，符合上述的條件，因此也被稱為是 function component。</p>
<p>而 Function Component 在 React Hook 之前也被稱為 Stateless Component，原因在於在 React Hook 之前， <strong>Function Component 是沒有辦法透過 state 儲存狀態的，必須要透過 Class-based Component 才可以。</strong></p>
<p>另外建立 Class Component 最簡單的方式則是透過 ES6 Class 來定義:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ClassBasedComponent.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;React&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>透過繼承自 React 中的 Component 類別來建立一個 Class Component。</p>
<p>這邊需要注意的是兩者在<strong>使用 <code>props</code> 的方式。</strong></p>
<p>了解了基本建立元件的方式後，接著我們來看看怎麼渲染它</p>
<h3 id="Component-的渲染"><a class="header-anchor" href="#Component-的渲染"></a>Component 的渲染</h3>
<p>在前一篇學習文章 <a href="https://hackmd.io/GH2o4ahAR-6UPbwAdTJw3Q">什麼是 JSX?</a> 中，我們撰寫了如下的 React element:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>
<p>但其實 React element <mark>也可以用在我們自定義的元件(Component)上，並且同時會將屬性(JSX 與 children)</mark> 傳進這個元件(Component)中。</p>
<p>意思是透過 <strong><code>props</code></strong> 我們可以在元件(Component)中使用如下的屬性:</p>
<ol>
<li>自定義或者現有的 HTML 屬性</li>
<li><code>children</code></li>
</ol>
<p>而這個部分在<a href="https://zh-hant.reactjs.org/docs/components-and-props.html#rendering-a-component">文件</a>中其實描述的也很詳細:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FunctionComponentOne.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">WelcomeOne</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">WelcomeOne</span>;</span><br></pre></td></tr></table></figure>
<p><code>&lt;WelcomeOne name=&quot;Sara&quot; /&gt;</code> 是我們自定義的元件(Component)，並且當我們設定了一個自定義的屬性 <code>name=&quot;Sara&quot;</code> 時，React 會以 <code>&#123;name: 'Sara'&#125;</code> 的方式作為 <code>props</code> 傳入元件(Component)，如此一來才能在 function <code>WelcomeOne</code> 中透過 <code>props.name</code> 取得值。</p>
<p>而另一個值得一提的是 <code>children</code> ，這邊我們先學習簡單的使用方式，我們將上述的程式碼稍微改寫一下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FunctionComponentTwo.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">WelcomeTwo</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">WelcomeTwo</span>;</span><br></pre></td></tr></table></figure>
<p><code>children</code> 其中一種使用方式是允許我們在自定義的元件標籤中寫入值，如同上方的 <code>Hello World!</code>，而這也同樣會以 <code>&#123;name: 'Sara', children: 'Hello World!'&#125;</code> 作為 <code>props</code> 傳入到元件中。</p>
<p>最後要提到的是 <strong>無論是  Function Component 或者 Class Component，對於修改自己的 props 都是不被允許的，在使用上一定要特別注意。</strong></p>
<p>今天學習了 React Element 和 Component 的差異，明天繼續往前邁進。</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="參考來源"><a class="header-anchor" href="#參考來源"></a>參考來源</h2>
<ul>
<li><a href="https://zh-hant.reactjs.org/docs/rendering-elements.html#updating-the-rendered-element">Render Element</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>React Redux 與 Hooks</title>
    <url>/2020/10/11/React-Redux-%E8%88%87-Hooks/</url>
    <content><![CDATA[<p>在版本 7.1 之後， React Redux 也加入了 Hooks，簡化了以往需要透過 <code>connect</code> 方法並傳入 <code>mapStateToProps</code> 與 <code>mapStateToDispatch</code> 的方式才可以操作 Redux 的 store 物件。</p>
<p>而今天要來看看怎麼使用，也會看看在<a href="https://react-redux.js.org/api/hooks">文件</a>中的定義。</p>
<span id="more"></span>
<h2 id="使用-Hooks-的前置作業"><a class="header-anchor" href="#使用-Hooks-的前置作業"></a>使用 Hooks 的前置作業</h2>
<p>在使用 Hooks 之前需要先完成一些前置作業，這個部分其實也很簡單，就是建立一個 store 並將 store 物件透過 <code>Provider</code> 提供給 <code>App</code> 元件使用。</p>
<p>這邊參考官方提供的範例，基本上相差不多:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(rootReducer)</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="useSelector"><a class="header-anchor" href="#useSelector"></a>useSelector</h2>
<p>接著第一個要學習的是 <code>useSelector</code>，<strong>這個方法允許我們直接從 Redux store 中的狀態提取數據到元件中。</strong></p>
<p>透過 <code>useSelector</code> 可以取代掉 <code>mapStateToProps</code> 的使用方式</p>
<p>在之前如果我們需要從 store 中拿到某個狀態的數據會是這麼寫:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...略</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">counter</span>: state.<span class="property">counter</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps)(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>
<p>但有了 Hooks，我們可以改寫成這樣:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">CounterComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> counter = <span class="title function_">useSelector</span>(<span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">counter</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;counter&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而在使用上基本上 <code>mapStateToProps</code> 大致相同於 <code>useSelector</code>，但依然有些差異，以下擷取至<a href="https://react-redux.js.org/api/hooks#useselector">文件</a>中的段落:</p>
<ul>
<li><code>useSelector</code> 可以回傳任何值，並不一定是一個物件(<code>mapStateToProps</code>則是必定回傳一個物件)。</li>
<li><code>useSelector</code> 會將前一個結果與當前的結果進行比較，如果不同就會強制更新元件，不然就不會更新元件。</li>
<li><code>useSelector</code> 沒有自己的 <code>props</code>，但可以透過 JavaScript 的閉包觀念取得元件中的 <code>props</code>。</li>
<li><code>useSelector</code> 預設是使用 <code>===</code> 嚴格等於的方式檢查(<code>mapStateToProps</code> 則是 <code>==</code>)</li>
</ul>
<h2 id="useDispatch"><a class="header-anchor" href="#useDispatch"></a>useDispatch</h2>
<p>然後要學習的是 <code>useDispatch</code>，對於 <code>useSelector</code> 有了一些認識就知道這個方法要用來做什麼</p>
<p>沒錯，可以用來取代掉 <code>mapStateToDispatch</code> !!</p>
<p>而看到這裡應該不難發現，使用了 Hooks 之後，我們基本上就要跟 <code>connect</code> 、 <code>mapStateToProps</code> 與 <code>mapStateToDispatch</code> 說再見啦，完全用不到了</p>
<p>而之前如果我們需要發一個 <code>action</code> 到 Redux 的 Reducer 中更新 state 的時候會是這麼寫:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...略</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">incrementHandler</span>: <span class="function">() =&gt;</span> <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;INCREMENTHANDLER&quot;</span> &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="title class_">App</span>);</span><br></pre></td></tr></table></figure>
<p>但現在透過 Hooks 的話，可以這麼寫:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useDispatch &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">CounterComponent</span> = (<span class="params">&#123; value &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;INCREMENTHANDLER&#x27; &#125;  )&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Increment counter</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br></pre></td></tr></table></figure>
<p>而這邊需要注意的是在文件中有提到如果我們是透過 callback 的方式來發一個 <code>action</code> 時，需要透過 <code>useCallback</code> 的方式處理，避免掉多餘的重新渲染。</p>
<p>所以我們把上面的程式碼修改如下:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useDispatch &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">CounterComponent</span> = (<span class="params">&#123; value &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> incrementHandler = <span class="title function_">useCallback</span>(</span><br><span class="line">   <span class="function">() =&gt;</span> <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;INCREMENTHANDLER&#x27;</span> &#125;),</span><br><span class="line">   [dispatch]</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> incrementHandler )&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Increment counter</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="useStore"><a class="header-anchor" href="#useStore"></a>useStore</h2>
<p>最後要學的是 <code>useStore</code> 這個方法，這個方法可以讓我們取得我們透過 <code>Provider</code> 提供的 store 物件。</p>
<p>來看看官方提供的程式碼:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">CounterComponent</span> = (<span class="params">&#123; value &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> store = <span class="title function_">useStore</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// EXAMPLE ONLY! Do not do this in a real app.</span></span><br><span class="line">  <span class="comment">// The component will not automatically update if the store state changes</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;store.getState()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="改寫測試範例"><a class="header-anchor" href="#改寫測試範例"></a>改寫測試範例</h2>
<p>而在篇幅的最後，這裡要改寫第23天的測試範例</p>
<p>這邊擷取出局部程式碼:</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/new-cherry-wvzjc?file=/src/App.js">點擊前往</a>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useCallback &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line">  <span class="keyword">const</span> number = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">number</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> incrementHandler = <span class="title function_">useCallback</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;INCREMENTHANDLER&quot;</span> &#125;),</span><br><span class="line">    [dispatch]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> decrementHandler = <span class="title function_">useCallback</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;DECREMENTHANDLER&quot;</span> &#125;),</span><br><span class="line">    [dispatch]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> incrementTenNumberHandler = <span class="title function_">useCallback</span>(</span><br><span class="line">    <span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">      <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;INCREMENTTENNUMBERHANDLER&quot;</span>,</span><br><span class="line">        <span class="attr">payload</span>: &#123; number &#125;</span><br><span class="line">      &#125;),</span><br><span class="line">    [dispatch]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用 React Redux Hooks 改寫<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>數字: &#123;number&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;incrementHandler&#125;</span>&gt;</span>點擊 + 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;decrementHandler&#125;</span>&gt;</span>點擊 - 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          incrementTenNumberHandler(number);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        由當前數字 + 10</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>
<p>上面的測試範例是簡單的加減計數器，這裡透過 <code>useSelector</code> 取得 store 物件中的 <code>number</code> 狀態的數據，並透過 <code>useDispatch</code> 來 <code>dispatch</code> 對應的 action 到 Reducer 中，並執行後續的 state 更新。</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://react-redux.js.org/api/hooks">React Redux Hooks</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>React Router 與 hooks</title>
    <url>/2020/10/06/React-Router-%E8%88%87-hooks/</url>
    <content><![CDATA[<h1 id="React-Router-與-hooks"><a class="header-anchor" href="#React-Router-與-hooks"></a>React Router 與 hooks</h1>
<p>在 React Router 的部分最後要介紹的是<strong>使用 hooks 的方式。</strong></p>
<span id="more"></span>
<p>透過 hooks 可以讓我們在設計 Router 上更加的有效率且方便。</p>
<p>而今天這個部分會透過官方文件提供的部分範例來學習在 Router 中如何使用 hooks 的部分。</p>
<p>接著就趕緊學習吧！</p>
<h2 id="第一個官方範例-學習-useParams"><a class="header-anchor" href="#第一個官方範例-學習-useParams"></a>第一個官方範例: 學習 <code>useParams</code></h2>
<p>當我們在 Router 中使用<strong>動態參數</strong>的設計方式時，總是會需要取得 URL 上的 <code>id</code> 值。</p>
<p>而 hooks 提供了 <strong><code>useParams</code></strong> 讓我們可以更方便的取得 <code>id</code> 值。 而不用再透過 <code>this.props.match.params</code> 的方式取得這個值。</p>
<p>來看看官方提供的這個<a href="https://reactrouter.com/web/example/url-params">範例</a>：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>,</span><br><span class="line">  <span class="title class_">Switch</span>,</span><br><span class="line">  <span class="title class_">Route</span>,</span><br><span class="line">  <span class="title class_">Link</span>,</span><br><span class="line">  useParams</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Params are placeholders in the URL that begin</span></span><br><span class="line"><span class="comment">// with a colon, like the `:id` param defined in</span></span><br><span class="line"><span class="comment">// the route in this example. A similar convention</span></span><br><span class="line"><span class="comment">// is used for matching dynamic segments in other</span></span><br><span class="line"><span class="comment">// popular web frameworks like Rails and Express.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ParamsExample</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Accounts<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/netflix&quot;</span>&gt;</span>Netflix<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/zillow-group&quot;</span>&gt;</span>Zillow Group<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/yahoo&quot;</span>&gt;</span>Yahoo<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/modus-create&quot;</span>&gt;</span>Modus Create<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/:id&quot;</span> <span class="attr">children</span>=<span class="string">&#123;</span>&lt;<span class="attr">Child</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// We can use the `useParams` hook here to access</span></span><br><span class="line">  <span class="comment">// the dynamic pieces of the URL.</span></span><br><span class="line">  <span class="keyword">let</span> &#123; id &#125; = <span class="title function_">useParams</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>ID: &#123;id&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Router 設計了動態參數的方式 <code>&lt;Route path=&quot;/:id&quot; children=&#123;&lt;Child /&gt;&#125; /&gt;</code>。</p>
<p>而在 function <code>Child</code> 中透過存取 <code>useParams</code> 物件的 <code>id</code> 值，如果了解動態參數的配置方式的話，相信這個部分不會太難理解。</p>
<h2 id="第二個官方範例：-學習-useRouteMatch"><a class="header-anchor" href="#第二個官方範例：-學習-useRouteMatch"></a>第二個官方範例： 學習 <code>useRouteMatch</code></h2>
<p>在 hooks 之前如果要確認是否符合匹配 URL 的話，需要透過 <code>this.props.match.url</code> 或者 <code>this.props.match.path</code> 的方式取得 <code>url</code> 或者 <code>path</code> 才能進行匹配。</p>
<p>hooks 提供我們更簡便的方式處理這個部分，透過 <code>useRouteMatch</code> 方法。</p>
<p>這邊看看官方提供的<a href="https://codesandbox.io/s/react-router-nesting-qzy12?from-embed">範例</a>:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>,</span><br><span class="line">  <span class="title class_">Switch</span>,</span><br><span class="line">  <span class="title class_">Route</span>,</span><br><span class="line">  <span class="title class_">Link</span>,</span><br><span class="line">  useParams,</span><br><span class="line">  useRouteMatch</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Since routes are regular React components, they</span></span><br><span class="line"><span class="comment">// may be rendered anywhere in the app, including in</span></span><br><span class="line"><span class="comment">// child elements.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This helps when it&#x27;s time to code-split your app</span></span><br><span class="line"><span class="comment">// into multiple bundles because code-splitting a</span></span><br><span class="line"><span class="comment">// React Router app is the same as code-splitting</span></span><br><span class="line"><span class="comment">// any other React app.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">NestingExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/topics&quot;</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/topics&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Topics</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Topics</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// The `path` lets us build &lt;Route&gt; paths that are</span></span><br><span class="line">  <span class="comment">// relative to the parent route, while the `url` lets</span></span><br><span class="line">  <span class="comment">// us build relative links.</span></span><br><span class="line">  <span class="keyword">let</span> &#123; path, url &#125; = <span class="title function_">useRouteMatch</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">url</span>&#125;/<span class="attr">rendering</span>`&#125;&gt;</span>Rendering with React<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">url</span>&#125;/<span class="attr">components</span>`&#125;&gt;</span>Components<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">url</span>&#125;/<span class="attr">props-v-state</span>`&#125;&gt;</span>Props v. State<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&#123;path&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Please select a topic.<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">path</span>&#125;/<span class="attr">:topicId</span>`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Topic</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Topic</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// The &lt;Route&gt; that rendered this component has a</span></span><br><span class="line">  <span class="comment">// path of `/topics/:topicId`. The `:topicId` portion</span></span><br><span class="line">  <span class="comment">// of the URL indicates a placeholder that we can</span></span><br><span class="line">  <span class="comment">// get from `useParams()`.</span></span><br><span class="line">  <span class="keyword">let</span> &#123; topicId &#125; = <span class="title function_">useParams</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;topicId&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Topics 元件設計了一個巢狀路由的路由配置，如果是之前的話，也許你會寫成這樣：</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">Topics</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">props.match.url</span>&#125;/<span class="attr">rendering</span>`&#125;&gt;</span>Rendering with React<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">props.match.url</span>&#125;/<span class="attr">components</span>`&#125;&gt;</span>Components<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">props.match.url</span>&#125;/<span class="attr">props-v-state</span>`&#125;&gt;</span>Props v. State<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&#123;path&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Please select a topic.<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">props.match.path</span>&#125;/<span class="attr">:topicId</span>`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Topic</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的方式需要透過取得 <code>props</code> 中 <code>match</code> 物件中的 <code>url</code>, <code>path</code> 來設計匹配條件，而使用 <code>useRouteMatch</code> 相對簡單的多，這裡額外擷取重點區塊:</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">Topics</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// The `path` lets us build &lt;Route&gt; paths that are</span></span><br><span class="line">  <span class="comment">// relative to the parent route, while the `url` lets</span></span><br><span class="line">  <span class="comment">// us build relative links.</span></span><br><span class="line">  <span class="keyword">let</span> &#123; path, url &#125; = <span class="title function_">useRouteMatch</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">url</span>&#125;/<span class="attr">rendering</span>`&#125;&gt;</span>Rendering with React<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">url</span>&#125;/<span class="attr">components</span>`&#125;&gt;</span>Components<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">url</span>&#125;/<span class="attr">props-v-state</span>`&#125;&gt;</span>Props v. State<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&#123;path&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Please select a topic.<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">path</span>&#125;/<span class="attr">:topicId</span>`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Topic</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>透過 <code>useRouteMatch</code> 可以直接拿到 <code>path</code>, <code>url</code> 的值來設計匹配的部分。</p>
<p>除了上面的使用方式，也可以額外傳入一些參數，所以也許會看到如下的寫法:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isMatch = <span class="title function_">useRouteMatch</span>(<span class="string">&quot;/PageA/PageAAnotherComponent&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>除了可以接受字串形式的參數，也可以接受物件的方式:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isMatch = <span class="title function_">useRouteMatch</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/PageA/PageAAnotherComponent&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="第三個官方範例：-學習-useLocation"><a class="header-anchor" href="#第三個官方範例：-學習-useLocation"></a>第三個官方範例： 學習 <code>useLocation</code></h2>
<p>location 物件可以提供我們取得當前應用程式所在的位置。</p>
<p>而之前我們必須透過 <code>this.props.location</code> 的方式才可以取得 location 物件中的值，而現在可以透過 <code>useLocation</code> 的方式更簡單的取得。</p>
<p>這邊看看官方提供的<a href="https://reactrouter.com/web/example/no-match">範例</a>:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>,</span><br><span class="line">  <span class="title class_">Route</span>,</span><br><span class="line">  <span class="title class_">Link</span>,</span><br><span class="line">  <span class="title class_">Switch</span>,</span><br><span class="line">  <span class="title class_">Redirect</span>,</span><br><span class="line">  useLocation</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can use the last &lt;Route&gt; in a &lt;Switch&gt; as a kind of</span></span><br><span class="line"><span class="comment">// &quot;fallback&quot; route, to catch 404 errors.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// There are a few useful things to note about this example:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// - A &lt;Switch&gt; renders the first child &lt;Route&gt; that matches</span></span><br><span class="line"><span class="comment">// - A &lt;Redirect&gt; may be used to redirect old URLs to new ones</span></span><br><span class="line"><span class="comment">// - A &lt;Route path=&quot;*&gt; always matches</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">NoMatchExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/old-match&quot;</span>&gt;</span>Old Match, to be redirected<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/will-match&quot;</span>&gt;</span>Will Match<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/will-not-match&quot;</span>&gt;</span>Will Not Match<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/also/will/not/match&quot;</span>&gt;</span>Also Will Not Match<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/old-match&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/will-match&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/will-match&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">WillMatch</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;*&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NoMatch</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">WillMatch</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Matched!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">NoMatch</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> location = <span class="title function_">useLocation</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        No match for <span class="tag">&lt;<span class="name">code</span>&gt;</span>&#123;location.pathname&#125;<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這裡簡單描述一下這段程式碼的運作:</p>
<ol>
<li>當路由匹配到 <code>/</code> 時，會渲染 <code>Home</code> 元件的內容</li>
<li>當路由匹配到 <code>/old-match</code> 時，會重導向至 <code>WillMatch</code> 元件的內容</li>
<li>當路由匹配到 <code>/will-match</code> 時，會渲染 <code>WillMatch</code> 元件的內容</li>
<li>當路由匹配到 <code>/will-not-match</code> 時，會匹配任意路徑的路由(<code>path=&quot;*&quot;</code>)，所以會渲染<code>NoMatch</code> 元件的內容</li>
<li>當路由匹配到 <code>/also/will/not/match</code> 時，會匹配任意路徑的路由(<code>path=&quot;*&quot;</code>)，所以會渲染<code>NoMatch</code> 元件的內容</li>
</ol>
<p>而在 <code>NoMatch</code> 元件中使用到了 <code>useLocation</code>，當我們需要取得目前應用程式的位置時，可以透過 <code>useLocation</code> 物件提供的 <code>pathname</code> 的值拿到。</p>
<h2 id="第四個官方範例：-學習-useHistory"><a class="header-anchor" href="#第四個官方範例：-學習-useHistory"></a>第四個官方範例： 學習 <code>useHistory</code></h2>
<p>最後一個範例是學習如何透過 hooks 的方式取得 history 物件中提供的方法。</p>
<p>這邊來看看<a href="https://reactrouter.com/web/api/Hooks/usehistory">官方提供的程式碼</a>:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">HomeButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> history = <span class="title function_">useHistory</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    history.<span class="title function_">push</span>(<span class="string">&quot;/home&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Go home</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 history 物件中有一些方法提供我們操作，而其中一個就是 <code>push</code>，這個方法可以讓我們在觸發某些行為時，將網頁導航至我們設定的位置。</p>
<p>而範例程式碼則是透過點擊事件來呼叫 <code>push</code> 方法，並導航至 <code>Home</code> 元件、渲染 <code>Home</code> 元件內容。</p>
<p>關於在 Router 中使用 hooks 的學習就暫時先到這裡囉！</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://reactrouter.com/web/api/Hooks">React Router</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>React router 配置動態參數並取得 api 資料內容</title>
    <url>/2020/10/03/React-router-%E9%85%8D%E7%BD%AE%E5%8B%95%E6%85%8B%E5%8F%83%E6%95%B8%E4%B8%A6%E5%8F%96%E5%BE%97-api-%E8%B3%87%E6%96%99%E5%85%A7%E5%AE%B9/</url>
    <content><![CDATA[<h1 id="React-router-配置動態參數並取得-api-資料內容"><a class="header-anchor" href="#React-router-配置動態參數並取得-api-資料內容"></a>React router 配置動態參數並取得 api 資料內容</h1>
<p>今天的篇幅要來學習透過<strong>切換動態參數的方式並取得 api 的資料內容後，渲染在網頁上。</strong></p>
<span id="more"></span>
<p>這部分我們延續昨天的 <a href="https://codesandbox.io/s/quiet-mountain-glw7z">測試範例</a>，並改寫成透過 call api 的方式將資料替換成取得的資料。</p>
<p>另外還要學習如何透過 <code>&lt;NavLink&gt;</code> 以外的方式達到同樣的目的。</p>
<h2 id="改寫測試範例並配置路由的動態參數"><a class="header-anchor" href="#改寫測試範例並配置路由的動態參數"></a>改寫測試範例並配置路由的動態參數</h2>
<p>首先我們先將昨天的程式碼改寫，讓兩個作為導航用的按鈕都會切換到同一個元件(PageA)，並且取得 props 中 router 提供的相關參數:</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/immutable-water-gtwdl?file=/src/App.js">點擊前往</a>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PageA</span> <span class="keyword">from</span> <span class="string">&quot;./containers/PageA&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>,</span><br><span class="line">  <span class="title class_">Switch</span>,</span><br><span class="line">  <span class="title class_">Route</span>,</span><br><span class="line">  <span class="title class_">NavLink</span>,</span><br><span class="line">  <span class="title class_">Redirect</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用 NavLink<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/PageA/1&quot;</span> <span class="attr">activeClassName</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                PageA, id: 1</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/PageA/2&quot;</span> <span class="attr">activeClassName</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                PageA, id: 2</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/PageA/1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/PageA/:id&quot;</span> <span class="attr">component</span>=<span class="string">&#123;PageA&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>透過設定 <code>&lt;NavLink to=&quot;/PageA/1&quot;&gt;</code> 配置<strong>當路由路徑為 <code>/PageA/1</code> 的時候，會渲染 PageA 且 <code>id = 1</code> 的內容</strong>，但是這樣還不夠，所以我們還要額外搭配 <code>&lt;Route path=&quot;/PageA/:id&quot; component=&#123;PageA&#125; /&gt;</code> 的方式才能成功導航，這邊的 <strong><code>:id</code>就是用來讓我們動態傳遞參數用的</strong>。</p>
<p>透過 <code>:id</code> 的方式，當路由路徑符合 <code>/PageA/1</code> (或者任意數字時)，即可成功匹配。</p>
<p>成功導航後，接著我們要取得剛剛提到的 <code>route</code> 的一些資訊，這個部分我們必須將昨天寫的方式:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/PageA&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">PageA</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Route</span>&gt;</span><br></pre></td></tr></table></figure>
<p>改寫成:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/PageA/:id&quot;</span> component=&#123;<span class="title class_">PageA</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>
<p>這樣我們才能在 <code>PageA</code> 元件中<strong>透過 <code>props</code> 取得 <code>route</code> 的資訊。</strong></p>
<p>而 route 總共會取得三個 props:</p>
<ol>
<li><code>match</code></li>
<li><code>location</code></li>
<li><code>history</code></li>
</ol>
<p>而這邊我們會需要用到的部分則是 <code>match</code>，接著我們透過在 <code>pageA</code> 中取得 <code>match</code> 的值:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">PageA</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">post</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">body</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// you can see route information here...</span></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>);</span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>.<span class="property">params</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getPostHandler</span>(id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>.<span class="property">params</span>.<span class="property">id</span> !== prevProps.<span class="property">match</span>.<span class="property">params</span>.<span class="property">id</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; id &#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>.<span class="property">params</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getPostHandler</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getPostHandler = <span class="keyword">async</span> (id) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(</span><br><span class="line">      <span class="string">`https://jsonplaceholder.typicode.com/posts/<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">post</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: data.<span class="property">title</span>,</span><br><span class="line">        <span class="attr">body</span>: data.<span class="property">body</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;page-a&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Page A Title: &#123;this.state.post.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Page A content &#123;this.state.post.body&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>id: &#123;this.props.match.params.id&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>componentDidMount</code> 中，觀察 <code>this.props</code> 的 <code>match</code> 可以取得如下的內容：</p>
<p><img src="https://i.imgur.com/DT4nezj.png" alt=""></p>
<p>此時我們就可以透過 <code>params</code> 中的 <code>id</code> 來作為 call api 的參數，並在取得 response 後將資料呈現在畫面上囉。</p>
<p>接著，還記得在前面提到我們要透過 <code>&lt;NavLink&gt;</code> 以外的方式達成同樣的目的嗎?</p>
<p>這部分我們就需要學習透過 <code>history</code> 這個物件中的 <code>push</code> 來達成目的。</p>
<p>讓我們繼續往下學習吧!</p>
<h2 id="如何取得-history-物件"><a class="header-anchor" href="#如何取得-history-物件"></a>如何取得 <code>history</code> 物件</h2>
<p>取得 <code>history</code> 物件的幾種方式:</p>
<ol>
<li>透過 HOC 元件： <code>withRouter</code></li>
<li>透過 <code>&lt;Route&gt;</code> 的 <code>render</code> 方法</li>
</ol>
<p>首先先來看看使用 <code>withRouter</code> 的方式</p>
<p>我們接著在剛剛的 <a href="https://codesandbox.io/s/immutable-water-gtwdl?file=/src/App.js">測試範例</a> 中新增一個按鈕:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Button.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&quot;btn&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.props.history.push(&quot;/pageA/3&quot;)&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        PageA, id: 3</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withRouter</span>(<span class="title class_">Button</span>);</span><br></pre></td></tr></table></figure>
<p>透過 <code>withRouter</code> 這個作為 HOC 的元件，我們在 export <code>Button</code> 時，可以透過 <code>withRouter</code> 包住 <code>Button</code> 並獲得 <code>route</code> 相關的 <code>props</code>: <code>match</code>, <code>location</code>, <code>history</code>。</p>
<p>這個我們就可以使用 <code>history</code> 中的 <code>push</code>，導航至要前往的元件內容。</p>
<p>接著是透過 <code>&lt;Route&gt;</code> 的 <code>render</code> 方法，一樣在剛剛的測試範例中新增一個按鈕:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">render</span>=<span class="string">&#123;(&#123;</span> <span class="attr">history</span> &#125;) =&gt;</span> (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> history.push(&quot;/pageA/4&quot;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">            PageA, id: 4</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Button2</span>;</span><br></pre></td></tr></table></figure>
<p>在 <code>&lt;Route&gt;</code> 的 <code>render</code> 方法中，我們一樣可以獲得 <code>route</code> 相關的 <code>props</code>: <code>match</code>, <code>location</code>, <code>history</code>，進而取得 push 這個方法。</p>
<p>最後要提的部分是關於<strong>重導向 <code>Redirect</code></strong>，在上面的程式碼中使用了最簡單的使用方式:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Redirect</span> to=<span class="string">&quot;/PageA/1&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>當頁面刷新時，透過 Redirect 可以將頁面導向到指定的位置。</p>
<p>明天接續 React Router 的主題，來看看如何實現巢狀路由。</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://reactrouter.com/web/guides/quick-start">React Router</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Redux 同步資料流</title>
    <url>/2020/10/08/Redux-%E5%90%8C%E6%AD%A5%E8%B3%87%E6%96%99%E6%B5%81/</url>
    <content><![CDATA[<h1 id="Redux-同步資料流"><a class="header-anchor" href="#Redux-同步資料流"></a>Redux 同步資料流</h1>
<p>記得昨天 Redux 好朋友說今天要透過例子讓我更加了解運作的部分，而今天要先關於<strong>處理同步資料時的運作方式。</strong></p>
<span id="more"></span>
<p>此外，還特地從元件中的 state 、事件一步步開始說明，然後再把 state 中的資料與事件搬到 Redux 中，真的很貼心。</p>
<p>接著讓我們看看提供的例子:</p>
<h2 id="一步步來-從元件中開始"><a class="header-anchor" href="#一步步來-從元件中開始"></a>一步步來: 從元件中開始</h2>
<p>這邊 Redux 好朋友先描述了關於這個測試例子的操作情境:</p>
<ol>
<li><strong>元件中 state 有一個狀態 number，初始值為 0</strong></li>
<li>有一個事件: incrementHandler，用來更新 number 的值，每次點擊按鈕時 ＋１。</li>
<li>有一個事件: decrementHandler，用來更新 number 的值，每次點擊按鈕時 -１。</li>
</ol>
<p>相關測試範例，<a href="https://codesandbox.io/s/recursing-elbakyan-1zdw7?file=/src/App.js:276-292">點擊前往</a></p>
<h2 id="好戲上場-將-state-與事件搬到-Redux-中。"><a class="header-anchor" href="#好戲上場-將-state-與事件搬到-Redux-中。"></a>好戲上場: 將 state 與事件搬到 Redux 中。</h2>
<p>接著就是今天的重頭戲，將 state 與事件搬到 Redux 中。</p>
<p>這邊 Redux 好朋友再次幫我們條列的一個流程:</p>
<ol>
<li>安裝 redux, react-redux</li>
<li>建立 Redux store 物件、 createStore 方法</li>
<li>在 store 資料夾中建立 rootReducer.js，並建立 Reducer 方法, 初始 state，將 Reducer 方法作為 createStore 參數傳入。</li>
<li>將 Redux store 物件透過 react-redux 中的 Provider 提供給 App 元件</li>
<li>在 React 元件中透過 redux 中的 connect 方法讓 React 元件可以和 redux store 連接。</li>
<li>透過在 React 元件中設定:
<ul>
<li>mapStateToProps: 將 Redux store 物件 state 中需要的值提供給 React 元件。</li>
<li>mapDispatchToProps: 在 React 元件中調用方法，透過方法 dispatch 一個 action，讓 Store 知道是哪一個事件需要被觸發並執行 state 的更新。</li>
</ul>
</li>
</ol>
<p>接著讓我們看看在範例中依序的設定:</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/zen-volhard-vwu29">點擊前往</a></p>
<p>首先是安裝 redux, react-redux，這部分應該沒有難度，只需要注意<strong>版本的問題</strong>，在 React 版本 &gt; 16 以上才可以使用。</p>
<p>接著會將幾個流程一次設定好，在 index.js 中:</p>
<ol>
<li>建立 store 物件與引入  createStore 函式</li>
<li>在 src 資料夾中建立 store 資料夾，建立 rootReducer 方法並引入到 index.js</li>
<li>將 Redux store 物件透過 react-redux 中的 Provider 提供給 App 元件</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; rootReducer &#125; <span class="keyword">from</span> <span class="string">&quot;./store/rootReducer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(rootReducer);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span>,</span><br><span class="line">  rootElement</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>接著我們在 React 元件中設定:</p>
<ol>
<li>透過 react-redux 中的 connect 方法將 react 元件與 redux 的 store 連接。</li>
<li>先設定 mapStateToProps，將 Redux 中的 state，依據需求在 React 元件中 取得。</li>
<li>然後設定 mapDispatchToProps，透過 dispatch 一個 action，讓 store 知道是 action type 中 INCREMENTHANDLER、DECREMENTHANDLER 或 incrementTenNumberHandler 在元件中發出一個更新 state 的事件，而在 React 元件中，我們透過 props 的方式取得呼叫這些方法。</li>
<li>最後為了讓 state 的更新可以更加的有彈性，透過當箭頭函式 dispatch 一個 action 時，將 number 傳入作為 payload 的資料傳到 store 中，在更新上可以更加的有彈性。</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>數字: &#123;this.props.number&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.props.incrementHandler&#125;</span>&gt;</span>點擊 + 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.props.decrementHandler&#125;</span>&gt;</span>點擊 - 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            this.props.incrementTenNumberHandler(this.props.number);</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          由當前數字 + 10</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">number</span>: state.<span class="property">number</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">incrementHandler</span>: <span class="function">() =&gt;</span> <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;INCREMENTHANDLER&quot;</span> &#125;),</span><br><span class="line">    <span class="attr">decrementHandler</span>: <span class="function">() =&gt;</span> <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;DECREMENTHANDLER&quot;</span> &#125;),</span><br><span class="line">    <span class="attr">incrementTenNumberHandler</span>: <span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">      <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;INCREMENTTENNUMBERHANDLER&quot;</span>,</span><br><span class="line">        <span class="attr">payload</span>: &#123;</span><br><span class="line">          number</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="title class_">App</span>);</span><br></pre></td></tr></table></figure>
<p>在 rootReducer 方法中的設定，透過<strong>判斷 action.type 決定觸發哪一個更新 state 的流程。</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  <span class="attr">number</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">rootReducer</span> = (<span class="params">state = initialState, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;INCREMENTHANDLER&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">number</span>: state.<span class="property">number</span> + <span class="number">1</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;DECREMENTHANDLER&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">number</span>: state.<span class="property">number</span> - <span class="number">1</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;INCREMENTTENNUMBERHANDLER&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">number</span>: action.<span class="property">payload</span>.<span class="property">number</span> + <span class="number">10</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>以上就是一個 Redux 同步資料流的處理，基本上這樣子就是一個簡單又完整在 React 中使用 Redux 管理共同 state 的方式。</p>
<p>而最後 redux 好朋友還偷偷告訴我們一個秘訣，為了讓 <strong>lint 工具方便檢查到錯誤，以及讓開發團隊可以更好了解使用了哪些 action types 的時候，這邊透過新增一個 action-types 的檔案來管理。</strong></p>
<p>方式很簡單，將所有目前使用到的 action 都在 action-types 集中管理，並透過匯出的方式在 React 元件、 Redux 中使用。</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/stupefied-dust-9hqcy?file=/src/store/action-types.js">點擊前往</a></p>
<p>在 action-types 這隻檔案中會看到這樣子的管理：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">INCREMENTHANDLER</span> = <span class="string">&quot;INCREMENTHANDLER&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">DECREMENTHANDLER</span> = <span class="string">&quot;DECREMENTHANDLER&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">INCREMENTTENNUMBERHANDLER</span> = <span class="string">&quot;INCREMENTTENNUMBERHANDLER&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>在 rootReducer 中則會改寫如下:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionTypes <span class="keyword">from</span> <span class="string">&#x27;./action-types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  <span class="attr">number</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">rootReducer</span> = (<span class="params">state = initialState, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> actionTypes.<span class="property">INCREMENTHANDLER</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">number</span>: state.<span class="property">number</span> + <span class="number">1</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> actionTypes.<span class="property">DECREMENTHANDLER</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">number</span>: state.<span class="property">number</span> - <span class="number">1</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> actionTypes.<span class="property">INCREMENTTENNUMBERHANDLER</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">number</span>: action.<span class="property">payload</span>.<span class="property">number</span> + <span class="number">10</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在 App.js 中則會改寫如下:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionTypes <span class="keyword">from</span> <span class="string">&quot;./store/action-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>數字: &#123;this.props.number&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.props.incrementHandler&#125;</span>&gt;</span>點擊 + 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.props.decrementHandler&#125;</span>&gt;</span>點擊 - 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            this.props.incrementTenNumberHandler(this.props.number);</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          由當前數字 + 10</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">number</span>: state.<span class="property">number</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">incrementHandler</span>: <span class="function">() =&gt;</span> <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: actionTypes.<span class="property">INCREMENTHANDLER</span> &#125;),</span><br><span class="line">    <span class="attr">decrementHandler</span>: <span class="function">() =&gt;</span> <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: actionTypes.<span class="property">DECREMENTHANDLER</span> &#125;),</span><br><span class="line">    <span class="attr">incrementTenNumberHandler</span>: <span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">      <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: actionTypes.<span class="property">INCREMENTTENNUMBERHANDLER</span>,</span><br><span class="line">        <span class="attr">payload</span>: &#123;</span><br><span class="line">          number</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="title class_">App</span>);</span><br></pre></td></tr></table></figure>
<p>所以當我們在 dispatch 一個 action 時如果有拼寫不對等等的錯誤時，可以得到類似以下的錯誤訊息：</p>
<p><img src="https://i.imgur.com/t4mBQa3.png" alt=""></p>
<p>透過 lint 等工具可以讓我們更快知道問題發生的位置。</p>
<p>以上就是 Redux 好朋友在今天跟我們分享的部分，但是它冷冷的補了一句：「你以為結束了嗎? 不，這其實剛開始…」。</p>
<p>於是明天要進入的是 Redux 的另外一個重點: 非同步資料流。</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<p>我們明天見。</p>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://react-redux.js.org/introduction/quick-start">React-Redux</a></li>
<li><a href="https://redux.js.org/basics/usage-with-react">Redux</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Redux 觀念初探</title>
    <url>/2020/10/07/Redux-%E8%A7%80%E5%BF%B5%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h1 id="Redux-觀念初探"><a class="header-anchor" href="#Redux-觀念初探"></a>Redux 觀念初探</h1>
<p>今天要學習的部分是<strong>管理應用程式中所有 State 的神器， Redux。</strong> 如果沒有它，當我們開發的應得程式越來越複雜的時候，亦或者是 containers 之間彼此需要相同資料的時候，就會顯得舉步維艱。</p>
<span id="more"></span>
<p>而今天是和 Redux 交朋友的第一天，所以我們先從認識 Redux 一些相關的詞彙與概念來慢慢增進與 redux 的關係吧!</p>
<p>相關的知識可以從<a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts#redux-essentials-part-1-redux-overview-and-concepts">官方文件</a>中查看。</p>
<h2 id="想認識-redux-嗎-先認識我常用的詞彙與用途吧"><a class="header-anchor" href="#想認識-redux-嗎-先認識我常用的詞彙與用途吧"></a>想認識 redux 嗎? 先認識我常用的詞彙與用途吧!</h2>
<h3 id="Redux-好朋友幫助我的兩三事"><a class="header-anchor" href="#Redux-好朋友幫助我的兩三事"></a>Redux 好朋友幫助我的兩三事</h3>
<p>Redux 好朋友可以幫助我在開發 React 應用程式的時候可以<strong>更有效地[管理/更新]全域 state 的狀態。</strong></p>
<p>至於如何更新 state 的狀態呢?</p>
<p>我們在 React Component 中透過觸發事件(event) 來更新 state，<strong>在 Redux 也是相同的</strong>，我們在 Redux 中使用<strong>稱為 actions 的事件來更新 state</strong>。</p>
<p>而要讓 Redux 中的 state / actions 可以在 React component 中使用，還需要借助一位朋友的幫忙。</p>
<p>那就是 React-Redux。</p>
<p>如果沒有 React-Redux， Redux 和 React 應用程式的友誼橋樑就會無法建立。</p>
<p><strong>這表示要讓 Redux 中的 state/actions 得以在 React 應用程式使用，需要透過 React-Redux 才可以。</strong></p>
<p>此外， Redux 好朋友還跟我提及了一個很重要的觀念，關於 <strong>「不可變(Immutability)」。</strong><br>
因為 Javascript 中的<strong>物件與陣列都是可變的(mutable)</strong>，但是在 <strong>redux 中它希望在更新 state 中狀態的時候，是在不修改到原本 state 狀態下進行更新的(不變地更新值)。</strong></p>
<p>所以為了避免這個問題，我們需要<strong>透過複製一份當前 state 的狀態，然後再將要更新的資料(陣列或者物件型別)放進去。</strong></p>
<p>這邊舉個簡單的小例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = arr; <span class="comment">// 指向同一個記憶體位置</span></span><br><span class="line">arr2.<span class="title function_">push</span>(<span class="string">&#x27;c&#x27;</span>) <span class="comment">// arr, arr2 同時都被修改了</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [...arr]; <span class="comment">// 淺層複製，修改第一層或新增資料時並不修改到 arr</span></span><br><span class="line">arr2.<span class="title function_">push</span>(<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>介紹至此，Redux 好朋友說暫時先介紹到這裡，再往下介紹之前，必須先瞭解一些在 Redux 中的術語。</p>
<p>接著它就自顧自的開始介紹一些術語與運作方式呢。</p>
<h2 id="更加貼近-Redux-了解術語"><a class="header-anchor" href="#更加貼近-Redux-了解術語"></a>更加貼近 Redux - 了解術語</h2>
<h3 id="Store"><a class="header-anchor" href="#Store"></a>Store</h3>
<p>在 Redux 中<strong>用來儲存 state 狀態的物件，稱為 store</strong>。</p>
<p>並且藉由 redux 中的 createStore 方法，用來將 Reducer 傳入。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">&#x27;./store/rootReducer&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(rootReducer);</span><br></pre></td></tr></table></figure>
<h3 id="Reducers"><a class="header-anchor" href="#Reducers"></a>Reducers</h3>
<p><strong>是一個函式，用來接收當前的 state 與 action，並在需要的時候可以更新 state 的狀態。</strong></p>
<p>此外，還有一些使用的規則需要注意:</p>
<ol>
<li>新的 state 狀態只能是透過 <strong>當前的 state 與 action 物件來取得。</strong></li>
<li>不可以修改當前的 state，需要透過額外複製一份當前 state 的狀態，並從那份狀態來進行更新。</li>
<li><strong>不可以在此設計非同步邏輯、隨機值或者其他會造成 side effect 的行為。</strong></li>
</ol>
<p>這裡提供一個片段的小例子來幫助理解：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">value</span>: <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">counterReducer</span>(<span class="params">state = initialState, action</span>) &#123;</span><br><span class="line">  <span class="comment">// Check to see if the reducer cares about this action</span></span><br><span class="line">  <span class="keyword">if</span> (action.<span class="property">type</span> === <span class="string">&#x27;counter/increment&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// If so, make a copy of `state`</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...state,</span><br><span class="line">      <span class="comment">// and update the copy with the new value</span></span><br><span class="line">      <span class="attr">value</span>: state.<span class="property">value</span> + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// otherwise return the existing state unchanged</span></span><br><span class="line">  <span class="keyword">return</span> state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>定義了 initialState，當 counterReducer 被執行的時候，<strong>initialState 作為 state 的預設值</strong>。</li>
<li>藉由 action 中描述的事件，當在 React 應用程式中觸發了描述這個事件的 action 時(此為 counter/increment)， counterReducer 會<strong>回傳一個 value 值 + 1 的物件，更新 state 狀態。</strong></li>
<li>更新 state 狀態時，記得要複製一份當前的 state 狀態，可以透過物件解構的方式達成。</li>
</ol>
<h3 id="Dispatch"><a class="header-anchor" href="#Dispatch"></a>Dispatch</h3>
<p><strong>唯一一種用來將 action 物件傳入，並且更新 store 中  state 狀態的方式。</strong></p>
<p>store.dispatch 可以視為是<strong>觸發一個事件，透過這個方式讓 store 知道我們想要觸發哪一個事件(藉由傳入 action 物件得知)。</strong></p>
<p>而當執行 store.dispatch 時， store 其實是執行 ruducer 函式並更新 state 的狀態，以下方這個小例子為例:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">store.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;counter/increment&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>
<p>我們將 <code>&#123; type: 'counter/increment' &#125;</code> 這個 action 物件傳入，讓 store 中的 reducer 方法知道我們現在要執行的是 <code>counter/increment</code>，然後執行對應更新 state 狀態的流程。</p>
<h3 id="Actions"><a class="header-anchor" href="#Actions"></a>Actions</h3>
<p>可以將 actions 視為是一個<strong>在 React 應用程式中用來描述某件事件可以被執行的事件。</strong></p>
<p>Actions 具有 type 與 payload 欄位，其中:</p>
<ul>
<li>type 欄位用來描述這個可以被執行的事件</li>
<li>payload 欄位用來提供額外的資訊可以被操作</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> addTodoAction = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;todos/todoAdded&#x27;</span>,</span><br><span class="line">  <span class="attr">payload</span>: <span class="string">&#x27;Buy milk&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Action-Creators"><a class="header-anchor" href="#Action-Creators"></a>Action Creators</h3>
<p><strong>是一個函式，可以用來回傳一個 action 物件，並且可以額外提供參數傳入。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">addTodo</span> = text =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;todos/todoAdded&#x27;</span>,</span><br><span class="line">    <span class="attr">payload</span>: text</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>介紹到這裡， Redux 好朋友認為我應該是都懂了…。</p>
<p>於是又接著介紹運作的模式…</p>
<h2 id="Redux-運作模式理解"><a class="header-anchor" href="#Redux-運作模式理解"></a>Redux 運作模式理解</h2>
<p>為了讓我可以更快理解運作模式，這邊它區分為兩個部分來講解:</p>
<ol>
<li>初始設置</li>
<li>更新 state 狀態</li>
</ol>
<p>首先是初始設定:</p>
<ol>
<li>建立 Redux Store 與 reducer 函式。</li>
<li>Store 呼叫一次 reducer，並將取得的 state 狀態作為初始狀態。</li>
<li>當 React 元件第一次渲染時，透過 react-redux 的幫助，可以取得 Redux Store 物件的 state 狀態，並將值運用在 React 元件中。</li>
</ol>
<p>再來是更新時:</p>
<ol>
<li>觸發像是點擊事件時，從 React 元件中 disptach 一個 action ，告訴 Store 中的 reducer，我現在要對於符合條件的進行對應的 state 更新流程。</li>
<li>Store 中 state 被更新， React 元件中得知後就會重新渲染，並將更新後的 state 的狀態運用在 React 元件中。</li>
</ol>
<p>Redux 好朋友怕我看不懂文字的描述，還特地從 <a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts#redux-application-data-flow">官方文件</a> 中找來這張圖:</p>
<p><img src="https://redux.js.org/img/tutorials/essentials/ReduxDataFlowDiagram.gif" alt=""></p>
<p>關於 Redux 的整體觀念大致就介紹到這裡， redux 好朋友說明天要透過範例讓我們了解如何處理同步資料流的部分。</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<p>明天見~</p>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts#redux-essentials-part-1-redux-overview-and-concepts">Redux Essentials, Part 1: Redux Overview and Concepts</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Redux 非同步資料流 - Redux saga 基本用法</title>
    <url>/2020/10/10/Redux-%E9%9D%9E%E5%90%8C%E6%AD%A5%E8%B3%87%E6%96%99%E6%B5%81-Redux-saga-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>今天要學習的是在 Redux 中另一套可以用來處理非同步資料套件: <strong>Redux saga</strong>。</p>
<p>這套與 Redux thunk 都是目前算是蠻主流的套件，在使用上可以依據自己的喜好選擇使用</p>
<p>往下學習怎麼用之前，我們先對於 Redux-saga 再來多一點認識吧!</p>
<span id="more"></span>
<h2 id="Redux-saga-的特色"><a class="header-anchor" href="#Redux-saga-的特色"></a>Redux-saga 的特色</h2>
<p>依據<a href="https://redux-saga.js.org/">文件</a>提到，這裡條列出幾個重點:</p>
<ol>
<li>可以<strong>在 Redux-saga 中處理 side effect 的行為</strong>，例如像是 fetching data 等，可以更有效率、簡單的管理。</li>
<li>作為 Redux 的 middleware ，可以在 Redux 中調度 Redux 的操作，例如在 middleware 中 dispatch 一個 action。</li>
<li>使用 ES6 的生成器(Generators)來處理非同步流。</li>
<li>相較於 redux-thunk，不會陷入到 回呼地獄(callback hell)。</li>
</ol>
<p>以上為文件中提到關於 redux-saga 的特色，其中也提到了一個很重要的核心概念:<strong>生成器(Generators)</strong>。</p>
<p>所以接著我們要先學習一下關於生成器(Generators)的一些知識。</p>
<h2 id="生成器-Generators"><a class="header-anchor" href="#生成器-Generators"></a>生成器(Generators)</h2>
<p>生成器(Generators)是 ES6 出的功能，那為什麼 Redux-saga 會是透過它來實作出這個套件呢?</p>
<p>接著我們看一下關於生成器(Generators)的定義與一些關鍵字</p>
<h3 id="什麼是生成器？"><a class="header-anchor" href="#什麼是生成器？"></a>什麼是生成器？</h3>
<p><strong>生成器函式</strong>會產生一連串的值，但並不是一次全部產生出來，而是<strong>對每次請求產生一個值</strong>。</p>
<p>在產生一個值之後，<strong>生成器函式不會像正常函式那樣結束執行，它只是先暫停，然後再請求另一個值時，從暫停的地方恢復運作</strong>。</p>
<p><strong>生成器不同於標準函式，呼叫生成器不是執行生成器函式，而是建立出一個迭代器(iterator)的物件。</strong></p>
<h3 id="如何定義一個生成器函式"><a class="header-anchor" href="#如何定義一個生成器函式"></a>如何定義一個生成器函式?</h3>
<p>定義一個生成器函式： <strong>在 function 後面加上一個星號(*)</strong> 即可。</p>
<p>然後<strong>透過 <code>yield</code> 關鍵字來產生個別的值</strong>。</p>
<h3 id="如何取得生成器產生的值"><a class="header-anchor" href="#如何取得生成器產生的值"></a>如何取得生成器產生的值?</h3>
<p><strong>呼叫迭代器(iterator)的方法: <code>next()</code>，可以向迭代器請求一個值，當生成器遇到 <code>yeild</code> 關鍵字時，會產生一個物件的值作為結果回傳，然後就暫時暫停執行，讓頁面其他動作可以繼續，直到生成器再次透過 <code>next()</code> 方法呼叫時才會再次喚醒生成器。</strong></p>
<p>而剛剛提到回傳的結果為一個物件，從這個物件的值我們可以判斷是否還有值可以產生出來。</p>
<p>例如物件的值長這樣的時候:</p>
<p><code>&#123;value: &quot;Katana&quot;, done: false&#125;</code></p>
<p>由於 <strong><code>done</code> 是 <code>false</code>，代表還有值可以產生</strong>。</p>
<p>如果得到的值是 <code>&#123;value: undefined, done: true&#125;</code>，<strong>當 <code>done</code> 是 <code>true</code>，代表已經沒有值可以產生了。</strong></p>
<p>大致了解了生成器(Generators)的定義、設定方式和如何取值之後，透過一個簡單的程式碼來幫助理解吧</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title class_">FruitGenerator</span>() &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;apple&quot;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;pineapple&quot;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;orange&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fruitIterator = <span class="title class_">FruitGenerator</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruitIterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruitIterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruitIterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruitIterator.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure>
<p>上面程式碼建立了一個 <code>FruitGenerator</code> 的生成器，並且我們產生了一個 <code>fruitIterator</code> 的迭代器物件，而當我們一次次請求時，也就是透過連續呼叫 <code>next()</code> 方法時，會取得一連串的回傳值:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">value</span>: <span class="string">&quot;apple&quot;</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&#123;<span class="attr">value</span>: <span class="string">&quot;pineapple&quot;</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&#123;<span class="attr">value</span>: <span class="string">&quot;orange&quot;</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>
<p>關於生成器(Generators)的學習大致先到這裡，接著我們看看怎麼使用 Redux-saga</p>
<h2 id="Redux-saga-的使用"><a class="header-anchor" href="#Redux-saga-的使用"></a>Redux-saga 的使用</h2>
<h3 id="安裝-Redux-saga"><a class="header-anchor" href="#安裝-Redux-saga"></a>安裝 Redux-saga</h3>
<p>安裝的部分相信大家都很熟悉了，可以透過 npm 或 yarn 的方式安裝</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save redux-saga</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add redux-saga</span><br></pre></td></tr></table></figure>
<p>然後再往下之前，我們先將流程順過一次</p>
<h3 id="理解加入-Redux-saga-前後的流程差異"><a class="header-anchor" href="#理解加入-Redux-saga-前後的流程差異"></a>理解加入 Redux-saga 前後的流程差異</h3>
<p>將 redux-saga 加入到 redux 之前，我們先把 redux 更新同步資料的流程再順過一次:</p>
<p>這裡把重點放在 React component dispatch 一個 action 到 reducer 中。</p>
<ol>
<li>在 component 中透過 <code>connect</code> 連接到 redux store</li>
<li>透過 <code>mapDispatchToProps</code> <code>dispatch</code> 一個 <code>action</code> 到 <code>reducer</code> 中，並依照 action type 執行對應的 <code>state</code> 更新流程。</li>
</ol>
<p>而加入 redux-saga 之後的流程：</p>
<ol>
<li>在 component 中透過 <code>connect</code> 連接到 redux store</li>
<li><strong>透過 <code>mapDispatchToProps</code> <code>dispatch</code> 一個 <code>action</code> 到 redux-saga 中，然後  在 redux-saga 中依照 action type 執行對應的非同步流程(例如: call api)後，再把資料往 <code>reducer</code> 中觸發對應的 <code>state</code> 更新流程。</strong></li>
</ol>
<p>上述流程的差異一定要先弄懂，才不會在實作的時候覺得卡住哦！</p>
<h3 id="模擬一個非同步流程-兩秒後變更卡片元件的內容"><a class="header-anchor" href="#模擬一個非同步流程-兩秒後變更卡片元件的內容"></a>模擬一個非同步流程: 兩秒後變更卡片元件的內容</h3>
<p>這裡為了可以更加了解完整整個 Redux 加入 redux-saga 的流程。</p>
<p>所以撰寫了一個範例，並且從建置 Redux 開始一一了解。</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/clever-brattain-meo48?file=/src/store/reducers/rootReducer.js">點擊前往</a>。</p>
<p>首先是這個範例的資料結構:</p>
<p><img src="https://i.imgur.com/s8YlBzM.png" alt=""></p>
<ul>
<li>components: 管理 Card 元件</li>
<li>store:
<ul>
<li>reducers: 管理 reducer，並依據 action type 更新 state</li>
<li>sagas: 管理非同步流程，從 React component 中先 dispatch 到 middleware 中，處理完非同步流程後再 dispatch 到 reducer 中。</li>
</ul>
</li>
</ul>
<h4 id="建立一個-Card-元件"><a class="header-anchor" href="#建立一個-Card-元件"></a>建立一個 Card 元件</h4>
<p>建立元件相信大家都很熟悉了，所以不再多做贅述:</p>
<p>稍微需要提的是這裡透過前面篇幅學到的 styled componet 方式設定樣式的部分。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CardDiv</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  width: 200px;</span></span><br><span class="line"><span class="string">  border: 1px solid #8d8d8d;</span></span><br><span class="line"><span class="string">  border-radius: 10px;</span></span><br><span class="line"><span class="string">  margin: 0 auto;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Card</span> = (<span class="params">props</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">CardDiv</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">className</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;props.person.name&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;age&quot;</span>&gt;</span>&#123;props.person.age&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;habbit&quot;</span>&gt;</span>&#123;props.person.habbit&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">CardDiv</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Card</span>;</span><br></pre></td></tr></table></figure>
<h4 id="接著，安裝、引入-Redux、建立-reducer"><a class="header-anchor" href="#接著，安裝、引入-Redux、建立-reducer"></a>接著，安裝、引入 Redux、建立 reducer</h4>
<p>安裝 Redux 的部分不多提，這邊直接看看引入與建立 reducer 檔案:</p>
<p>首先先建立 reducer：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  <span class="attr">person</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Bill&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="attr">habbit</span>: <span class="string">&quot;Read comic books&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">rootReducer</span> = (<span class="params">state = initialState, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;changeCardContent&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">person</span>: action.<span class="property">payload</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>接著引入 Redux，並將 reducer 傳入:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; rootReducer &#125; <span class="keyword">from</span> <span class="string">&quot;./reducers/rootReducer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">createStore</span>(rootReducer);</span><br></pre></td></tr></table></figure>
<p>連接 Redux 與 React component，以 class-based component 為例:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Card</span> <span class="keyword">from</span> <span class="string">&quot;./components/Card&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用 redux-saga 模擬非同步流程<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>點擊按鈕後兩秒變更卡片的內容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Card</span> <span class="attr">person</span>=<span class="string">&#123;this.props.person&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>Click Me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">person</span>: state.<span class="property">person</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps)(<span class="title class_">App</span>);</span><br></pre></td></tr></table></figure>
<p>到這裡沒意外的話，應該可以成功將 Redux 中的 <code>person</code> 的資料渲染到畫面上囉!</p>
<h4 id="重頭戲上場，加入-redux-saga-middleware"><a class="header-anchor" href="#重頭戲上場，加入-redux-saga-middleware"></a>重頭戲上場，加入 redux-saga middleware</h4>
<p>完成前置作業後，接著我們將 redux-saga 這個 middleware 加入到 Redux 中了！</p>
<p>還記得剛剛提到的關於流程變更的那個部分嗎?</p>
<p><strong>「透過 mapDispatchToProps dispatch 一個 action 到 redux-saga 中，然後 在 redux-saga 中依照 action type 執行對應的非同步流程(例如: call api)後，再把資料往 reducer 中觸發對應的 state 更新流程。」</strong></p>
<p>這裡我們先在 sagas 資料夾中建立一個 index.js 檔案，並設定好<strong>讓 React component 可以 dispatch 到 saga middleware 中的 action 與要 dipatch 到 reducer 中的 action</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sagas/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; delay, put, takeEvery, all &#125; <span class="keyword">from</span> <span class="string">&quot;redux-saga/effects&quot;</span>;</span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">changeCardContentHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;redux-saga works and execute the generator&quot;</span>);</span><br><span class="line">  <span class="comment">// 模擬 call api 兩秒後資料回來</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">delay</span>(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// disptach an action to reducer</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">put</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;changeCardContent&quot;</span>,</span><br><span class="line">    <span class="attr">payload</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;Charlie&quot;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">13</span>,</span><br><span class="line">      <span class="attr">habbit</span>: <span class="string">&quot;Play ball&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// receive an action from react component</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">watchChangeCardContentHandlerSaga</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">takeEvery</span>(<span class="string">&quot;CHANGE_CARD_CONTENT&quot;</span>, changeCardContentHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span>* <span class="title function_">rootSaga</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">all</span>([<span class="title function_">watchChangeCardContentHandlerSaga</span>()]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這裡有一些關於 redux-saga 中的方法相向會讓人一頭霧水，這部分稍後會提到，我們先繼續把流程建置好。</p>
<p>接著我們要在 redux 中引入 redux-saga，並運行起來：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; rootReducer &#125; <span class="keyword">from</span> <span class="string">&quot;./reducers/rootReducer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入 redux-saga</span></span><br><span class="line"><span class="keyword">import</span> createSagaMiddleware <span class="keyword">from</span> <span class="string">&quot;redux-saga&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; rootSaga &#125; <span class="keyword">from</span> <span class="string">&quot;./sagas&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立 sagaMiddleware 並引入到 redux 中</span></span><br><span class="line"><span class="keyword">const</span> sagaMiddleware = <span class="title function_">createSagaMiddleware</span>();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">createStore</span>(rootReducer, <span class="title function_">applyMiddleware</span>(sagaMiddleware));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 運行我們設定的 saga generator</span></span><br><span class="line">sagaMiddleware.<span class="title function_">run</span>(rootSaga);</span><br></pre></td></tr></table></figure>
<p>到這裡已經完成 redux-saga 的建置，最後一步就是在 React component 中 <code>dispatch</code> 一個 <code>action</code> 到 middleware 中囉</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Card</span> <span class="keyword">from</span> <span class="string">&quot;./components/Card&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用 redux-saga 模擬非同步流程<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>點擊按鈕後兩秒變更卡片的內容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Card</span> <span class="attr">person</span>=<span class="string">&#123;this.props.person&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        // 觸發事件</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.props.changeCardContentHandler&#125;</span>&gt;</span>Click Me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">person</span>: state.<span class="property">person</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">changeCardContentHandler</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// dipatch an action to redux-saga middleware</span></span><br><span class="line">      <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;CHANGE_CARD_CONTENT&quot;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="title class_">App</span>);</span><br></pre></td></tr></table></figure>
<p>順利的應該可以看到成功模擬非同步流程的結果了！</p>
<p>不過還記得剛剛在過程中使用到的那些方法嗎?</p>
<ul>
<li>Middleware API
<ul>
<li><code>createSagaMiddleware(options)</code></li>
<li><code>middleware.run(saga, ...args)</code></li>
</ul>
</li>
<li>Effect creators
<ul>
<li><code>put(action)</code></li>
<li><code>takeEvery(pattern, saga, ...args)</code></li>
<li><code>delay(ms, [val])</code></li>
</ul>
</li>
<li>Effect combinators
<ul>
<li><code>all([...effects])</code></li>
</ul>
</li>
</ul>
<p>這些是 redux-saga 提供的方法，透過這些方法我們才可以完成整個 middleware 的建置，接著一一來理解這些輔助函式的定義吧!</p>
<h4 id="Middleware-API-createSagaMiddleware-options"><a class="header-anchor" href="#Middleware-API-createSagaMiddleware-options"></a>Middleware API: <code>createSagaMiddleware(options)</code></h4>
<p>建立 Redux middleware 並將 sagas 與 Redux Store 做連接。</p>
<h4 id="Middleware-API-middleware-run-saga-args"><a class="header-anchor" href="#Middleware-API-middleware-run-saga-args"></a>Middleware API: <code>middleware.run(saga, ...args)</code></h4>
<p>運行 saga，只能在 <code>applyMiddleware</code> 後的階段運行才有效。</p>
<h4 id="Effect-creators-put-action"><a class="header-anchor" href="#Effect-creators-put-action"></a>Effect creators: <code>put(action)</code></h4>
<p>如同 Redux 中的 dispatch，會 disptach 一個 action 到 reducer 中執行後續的 state 更新</p>
<h4 id="Effect-creators-takeEvery-pattern-saga-args"><a class="header-anchor" href="#Effect-creators-takeEvery-pattern-saga-args"></a>Effect creators: <code>takeEvery(pattern, saga, ...args)</code></h4>
<p>讓 React component 可以 dispatch 一個 action 到 middleware 中，並直接符合 pattern 時的第二個參數，也就是要執行的函式。</p>
<h4 id="Effect-creators-delay-ms-val"><a class="header-anchor" href="#Effect-creators-delay-ms-val"></a>Effect creators: <code>delay(ms, [val])</code></h4>
<p>用於延遲程式流程執行，單位為毫秒(ms)。</p>
<h4 id="Effect-combinators-all-effects"><a class="header-anchor" href="#Effect-combinators-all-effects"></a>Effect combinators: <code>all([...effects])</code></h4>
<p>可同時運行多個 Effects，並等待這些 Effects 執行完成後才會繼續流程。</p>
<p>關於 redux-saga 的基礎使用學習就到這裡囉，明天見</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://redux-saga.js.org/">redux-saga</a></li>
<li><a href="https://redux-saga.js.org/docs/api/">API Reference</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Redux 非同步資料處理 - 使用 Redux Thunk</title>
    <url>/2020/10/09/Redux-%E9%9D%9E%E5%90%8C%E6%AD%A5%E8%B3%87%E6%96%99%E8%99%95%E7%90%86-%E4%BD%BF%E7%94%A8-Redux-Thunk/</url>
    <content><![CDATA[<h1 id="Redux-非同步資料處理-使用-Redux-Thunk"><a class="header-anchor" href="#Redux-非同步資料處理-使用-Redux-Thunk"></a>Redux 非同步資料處理 - 使用 Redux Thunk</h1>
<p>在 Redux 中我們只能處理<strong>同步的資料</strong>，並<strong>不允許處理非同步的邏輯</strong>。</p>
<span id="more"></span>
<p>但是在實務上我們常常需要透過串接 api 的方式請求一個非同步的資料到我們的專案中使用，這時候應該怎麼辦呢?</p>
<p>這時候有幾個方式可以選擇，而今天要學習的是透過 Redux Thunk Middleware 來處理非同步相關的邏輯。</p>
<p>不過在這之前，我們需要先了解 <strong>Middleware</strong> 的定義，以及我們是在什麼時間點運用它。</p>
<p>讓我們接著下去學習吧!</p>
<h2 id="Middleware-是什麼"><a class="header-anchor" href="#Middleware-是什麼"></a>Middleware 是什麼?</h2>
<p>Middleware 的中文意思是「中介軟體」、「中介層」，而在專案開發中，我們可以在特定的流程中透過 Middleware 的方式<strong>額外進行一些處理後才往下進行後續的流程。</strong></p>
<p>這邊舉個大家常用的套件， <a href="https://github.com/axios/axios">axios</a>，相信大家不會很陌生，在串接 api 時我們很常使用到。</p>
<p>而 axios 中有一個 <a href="https://github.com/axios/axios#interceptors">Interceptors</a> 就是一個 middleware 的例子，我們先看看它的使用方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Add a request interceptor</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something before request is sent</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something with request error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a response interceptor</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// Any status code that lie within the range of 2xx cause this function to trigger</span></span><br><span class="line">    <span class="comment">// Do something with response data</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// Any status codes that falls outside the range of 2xx cause this function to trigger</span></span><br><span class="line">    <span class="comment">// Do something with response error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>透過 <code>interceptors</code> 允許我們在<strong>發送請求、接收請求時額外做一些想要的處理之後，才將請求發送、接收。</strong></p>
<p>接著我們將這個概念套用到 Redux 中，剛剛提到由於 Redux 本身不能處理非同步的邏輯，所以這裡就需要透過 middleware 的方式讓我們可以撰寫非同步的邏輯。</p>
<p>首先來看看在 Redux 中如何使用 middlelware，我們設定一個情境:建立一個用來取得目前 dispatch 的 action 與下一個 state 的 log 。</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/charming-cookies-g551j?file=/src/App.js">點擊前往</a>。</p>
<p>先建立一個 <code>logger</code> 的 middleware:</p>
<p>其中 <code>next</code> 用來將 <code>action</code> 交給下一個 middleware 或者是 reducer，執行後續的處理。</p>
<p>而這裡我們可以透過 <code>store.getState()</code> 取得目前 Redux 中 state 儲存的狀態。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// middleware/index.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">logger</span> = store =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">next</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;middleware&#x27;</span>, action);</span><br><span class="line">      <span class="keyword">const</span> result = <span class="title function_">next</span>(action);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;middleward next state&#x27;</span>, store.<span class="title function_">getState</span>());</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>然後我們要調用 redux 的 <code>applyMiddleware</code>，並作為 <code>creatStore</code> 的參數:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">// ...略</span></span><br><span class="line"><span class="keyword">import</span> &#123; logger &#125; <span class="keyword">from</span> <span class="string">&quot;./store/middleware&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(rootReducer, <span class="title function_">applyMiddleware</span>(logger));</span><br></pre></td></tr></table></figure>
<p>此時我們已經完成 middleware 的設定與應用了。</p>
<p>為了方便觀察，這邊我們額外加上一個點擊事件：</p>
<p>App Component:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;props.changeText&#125;</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>請打開 console 查看<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">text</span>: state.<span class="property">text</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">changeText</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;CHANGETEXTHANDLER&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="title class_">App</span>);</span><br></pre></td></tr></table></figure>
<p>rootReducer Component:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&quot;Hello Redux!&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">rootReducer</span> = (<span class="params">state = initialState, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;CHANGETEXTHANDLER&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&quot;Change text!&quot;</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>當我們點擊文字時，會得到如下的結果：</p>
<p><img src="https://i.imgur.com/ouYb4iE.png" alt=""></p>
<p>以上是使用 middleware 的方式，接著我們要來看如何使用 Redux Thunk Middleware 囉</p>
<h2 id="使用-Redux-Thunk-Middleware"><a class="header-anchor" href="#使用-Redux-Thunk-Middleware"></a>使用 Redux Thunk Middleware</h2>
<p>這邊我們提供一個改寫上方測試範例的例子，<a href="https://codesandbox.io/s/muddy-dawn-jfd9z?file=/src/index.js">點擊前往</a>。</p>
<p>首先我們需要先安裝這個<a href="https://github.com/reduxjs/redux-thunk">套件</a>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install redux-thunk</span><br></pre></td></tr></table></figure>
<p>接著我們要引入這個套件作為我們的 middleware:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...略</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&quot;redux-thunk&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(rootReducer, <span class="title function_">applyMiddleware</span>(logger, thunk));</span><br></pre></td></tr></table></figure>
<p>建立一個 actions 資料夾用來管理 actions:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// action/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">changeTextHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;CHANGETEXTHANDLER&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">asyncChangeTextHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 模擬非同步行為</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(<span class="title function_">changeTextHandler</span>());</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>將 actions 給予統一名稱 actionCreators，取代掉前一個範例 dispatch 的 action</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionCreators <span class="keyword">from</span> <span class="string">&quot;./store/action&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;props.changeText&#125;</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>請打開 console 查看<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">text</span>: state.<span class="property">text</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">changeText</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(actionCreators.<span class="title function_">asyncChangeTextHandler</span>());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="title class_">App</span>);</span><br></pre></td></tr></table></figure>
<p>這個時候當我們再次點擊文字時，應該會發現文字在延遲兩秒之後才會改變，而這也代表我們成功設定了一個非同步邏輯的測試範例囉。</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<p>明天見</p>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://github.com/reduxjs/redux-thunk">Redux Thunk Middleware</a></li>
<li><a href="https://redux.js.org/advanced/middleware">Redux Middleware</a></li>
<li><a href="https://github.com/axios/axios">axios</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Setting up for TDD</title>
    <url>/2022/06/24/Setting-up-for-TDD/</url>
    <content><![CDATA[<p>透過 <a href="https://lmiller1990.github.io/vue-testing-handbook/v3/">Vue Testing HandBook</a> + <a href="https://test-utils.vuejs.org/">Vue Test Utils</a> 學習如何在 vue3 中撰寫單元測試。</p>
<h1 id="Setting-up-for-TDD"><a class="header-anchor" href="#Setting-up-for-TDD"></a>Setting up for TDD</h1>
<h2 id="prerequisite"><a class="header-anchor" href="#prerequisite"></a>prerequisite</h2>
<p>專案採用 vite 建立，但由於不採用 vitest 作為框架的單元測試工具，這邊要額外以下工具到專案中：</p>
<ol>
<li><a href="https://jestjs.io/">jest</a></li>
<li><a href="https://www.npmjs.com/package/jest-environment-jsdom">jest-environment-jsdom</a></li>
<li><a href="https://github.com/vuejs/vue-jest">vue3-jest</a></li>
<li><a href="https://www.npmjs.com/package/babel-jest">babel-jest</a></li>
<li><a href="https://test-utils.vuejs.org/">test-utils</a></li>
<li><a href="https://www.npmjs.com/package/@babel/preset-env">@babel/preset-env</a></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev jest</span><br><span class="line">npm install --save-dev jest-environment-jsdom</span><br><span class="line">npm install --save-dev @vue/vue3-jest@28 (參考 repo 當下最新版本而定)</span><br><span class="line">npm install --save-dev babel-jest </span><br><span class="line">npm install --save-dev npm install --save-dev @vue/test-utils@next</span><br><span class="line">npm install --save-dev @babel/preset-env</span><br></pre></td></tr></table></figure>
<p>還要設定以下的 config:</p>
<h3 id="jest-config-js"><a class="header-anchor" href="#jest-config-js"></a>jest.config.js</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以透過 jest --init 設定基礎選項</span></span><br><span class="line"><span class="comment">// 以下為主要設定內容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// The test environment that will be used for testing</span></span><br><span class="line"><span class="attr">testEnvironment</span>: <span class="string">&#x27;jsdom&#x27;</span>,</span><br><span class="line"><span class="comment">// A map from regular expressions to paths to transformers</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">transform</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;^.+\\.vue$&#x27;</span>: <span class="string">&#x27;@vue/vue3-jest&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;^.+\\js$&#x27;</span>: <span class="string">&#x27;babel-jest&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module</span></span><br><span class="line"><span class="attr">moduleNameMapper</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;^@/(.*)$&#x27;</span>: <span class="string">&#x27;&lt;rootDir&gt;/src/$1&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// An array of file extensions your modules use    </span></span><br><span class="line"><span class="attr">moduleFileExtensions</span>: [<span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;jsx&#x27;</span>, <span class="string">&#x27;ts&#x27;</span>, <span class="string">&#x27;tsx&#x27;</span>, <span class="string">&#x27;node&#x27;</span>],</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
<h3 id="babel-config-js"><a class="header-anchor" href="#babel-config-js"></a>babel.config.js</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>] &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="撰寫第一個測試-for-Greeting-元件"><a class="header-anchor" href="#撰寫第一個測試-for-Greeting-元件"></a>撰寫第一個測試 for <code>Greeting</code> 元件</h2>
<p>測試重點：</p>
<ol>
<li>可以成功渲染 <code>Greeting</code> 元件</li>
<li>確定 <code>greeting</code> 的值為 <code>&quot;Vue and TDD&quot;</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Greeting.spec.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/test-utils&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Greeting</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Greeting.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Greeting.vue&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;renders a greeting&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = <span class="title function_">mount</span>(<span class="title class_">Greeting</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>(wrapper.<span class="title function_">text</span>()).<span class="title function_">toMatch</span>(<span class="string">&#x27;Vue and TDD&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Greeting.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123; greeting &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Greeting&#x27;,</span><br><span class="line"></span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      greeting: &#x27;Vue and TDD&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>unit test</category>
        <category>前端框架單元測試</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>unit test</tag>
        <tag>前端框架單元測試</tag>
      </tags>
  </entry>
  <entry>
    <title>createRef 學起來，focus 元素不麻煩</title>
    <url>/2020/09/29/createRef-%E5%AD%B8%E8%B5%B7%E4%BE%86%EF%BC%8Cfocus-%E5%85%83%E7%B4%A0%E4%B8%8D%E9%BA%BB%E7%85%A9/</url>
    <content><![CDATA[<h1 id="createRef-學起來，focus-元素不麻煩"><a class="header-anchor" href="#createRef-學起來，focus-元素不麻煩"></a>createRef 學起來，focus 元素不麻煩</h1>
<p>在開發的時候，我們常常會遇到一個需求，<strong>當點擊某段文字或區塊時，可以聚焦(focus) 在 input 元素上。</strong></p>
<span id="more"></span>
<p>而這只是其中一個我們常遇到的開發情境，這時候我們應該怎麼做呢? 我們可以透過幾種方式來達到這個需求:</p>
<ol>
<li>透過原生 Web API 的方式</li>
<li>在 class-based component 中使用 <code>createRef()</code></li>
<li>在 function component 中使用 <code>useRef()</code></li>
</ol>
<p>而在 function component 中使用 <code>useRef()</code> 的方式則留待學習 React hooks 的時候學習囉!</p>
<p>接著，讓我們來看看怎麼使用吧!</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/wizardly-bush-jdxz7?file=/src/App.js">點擊前往</a>。</p>
<h2 id="透過原生-Web-API-的方式"><a class="header-anchor" href="#透過原生-Web-API-的方式"></a>透過原生 Web API 的方式</h2>
<p>在 React 中由於就是在寫 JavaScript，所以可以透過原生 Web API的方式取得 dom 元素，並且透過 <code>focus()</code> 的方式 focus 在元素上。</p>
<p>這邊我們透過前面提到的情境，點擊某段文字時，可以聚焦(focus) 在 <code>input</code> 元素上的方式來看看怎麼達成。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  focusInputByWebAPI = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#input-1&quot;</span>).<span class="title function_">focus</span>();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;this.focusInputByWebAPI&#125;</span>&gt;</span>原生 Web API - 點擊本段文字<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;input-1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>
<p>在原生 JS 中我們可以透過幾種選取 dom 的方式來取得 dom，而 <code>document.querySelector(&quot;#input-1&quot;)</code> 就是其中一種，我們透過這個方式取得後在呼叫 <code>focus</code> 方法來聚焦在 input 元素上。</p>
<h2 id="在-class-based-component-中使用-callback-refs-createRef"><a class="header-anchor" href="#在-class-based-component-中使用-callback-refs-createRef"></a>在 class-based component 中使用 callback refs, createRef()</h2>
<p>前面提到的是一種可以實現的方式，但是其實 React 有額外提供了其他種選擇給我們使用，而這部分依據版本的不同有著不同的用法：</p>
<h3 id="在-React-16-3-版之前"><a class="header-anchor" href="#在-React-16-3-版之前"></a>在 React 16.3 版之前</h3>
<p>透過在 ref 寫一個 callback，<strong>將 React component 的 instance 或 HTML DOM 作為他的參數傳入，就可以透過這種方式儲存在別的地方使用</strong>。</p>
<p>這種方式<strong>透過在這個 instance 綁上 input 元素</strong>，就可以在點擊事件被觸發時，使用這個元素</p>
<p>我們將上方的 code 改寫:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  focusInputByRefCallback = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">inputEl</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;this.focusInputByRefCallback&#125;</span>&gt;</span>Class-besed Componet: ref callbacks - 點擊本段文字<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;</span> <span class="attr">el</span> =&gt;</span> this.inputEl = el &#125; type=&quot;text&quot; name=&quot;&quot; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>
<h3 id="在-React-16-3-版之後"><a class="header-anchor" href="#在-React-16-3-版之後"></a>在 React 16.3 版之後</h3>
<p>在這個版本之後， React 提供了一個方式可以更簡便並且管理這些需要使用 ref 的元素：透過 createRef()，透過這個方式<strong>會建立一個Ref，並藉由 ref 屬性被寫在 React element 中而可以取得這些元素。</strong></p>
<p>而這些元素我們可以<strong>透過 current 中取得</strong>，來改寫一下上面的例子：</p>
<p>這邊需要注意一個細節，<strong>一定要透過在 constructor 中調用 React.createRef() 的方式，才可以取得元素。</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">myRef</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  focusInputBycreateRef = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">myRef</span>.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;this.focusInputBycreateRef&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Class-besed Componet: createRef - 點擊本段文字</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>
<p>以上就是今天對於 createRef 的學習，明天繼續努力！</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://zh-hant.reactjs.org/docs/refs-and-the-dom.html">Refs 和 DOM</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Styled Component</title>
    <url>/2020/09/26/Styled-Component/</url>
    <content><![CDATA[<h1 id="Styled-Component"><a class="header-anchor" href="#Styled-Component"></a>Styled Component</h1>
<p>今天要學習的部分是在 React 中用來管理元件(Component)樣式(styling)的方式: styled component 與 CSS modules，而這兩種方式在使用上也不太一樣:</p>
<span id="more"></span>
<ul>
<li>styled component: 是一套讓我們可以在 <strong>JSX 中撰寫 css</strong> 的 libaray(CSS-In-JS)</li>
<li>CSS modules: 透過<strong>修改 webpack 的設定</strong>，將 css 的 selector <strong>當成是 module 的 property 來使用</strong></li>
</ul>
<p>讓我們趕緊看看怎麼使用吧!</p>
<h2 id="標籤樣板字面值-tagged-template-literal"><a class="header-anchor" href="#標籤樣板字面值-tagged-template-literal"></a>標籤樣板字面值(tagged template literal)</h2>
<p>由於 Styled Component 的撰寫方式是使用了 ES6 推出的功能: <strong>標籤樣板字面值(tagged template literal)</strong>，所以我們先來了解一下其使用的方式吧。</p>
<p>首先先看看在 MDN 的定義:</p>
<blockquote>
<p>標籤樣板字面值是一種更高級的樣板字面值形式，允許你透過標籤函數操作樣板字面值的輸出。</p>
</blockquote>
<p>什麼是標籤韓式操作樣板字面值？相信閱讀起來一定不是那麼好理解，所以這邊我們首先先需要記住的部分是它的一些規則：</p>
<ul>
<li>標籤函數的第一個參數是一字串陣列</li>
<li>其餘參數則是處理過的表達式</li>
</ul>
<p>在文件中提到了這兩個規則，接著，讓我們搭配一些簡單的範例來了解：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">arr, params</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo<span class="string">`Hello tagged template literal!`</span>;</span><br></pre></td></tr></table></figure>
<p><strong>在函式名稱後接上樣板字面值的設定方式，就是前面提到的標籤函數</strong>，這邊可以得到輸出的結果如下:</p>
<p><img src="https://i.imgur.com/PfB5VMh.png" alt=""></p>
<p>這也符合上述描述到的第一個規則：「標籤函數的第一個參數是一字串陣列」，所以 <code>arr</code> 會得到一個陣列，而 <code>params</code> 此時會是 <code>undefined</code> 。</p>
<p>接著，讓我們在修改上述的範例來看看其他的變化：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> variables = <span class="string">&#x27;tagged template literal!&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">arr, params</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo<span class="string">`Hello <span class="subst">$&#123; variables &#125;</span>`</span>;</span><br></pre></td></tr></table></figure>
<p>與前一個範例不同的是，這邊我們在標籤函式中寫入了一個變數 <code>variables</code>，此時在使用上會有一個很重要的差異: <strong>字串陣列會儲存不是變數的字串值，並將是變數的部分作為其他參數的值。</strong> 所以會得到如下方的結果:</p>
<p><img src="https://i.imgur.com/ofBIxn4.png" alt=""></p>
<p>關於使用標籤樣板字面值(tagged template literal)的方式就到這裡，接著我們把主題拉回到 styled component 吧</p>
<h2 id="Styled-Component-初探與使用"><a class="header-anchor" href="#Styled-Component-初探與使用"></a>Styled Component 初探與使用</h2>
<p>關於 Styled Component 的文件可以前往 <a href="https://styled-components.com/docs/basics">Styled Component</a> 查看更多細節，這邊就先來學習如何使用。</p>
<p>首先是安裝的部分，其實也很簡單，我們可以透過 npm 或者是 yarn 的方式安裝：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save styled-components</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add styled-components</span><br></pre></td></tr></table></figure>
<p>Styled Component 也有提供 CDN 的使用方式:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/styled-components/dist/styled-components.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>接著，根據範例來學習吧!!</p>
<p>這邊有一個很重要的觀念: <strong>「撰寫 Styled Component 會直接建立出一個 React component 出來，而這個 component 是一個具有開發者設定樣式的元件。」</strong> 這代表我們可以在使用像是 <code>props</code> 來做額外的操作。</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/vigorous-volhard-vhmdl?file=/src/App.js">點擊前往</a>。</p>
<h3 id="基礎使用"><a class="header-anchor" href="#基礎使用"></a>基礎使用</h3>
<p>在程式碼中設定了 <code>Title</code>, <code>Wrapper</code> 兩個 React component，而寫法就如同一開始介紹的部分，是使用標籤樣板字面值(tagged template literal)撰寫，並在要使用這兩個樣式的區塊，像是使用 React component 般寫入即可。</p>
<p>例如底下這段程式碼，建立兩個 styled component:</p>
<ol>
<li><code>Title</code>: 設定了 <code>h1</code> 的樣式。</li>
<li><code>Wrapper</code>: 設定了 <code>section</code> 的樣式。</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ExampleOne.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">// 引入 styled-components</span></span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立 styled component</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Title</span> = styled.<span class="property">h1</span><span class="string">`</span></span><br><span class="line"><span class="string">  font-size: 1.5em;</span></span><br><span class="line"><span class="string">  text-align: center;</span></span><br><span class="line"><span class="string">  color: palevioletred;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立 styled component</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Wrapper</span> = styled.<span class="property">section</span><span class="string">`</span></span><br><span class="line"><span class="string">  padding: 4em;</span></span><br><span class="line"><span class="string">  background: papayawhip;</span></span><br><span class="line"><span class="string">  width: 60%;</span></span><br><span class="line"><span class="string">  margin: 0 auto;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ExampleOne</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Wrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Title</span>&gt;</span>Hello Styled components!<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Wrapper</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ExampleOne</span>;</span><br></pre></td></tr></table></figure>
<h3 id="依據條件做不同的樣式渲染"><a class="header-anchor" href="#依據條件做不同的樣式渲染"></a>依據條件做不同的樣式渲染</h3>
<p>接著，還記得剛剛說的嗎? styled component 會是建立一個 React component，所以可以額外做一些像是透過<strong>判斷條件後選擇要設定的樣式等設定。</strong></p>
<p>這裡我們可以使用 <code>props</code> 的方式來達成需求：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      // ...略</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>條件判斷渲染樣式，元件: ExampleTwo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ExampleTwo</span> <span class="attr">primary</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ExampleTwo/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CustomButton</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">  font-size: 1em;</span></span><br><span class="line"><span class="string">  margin: 1em;</span></span><br><span class="line"><span class="string">  padding: 0.25em 1em;</span></span><br><span class="line"><span class="string">  border: 2px solid palevioletred;</span></span><br><span class="line"><span class="string">  border-radius: 3px;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  background: <span class="subst">$&#123;(props) =&gt; (props.primary ? <span class="string">&quot;palevioletred&quot;</span> : <span class="string">&quot;white&quot;</span>)&#125;</span>;</span></span><br><span class="line"><span class="string">  color: <span class="subst">$&#123;(props) =&gt; (props.primary ? <span class="string">&quot;white&quot;</span> : <span class="string">&quot;palevioletred&quot;</span>)&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ExampleTwo</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">CustomButton</span> <span class="attr">primary</span>=<span class="string">&#123;props.primary&#125;</span>&gt;</span>Custom Button<span class="tag">&lt;/<span class="name">CustomButton</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ExampleTwo</span>;</span><br></pre></td></tr></table></figure>
<p>透過 <code>props</code> 得到的 <code>primary</code> 的值來判斷提供何種樣式，當判斷為:</p>
<ul>
<li><code>false</code>: <code>background: &quot;white&quot;</code>, <code>color: &quot;palevioletred&quot;</code>。</li>
<li><code>true</code>: <code>background: &quot;palevioletred&quot;</code>, <code>color: &quot;white&quot;</code>。</li>
</ul>
<h3 id="擴展-Extending-樣式"><a class="header-anchor" href="#擴展-Extending-樣式"></a>擴展(Extending)樣式</h3>
<p>我們也可以透過 styled component 的方式，在<strong>基於一個元件上擴展樣式，建立一個全新的元件出來。</strong></p>
<p>這個情境最簡單的例子來說，就好像當我們有兩個架構一樣的按鈕(Button)，而差別僅僅只在於背景顏色、文字顏色的差異時，這個時候 Styled Component 也可以做到這樣的需求:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Button</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">  width: auto;</span></span><br><span class="line"><span class="string">  padding: 10px;</span></span><br><span class="line"><span class="string">  margin-right: 10px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">BookingButton</span> = <span class="title function_">styled</span>(<span class="title class_">Button</span>)<span class="string">`</span></span><br><span class="line"><span class="string">  background: palevioletred;</span></span><br><span class="line"><span class="string">  color: white;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CancelButton</span> = <span class="title function_">styled</span>(<span class="title class_">Button</span>)<span class="string">`</span></span><br><span class="line"><span class="string">  background: blue;</span></span><br><span class="line"><span class="string">  color: white;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ExampleThree</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Button</span>&gt;</span>基礎樣式的 Button<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">BookingButton</span>&gt;</span>擴展樣式的 BookingButton<span class="tag">&lt;/<span class="name">BookingButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">CancelButton</span>&gt;</span>擴展樣式的 CancelButton<span class="tag">&lt;/<span class="name">CancelButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ExampleThree</span>;</span><br></pre></td></tr></table></figure>
<p>透過 <code>styled(Button)</code> 的方式，我們可以<strong>將一個定義好的 Styled Component 作為另一個 Styled Component 的基礎樣式，並且再額外擴展屬於自己的樣式。</strong></p>
<p><code>Button</code> 作為這三個按鈕的基礎樣式，而 <code>BookingButton</code>、<code>CancelButton</code> 則是基於這個 <code>Button</code> 的樣式再擴展出自己的樣式(背景顏色、文字顏色)。</p>
<h3 id="scss-like-的撰寫風格"><a class="header-anchor" href="#scss-like-的撰寫風格"></a>scss-like 的撰寫風格</h3>
<p>一定有人會想問，<strong>可以在 styled component 中寫類似 scss 這種可以巢狀設定樣式的設定嗎？</strong></p>
<p>答案是可以的！</p>
<p>在 Styled Component 可以使用如同 scss 巢狀設定樣式的方式：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ExampleFour/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">BookingSection</span> = styled.<span class="property">section</span><span class="string">`</span></span><br><span class="line"><span class="string">  width: 500px;</span></span><br><span class="line"><span class="string">  height: 200px;</span></span><br><span class="line"><span class="string">  margin: 0 auto;</span></span><br><span class="line"><span class="string">  border: 1px solid #8d8d8d;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  .booking-btn &#123;</span></span><br><span class="line"><span class="string">    background: palevioletred;</span></span><br><span class="line"><span class="string">    color: white;</span></span><br><span class="line"><span class="string">    padding: 10px;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ExampleFour</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">BookingSection</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;booking-btn&quot;</span>&gt;</span>這是一個按鈕<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">BookingSection</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ExampleFour</span>;</span><br></pre></td></tr></table></figure>
<p>在 <code>BookingSection</code> 的樣式中我們額外透過巢狀設定樣式的方式，設定了 <code>className</code> 為 <code>booking-btn</code> 的樣式，可以看到 <code>BookingSection</code> 中的 <code>button</code> 一樣可以使用到這個樣式。</p>
<h3 id="動畫的撰寫設定"><a class="header-anchor" href="#動畫的撰寫設定"></a>動畫的撰寫設定</h3>
<p>Styled Component 提供 <code>keyframes</code> helper 的方式來處理動畫的部分，使用方式與原生 css 相似：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ExampleFive/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> styled, &#123; keyframes &#125; <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rotate = keyframes<span class="string">`</span></span><br><span class="line"><span class="string">  from &#123;</span></span><br><span class="line"><span class="string">    transform: rotate(0deg);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  to &#123;</span></span><br><span class="line"><span class="string">    transform: rotate(360deg);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Rotate</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: inline-block;</span></span><br><span class="line"><span class="string">  border: solid;</span></span><br><span class="line"><span class="string">  animation: <span class="subst">$&#123;rotate&#125;</span> 2s linear infinite;</span></span><br><span class="line"><span class="string">  padding: 2rem 1rem;</span></span><br><span class="line"><span class="string">  font-size: 1.2rem;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ExampleFive</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">Rotate</span> /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ExampleFive</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>這邊需要注意的是 <code>keyframes</code> helpers 一定要提供值才可以，不然會拋出錯誤。</p>
<p>關於 Styled Component 的學習就到這裡囉</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://styled-components.com/docs/basics">Styled Component</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Template_literals">標籤樣板字面值</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>vue一個簡易驗證碼元件</title>
    <url>/2020/06/20/vue%E4%B8%80%E5%80%8B%E7%B0%A1%E6%98%93%E9%A9%97%E8%AD%89%E7%A2%BC%E5%85%83%E4%BB%B6/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/Lf6sGeC.gif" alt=""></p>
<p>這陣子剛好因為專案需求，所以需要做一個<mark>簡訊驗證碼</mark>的功能，於是就嘗試自己手刻了一個簡易的四碼輸入驗證的元件，於是順道做了個學習與開發的記錄。</p>
<span id="more"></span>
<h2 id="元件功能"><a class="header-anchor" href="#元件功能"></a>元件功能</h2>
<p>為了挑戰一下，所以稍微在製作這個元件上多做了些事情，功能如下:</p>
<ol>
<li><mark>過濾數字以外的所有字符(包含特殊字符)</mark>，僅可輸入數字。</li>
<li>如果輸入為非數字，則<mark>停留在當前欄位，直到輸入符合條件的值</mark>。</li>
<li>輸入符合的值，<mark>自動跳至下一個欄位</mark>，提高使用者體驗。</li>
<li>修改欄位中的值，會<mark>自動將值選取(select)起來</mark>，提高使用者體驗</li>
</ol>
<h2 id="實作重點記錄"><a class="header-anchor" href="#實作重點記錄"></a>實作重點記錄</h2>
<h3 id="限制欄位值的輸入長度"><a class="header-anchor" href="#限制欄位值的輸入長度"></a>限制欄位值的輸入長度</h3>
<p>這邊透過 <code>&lt;input type=&quot;text&quot; maxlength=&quot;1&quot;&gt;</code> 控制輸入的欄位值只能<strong>一位數</strong>。</p>
<p>依據 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input">MDN</a> 中提到關於 <code>maxlength</code> 的定義: 「<mark>可以限定設定輸入值的長度</mark>」。所以我們可以達成這個目的。</p>
<p>這邊需要注意的是如果 <mark>你是使用<code>&lt;input type=&quot;number&quot; maxlength=&quot;1&quot;&gt;</code>的方式的話</mark>，是無法設定 <code>maxlength</code>的，在使用上需要注意。</p>
<p>起初在開發時筆者也是使用 <code>&lt;input type=&quot;number&quot; maxlength=&quot;1&quot;&gt;</code> 的方式進行開發，但後來為什麼改成用 <code>&lt;input type=&quot;text&quot; maxlength=&quot;1&quot;&gt;</code> ，這會於稍後的採坑記錄中會提到。</p>
<h3 id="透過正規式過濾數字以外的所有字符-包含特殊字符-，僅可輸入數字"><a class="header-anchor" href="#透過正規式過濾數字以外的所有字符-包含特殊字符-，僅可輸入數字"></a>透過正規式過濾數字以外的所有字符(包含特殊字符)，僅可輸入數字</h3>
<p>由於要過濾到所有非數字的字符，所以這邊我透過<mark>正規式</mark>的方式進行欄位值的過濾。</p>
<p>如果符合則不替換，否則替換成 <code>''</code>，相信讀者都可以理解這個部分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">checkInputValue</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value.<span class="title function_">replace</span>(<span class="regexp">/[^\d]/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="透過-vue-的-refs-選取到-input-的節點"><a class="header-anchor" href="#透過-vue-的-refs-選取到-input-的節點"></a>透過 vue 的<code>$refs</code> 選取到 input 的節點</h3>
<p>在 vue 中有一個語法可以讓我們如同在寫原生 JavaScript 時使用 <code>document.querySelector</code> 的方式來選取 dom，那就是 <code>$refs</code>。</p>
<p>使用的方式也很簡單，如下方程式碼：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 請在 vue 中使用 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; :ref=&quot;index&quot; @click=&quot;getInputDom&quot;&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 略</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"> <span class="title function_">getInputDom</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$ref</span>.<span class="property">index</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>說明部分可以前往 vue 的文件查看: <a href="https://cn.vuejs.org/v2/api/#vm-refs">vue $refs</a></p>
<p>透過這個方式我們可以在觸發事件時，指定我們要取得的 dom，也就達成了功能中 2,3 點的需求。</p>
<h3 id="透過-HTMLInputElement-select-方式選取到-input-中的值"><a class="header-anchor" href="#透過-HTMLInputElement-select-方式選取到-input-中的值"></a>透過 <code>HTMLInputElement.select()</code> 方式選取到 input 中的值</h3>
<p>最後要提到的部分是如何<mark>在點擊 input 欄位時，若是欄位中有值，可以直接選取到這個值。</mark></p>
<p>這個部分就要透過 <code>HTMLInputElement.select()</code> 的語法來達成，根據 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select">MDN HTMLInputElement.select()</a> 的定義： 「可以選取到 input、 textarea 中的值」。</p>
<p>以上為這個驗證碼元件的開發重點記錄，相信讀者應該都可以理解的XD</p>
<h2 id="踩坑記錄"><a class="header-anchor" href="#踩坑記錄"></a>踩坑記錄</h2>
<p>最後是開發過程中採坑的部分，最主要遇到的坑有二：</p>
<ol>
<li>使用 input type=“number”</li>
<li>input, keyboard(keyup, keydown, keypress) 事件的觸發順序</li>
</ol>
<h3 id="使用-input-type-“number”"><a class="header-anchor" href="#使用-input-type-“number”"></a>使用 input type=“number”</h3>
<ol>
<li>首先，於前面的篇幅有提到，當 input type=“number” 時，是不支援 <code>maxlength</code> 屬性的，而這也是後續才從 MDN 上的內容查得。</li>
<li>其次是當使用 input type=“number” 時，需要注意的是 <mark>e,E,+,-,.</mark> 作為的輸入值，這些值在輸入時依然可以被輸入，並不會因為設定 type=“number” 而無法輸入，原因在搜尋後從這篇 stackoverflow 可以得到：<a href="https://stackoverflow.com/questions/31706611/why-does-the-html-input-with-type-number-allow-the-letter-e-to-be-entered-in">Why does the html input with type “number” allow the letter ‘e’ to be entered in the field?</a> 解答，這篇講的很詳細，所以就不在此多做贅述。</li>
<li>最後需要特別注意的是當 input type=“number” 時，透過 <code>e.target.value</code> 會拿到的並不是 <mark>e,E,+,-,.</mark> 這幾個值，而是<mark>空字串(<code>''</code>)</mark>，請讀者在使用時需要特別留意。至於原因則可以查看這篇 Github 上的 issue 可以得到：<a href="https://github.com/facebook/react/issues/13752">input[type=‘number’] event.target.value changes to empty string when . or , pressed and onChange not emitted when . and , used</a></li>
</ol>
<h3 id="input-keyboard-keyup-keydown-keypress-事件的觸發順序"><a class="header-anchor" href="#input-keyboard-keyup-keydown-keypress-事件的觸發順序"></a>input, keyboard(keyup, keydown, keypress) 事件的觸發順序</h3>
<p>最後要來提的是關於事件的觸發先後順序，重點就是:</p>
<ul>
<li>input 比 keyup 早</li>
<li>input 比 keydown 晚</li>
<li>input keypress 筆者認為是幾乎同時(如果有誤，麻煩留言跟我說，thanks!)</li>
</ul>
<p>如果有興趣的人可以嘗試從這段程式碼中觀察行為的差異:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--請在 vue 中使用，並透過改變事件: keypress, keyup, keydown 查看差別--&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; @input=&quot;inputEvent&quot; @keyup=&quot;keyboardEvent&quot;&gt;  </span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 略</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">inputEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;input event first!!&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">keyboardEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;keyboard event first!!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相關程式碼可以從 Github 中查看， <a href="https://github.com/penghuachen/sms-verify-demo">點擊前往</a>。</p>
<h2 id="來源"><a class="header-anchor" href="#來源"></a>來源</h2>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select">HTMLInputElement.select()</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input">The Input (Form Input) element</a></li>
<li><a href="https://github.com/facebook/react/issues/13752">input[type=‘number’] event.target.value changes to empty string when . or , pressed and onChange not emitted when . and , used</a></li>
<li><a href="https://stackoverflow.com/questions/31706611/why-does-the-html-input-with-type-number-allow-the-letter-e-to-be-entered-in">Why does the html input with type “number” allow the letter ‘e’ to be entered in the field?</a></li>
</ul>
]]></content>
      <categories>
        <category>vue vue cli3</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>i閱讀系列-無限賽局</title>
    <url>/2021/05/22/i%E9%96%B1%E8%AE%80%E7%B3%BB%E5%88%97-%E7%84%A1%E9%99%90%E8%B3%BD%E5%B1%80/</url>
    <content><![CDATA[<h1 id="無限賽局"><a class="header-anchor" href="#無限賽局"></a>無限賽局</h1>
<p><img src="https://i.imgur.com/l6F2RqA.png" alt=""></p>
<p><mark>以「無限賽局」、「無限思維」、「有限賽局」、「有限思維」貫穿全文並加以詳述</mark></p>
<span id="more"></span>
<ul>
<li>有限賽局：已知玩家、已知規則、有限時間獲得一個結果(贏、輸或者平手)</li>
<li>有限思維：在武斷的時間與武斷的標準下嘗試獲得一個結果、贏過對手，爭一個「暫時」的輸贏;或者試圖從客戶、消費者等身上獲得某些成果(能獲取多少利益)，藉此達成某些標準。思考的角度是「我」而非「我們」，不喜歡突發狀況介入</li>
<li>無限賽局：未知玩家、少許規則(允許打破規則)、無限時間以及暫時的結果</li>
<li>無限思維：思考的是如何讓組織可以永續發展，做出對社會有益的事情，並藉由夠好的品質吸引客戶、消費者願意消費(能替顧客帶來什麼好處)，思考的角度是「我們」而非「我」，已有突發狀況隨時介入的準備，並接受因為意外而發生的改變</li>
<li>舉凡教育、人生等都屬於無限賽局的一種</li>
<li>面對無限賽局，應該要思考能夠長期延續的做法，而非短期獲益的手段</li>
<li>在無限賽局中採取有限思維的做法傷害的是彼此的信任、合作。</li>
<li>以美國打越戰為例，北越以無限賽局的思維迎戰美國基於有限思維的打的作戰導致資源耗盡，不得不退出戰場</li>
<li>有限思維領導者優先關注比較和取勝，以實現有限的目標為前提，而這也會導致組織只關心「緊急的事」而不是「重要的事」</li>
</ul>
<h2 id="推動無限思維的五項條件"><a class="header-anchor" href="#推動無限思維的五項條件"></a>推動無限思維的五項條件</h2>
<ul>
<li>崇高的信念</li>
<li>號召志同道合的夥伴</li>
<li>服務導向：對別人好，自己也會受益</li>
<li>經得起考驗</li>
<li>高遠的理想</li>
</ul>
<h3 id="崇高的信念"><a class="header-anchor" href="#崇高的信念"></a>崇高的信念</h3>
<p><strong>關鍵在於：願意為了這個信念而付出並且不後悔。</strong></p>
<ul>
<li><strong>「是對一個尚不存在的未來懷抱具體的願景;這個未來令人嚮往到願意犧牲小我。來實現這個願景」</strong></li>
<li>有限目標所獲得的成就無法持續長久，但信念可以不斷堅持並使工作和生活能有不同意義</li>
<li>不只著眼自己的成就，放眼更大的目標</li>
</ul>
<p>崇高的信念需要：</p>
<ol>
<li><strong>「支持」一個理念，而不是用「對抗」的方式思考</strong></li>
</ol>
<p>Ex. 「對抗」貧窮和「支持」每個人養家的權利，前者相信可以打敗貧窮，後者則給予值得努力的理由。</p>
<p>除了語義不同，更影響我們如何看待這個問題及我們的願景</p>
<h3 id="號召志同道合的夥伴"><a class="header-anchor" href="#號召志同道合的夥伴"></a>號召志同道合的夥伴</h3>
<p>找到和自己對相同事情有同樣熱情的人，願意為了相同願景努力</p>
<h3 id="服務導向：對別人好，自己也會受益"><a class="header-anchor" href="#服務導向：對別人好，自己也會受益"></a>服務導向：對別人好，自己也會受益</h3>
<p>利他方能利己，先讓別人受益，自己最後也能受益</p>
<h3 id="經得起考驗"><a class="header-anchor" href="#經得起考驗"></a>經得起考驗</h3>
<p>產品和服務是推動信念的方法，而非信念本身。</p>
<p>技術會出新，所以需要的是更持久的信念維持下去</p>
<h3 id="高遠的理想"><a class="header-anchor" href="#高遠的理想"></a>高遠的理想</h3>
<h2 id="如何找到信念"><a class="header-anchor" href="#如何找到信念"></a>如何找到信念</h2>
<p>以「登月計劃」、「成為第一」、「成長」為例，說明為何這些例子是「有限思維」</p>
<ul>
<li>「登月計劃」: 追求有限目標(雖然時間可能很長)</li>
<li>「成為第一」: 只關注自身，而非服務他人</li>
<li>「成長」：想法空泛，沒有明確意義</li>
</ul>
<h3 id="思維的不同"><a class="header-anchor" href="#思維的不同"></a>思維的不同</h3>
<ul>
<li>有限思維：賺到錢才做好事</li>
<li>無限思維：做好事也能賺到錢</li>
</ul>
<h2 id="讓信念傳下去"><a class="header-anchor" href="#讓信念傳下去"></a>讓信念傳下去</h2>
<ul>
<li>個人表達訊息順序透露<strong>心中實際優先順序和策略重點</strong></li>
<li>以無限思維傳遞正確的信念</li>
</ul>
<h2 id="企業責任"><a class="header-anchor" href="#企業責任"></a>企業責任</h2>
<p>前半段篇幅批判傅利曼所提出的「在自由企業、私有財產系統中，企業主管是企業所有者的員工，對雇主負有直接責任，也就是按僱主的意志來經營企業，同時符合社會的基本規則，包括法律和道德上的原則。」實際上就是在企業領導者思維從無限思維推向有限思維的推手</p>
<p>而這導致企業只關注自身公司、股東的利益，而非從客戶的角度思考需求。</p>
<p>後半段篇幅提出「企業的責任是運用意志和資源來推動比企業本身更遠大的理念，保護與企業相關的人群和土地，進而創造更多資源，使企業能長久存續。只要對後果負責，企業可以依自己想要的方式經營」</p>
<p>以無限賽局的思維而言，「推動使命」、「保護大家」、「創造利潤」是不可或缺的三大支柱</p>
<h2 id="意志與資源"><a class="header-anchor" href="#意志與資源"></a>意志與資源</h2>
<p>這個篇幅描述意志與資源在無限賽局中為必備的條件，尤其以意志更為重要</p>
<ul>
<li>資源：讓組織持續健全的所有財務指標總和</li>
<li>意志：讓組織持續健全的所有人為因素總和</li>
</ul>
<p>以蘋果、好市多(無限思維組織)和其他(有限思維組織)看待員工的方式為例</p>
<ul>
<li>其他(有限思維組織): 把員工當成需要被管理的成本</li>
<li>蘋果、好市多(無限思維組織): 把員工當人，認為人的價值無法被計算</li>
</ul>
<p>而只有在當員工認同自己是公司的一份子，才會願意為了信念將個人的利益擺在其次順位，盡全力付出與陪著公司度過難關</p>
<h2 id="信任的團隊"><a class="header-anchor" href="#信任的團隊"></a>信任的團隊</h2>
<p>只追求績效但信任度低的的個人或者團隊在短期內也許可以有不錯的結果，但以長期來說則會造成有害整體組織文化的情況</p>
<p>因此如果要長期維持組織的健康，建立一個讓彼此都能夠信任對方的團隊才是長久之計</p>
<p>本篇幅舉了福特公司的例子，由於前任執行長的做事方式，如果提出自己看到問題會被當場羞辱，甚至丟了飯碗，因此高層主管在會議上時都會為了保護自己而不敢提出真正的想法。</p>
<p>而新任執行長花費了好幾週的時間，並透過行動證明提出問題的主管並不會因此受到責難或者丟掉飯碗，反而會獲得正面肯定，也因為如此逐漸改善了福特公司內遇到的問題。</p>
<ul>
<li>在信任的團隊，我們可以放心展現脆弱，我們可以放心舉手承認錯誤，坦承自己的不足，為自己的行為負責並尋求幫助。</li>
<li>彼此的心裡安全感越強，資訊就越暢通</li>
<li>寧可選擇信任度高但績效低或平平的人，也不選擇信任度低而績效高的人(這類人對於組織的長久文化會造成有害影響)</li>
<li>好的領導加上信任的團隊，可以讓團隊把工作做到最好，打造出解決問題的文化，而不是隱藏問題的文化。</li>
</ul>
<h2 id="小心道德褪色"><a class="header-anchor" href="#小心道德褪色"></a>小心道德褪色</h2>
<ul>
<li>當人們被迫在壓力下做決定時，願意做出正確決定的機率會大幅下降</li>
<li>我們常藉由委婉措辭來合理化自己的不道德行為，將問題歸咎於大環境的體制、別人，並不認為是自己的問題</li>
<li>具有有限思維的公司或個人可能會因為看重短期的利益而做出一些自己認為合理，但實際上卻不然的不道德行為</li>
<li>具有無限思維的公司或個人了解如果要長期發展，那麼就要讓崇高的信念凌駕於利益之前，不透過委婉措辭合理化自己為了短期利益所做的事情，而是正視問題。並認為透過最高道德標準也依然可以賺到錢</li>
</ul>
<h2 id="可敬的對手"><a class="header-anchor" href="#可敬的對手"></a>可敬的對手</h2>
<ul>
<li>如果我們是參與無限賽局的玩家，就不該再把其他玩家視為要擊敗的競爭者，應該開始把他們看作可以幫助自己成為更好玩家的可敬對手。</li>
<li>傳統競爭思維讓我們採取要獲勝的態度，可敬的對手則啟發我們採取改進的態度。</li>
<li>「信念盲目」是指沉迷於自己的信念，或沉迷於另一個玩家信念的「錯誤」，而無法看見別人的優勢，或自己的缺點。</li>
<li>「信念盲目」會削弱謙卑，放大傲慢。</li>
</ul>
<p>採取無限賽局的思維，我們不以贏過誰作為判斷的基準，而是如何從這些無論是我們喜歡的、不喜歡的對手身上學習到我們不足的部分，知道自己要貫徹的信念，而不是只能有一方獲勝，也可以是你與對手雙贏。</p>
<p>避免一昧堅持自己的信念而落入傲慢、只有自己是真理，其他人都是錯誤的情況，否則只會讓自己慢慢從無限賽局中消失</p>
<h2 id="攸關存亡的應變"><a class="header-anchor" href="#攸關存亡的應變"></a>攸關存亡的應變</h2>
<p>有限思維的企業或玩家只會死守著過往曾經帶來好處的商業模式或做法，以控管成本為優先考量，而不願隨著時代與技術的進步而有所前進。</p>
<p>擁有無限思維的玩家則知道模式會隨著時代變遷而需要有所調整，因此也會做好隨時做出改變的準備，具備改變的勇氣。</p>
<p>以蘋果為例，賈伯斯在看到透過 GUI 介面操作電腦後，毅然決然的往這個方向發展，而不是死守著已經為公司帶來許多獲利的現有產品的使用模式，而賈伯斯是具有無限思維的玩家</p>
<p>以柯達為例，高層主管只願意死守著當時為他們帶來更大獲益的商業模式，而不願理解未來可能會有的趨勢與技術的迭代，最終導致於公司宣告破產。</p>
<h2 id="領導的勇氣"><a class="header-anchor" href="#領導的勇氣"></a>領導的勇氣</h2>
<p>領導者的思維決定於團體或企業的走向，擁有無限思維的領導者知道做對的事情比做對自己有益的事情還要更重要。</p>
<p>而做對的事情需要有著很大的勇氣與堅強來面對許許多多的非議，勢必要度過在短期內無法看到效益而對長期來說可以有著深遠影響的過渡期。</p>
<p>擁有無限思維的領導者也可能因為在過程中的不自覺而漸漸走向有限思維的做法，如果領導者沒有意識並有勇氣的做出調整，那最後就可能會退出無限賽局的遊戲中。</p>
]]></content>
      <categories>
        <category>i閱讀</category>
      </categories>
      <tags>
        <tag>i閱讀</tag>
      </tags>
  </entry>
  <entry>
    <title>什麼是 JSX</title>
    <url>/2020/09/18/%E4%BB%80%E9%BA%BC%E6%98%AF-JSX/</url>
    <content><![CDATA[<h1 id="什麼是-JSX"><a class="header-anchor" href="#什麼是-JSX"></a>什麼是 JSX?</h1>
<p>今天 React 好朋友要帶我看看在 React 中很常使用的語法: <strong>JSX</strong>，這個語法是一個 JavaScript 的語法擴充，而且是在寫 React 的時候，官方推薦使用的語法。</p>
<span id="more"></span>
<p>JSX 語法的重點在於<strong>允許我們在 JS 的檔案中使用 HTML 的標籤，並且使用 JSX 語法建立的是「<mark>一個 React 的 element</mark>」，此外這樣的標籤語法比起 HTML，更貼近於 JavaScript。</strong></p>
<p>趕緊來看看怎麼使用吧！</p>
<h2 id="怎麼使用-JSX-語法"><a class="header-anchor" href="#怎麼使用-JSX-語法"></a>怎麼使用 JSX 語法</h2>
<h3 id="使用-JSX-的基本方式"><a class="header-anchor" href="#使用-JSX-的基本方式"></a>使用 JSX 的基本方式</h3>
<p>相關測試範例，<a href="https://codesandbox.io/s/jsx-demo-jvwfr">點擊前往</a>。</p>
<p>在 React 中，我們可以這麼寫：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>
<p>而上面方式就是一個簡單使用 JSX 語法的方式。</p>
<h3 id="將變數傳入-JSX-語法中"><a class="header-anchor" href="#將變數傳入-JSX-語法中"></a>將變數傳入 JSX 語法中</h3>
<p>接著，由於我們是在 JavaScript 中撰寫，所以我們可以<strong>在 JSX 語法撰寫的程式碼中寫入 JavaScript 表達式</strong>，如同下面程式碼中的 <code>name</code>:</p>
<p>以下擷取範例來自官方文件: <a href="https://zh-hant.reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx">在 JSX 中嵌入 Expression<br>
</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 將變數 name 傳入至 element 中的方式，在 JSX 中是被允許的。</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Josh Perez&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, &#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDom</span>.<span class="title function_">render</span>(</span><br><span class="line">  element,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="在-JSX-中執行函式"><a class="header-anchor" href="#在-JSX-中執行函式"></a>在 JSX 中執行函式</h3>
<p>當然也可以在 JSX 中執行一個函式並得到一個回傳的結果值：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">formatName</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> user.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + user.<span class="property">lastName</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;Harper&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;Perez&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Hello, &#123;formatName(user)&#125;!</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDom</span>.<span class="title function_">render</span>(</span><br><span class="line">  element,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>而這邊需要提醒的是變數 <code>element</code> 的值被 <code>()</code> 括起來，但 <code>()</code> 並不是 JSX 語法的一環，而是當我們有多行 JSX 的語法時，需要<strong>透過括號的方式來避免自動分好補足的麻煩。</strong></p>
<h3 id="在條件判斷回傳中使用-JSX"><a class="header-anchor" href="#在條件判斷回傳中使用-JSX"></a>在條件判斷回傳中使用 JSX</h3>
<p>在某些條件下，我們需要不同的 DOM，而 JSX 語法也允許我們將其作為參數並透由函式回傳。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">formatName</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> user.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + user.<span class="property">lastName</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getGreeting</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> user</span><br><span class="line">    ? <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, &#123;formatName(user)&#125;!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    : <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, Stranger.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;Harper&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;Perez&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="title function_">getGreeting</span>(user);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDom</span>.<span class="title function_">render</span>(</span><br><span class="line">  element,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>例如 <code>const element = getGreeting(user);</code> 的 <code>user</code> 傳入為 <code>undefind</code>，所以會取得 <code>getGreeting</code> 回傳值為 <code>&lt;p&gt;Hello, Stranger.&lt;/p&gt;</code>。</p>
<p>關於 JSX 的使用就先到這裡，接著要來看看使用 JSX 的一些限制</p>
<h2 id="使用-JSX-時需要注意的限制"><a class="header-anchor" href="#使用-JSX-時需要注意的限制"></a>使用 JSX 時需要注意的限制</h2>
<h3 id="HTML-屬性在-JSX-中的表示方式"><a class="header-anchor" href="#HTML-屬性在-JSX-中的表示方式"></a>HTML 屬性在 JSX 中的表示方式</h3>
<p>A、首先第一點是由於 <strong>React DOM 使用 camelCase 作為屬性命名規範</strong>，這代表像是說在 HTML 中的 <code>tabindex</code>，在 JSX 中則必須寫成 <code>tabIndex</code>。</p>
<p>B、接著第二點是像是在 HTML 中的 <strong><code>class</code>, <code>label</code> 的 <code>for</code>，由於在 JS 中是保留字(preserve word)</strong>，所以需要額外改寫成 <strong><code>className</code> 與 <code>htmlFor</code></strong>。</p>
<p>C、但是凡事總是會有例外，諸如 <code>aria-*</code>, <code>data-*</code> 則<strong>不需要使用 camelCase 作為屬性命名規範</strong></p>
<p>以上 React 會幫我們將上述提到的部分在編譯時轉換成在 HTML DOM 上其對應的屬性。</p>
<h3 id="JSX-一定要有一個根元素-one-single-root-element"><a class="header-anchor" href="#JSX-一定要有一個根元素-one-single-root-element"></a>JSX 一定要有一個根元素(one single root element)</h3>
<p>在使用 JSX 的時候，<strong>是至少需要一個根元素的</strong>，否則就會報錯。</p>
<h2 id="副檔名要用-js-還是-jsx"><a class="header-anchor" href="#副檔名要用-js-還是-jsx"></a>副檔名要用 .js 還是 .jsx?</h2>
<p>關於 JSX 部分最後要提的是一個也許在研究過程中會遇到的困惑:</p>
<p><strong>「在 React 中為什麼有些檔案的副檔名除了 .js 之外還有 .jsx 呢？」</strong></p>
<p>這個問題我也是很困惑，索性就爬文查看看差異處在哪，然後就找到了這一篇 <a href="https://stackoverflow.com/questions/46169472/reactjs-js-vs-jsx/46169521#46169521">stackoverflow</a> 的發問，摘錄出最佳回答的回覆:</p>
<blockquote>
<p>There are however some other considerations when deciding what to put into a .js or a .jsx file type. Since JSX isn’t standard JavaScript one could argue that anything that is not “plain” JavaScript should go into its own extensions ie., .jsx for JSX and .ts for TypeScript for example</p>
</blockquote>
<p>大致重點在於<strong>使用 .jsx 作為副檔名的判斷依據在於認為是否為標準的 Javascript。</strong></p>
<p>由於 JSX 並不是標準的 Javascript，所以就透過以 .jsx 為副檔名來管理這類的檔案。</p>
<p>就好像使用 Typescript 會用 .ts 的副檔名一樣。</p>
<p>所以在實作上都可以成功運作，但怎麼管理就讓大家自己思考囉!</p>
<h2 id="React-createElement"><a class="header-anchor" href="#React-createElement"></a><code>React.createElement()</code></h2>
<p>今天最後要提的部分是 <code>React.createElement()</code> ， <strong>JSX 可以說是這個語法的語法糖</strong>， 因為在官方文件的描述中有提到：</p>
<blockquote>
<p>Babel 將 JSX 編譯為呼叫 React.createElement() 的程式。</p>
</blockquote>
<p>此外，這個語法提供了三個參數可以使用:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  type,</span><br><span class="line">  [props],</span><br><span class="line">  [...children]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>參數</th>
<th>說明</th>
<th>是否必填</th>
</tr>
</thead>
<tbody>
<tr>
<td>type</td>
<td>設定 HTML 標籤</td>
<td>必填</td>
</tr>
<tr>
<td>props</td>
<td>設定屬性</td>
<td>選填</td>
</tr>
<tr>
<td>children</td>
<td>設定子節點</td>
<td>選填</td>
</tr>
</tbody>
</table>
<p>接著讓我們來將上面的程式碼透過 <code>React.createElement()</code> 改寫：</p>
<p>首先是剛剛在上方透過 JSX 語法方式所寫的程式碼：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>
<p>接著是透過 <code>React.createElement()</code> 所寫的程式碼：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>那如果今天想要呈現如下的 DOM 結構呢?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;p&gt;這是一個子節點&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>這樣的話，如果以使用 <code>React.createElement()</code> 達成目的的話，就需要調用 <code>React.createElement()</code> 兩次來建立：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 建立一個 p 標籤</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&#x27;這是一個子節點&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立一個 div 標籤，並有一個 p 標籤的子節點</span></span><br><span class="line"><span class="keyword">const</span> element2 = <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line"> <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line"> &#123; <span class="attr">className</span>: <span class="string">&#x27;container&#x27;</span> &#125;,</span><br><span class="line"> element</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>今天的學習應該可以解惑昨天部分程式碼了吧！</p>
<p>透過 JSX 語法的方式可以讓我們寫出更好維護的 HTML 架構，輕鬆許多呢!</p>
<p>明天 React 好朋友要帶我們了解關於「React Element」與「React Component」的相異之處。</p>
<p>程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<p>明天見～</p>
<h2 id="相關資源"><a class="header-anchor" href="#相關資源"></a>相關資源</h2>
<ul>
<li><a href="https://zh-hant.reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx">在 JSX 中嵌入 Expression<br>
</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>事件處理的使用與了解</title>
    <url>/2020/09/21/%E4%BA%8B%E4%BB%B6%E8%99%95%E7%90%86%E7%9A%84%E4%BD%BF%E7%94%A8%E8%88%87%E4%BA%86%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="事件處理的使用與了解"><a class="header-anchor" href="#事件處理的使用與了解"></a>事件處理的使用與了解</h1>
<p>昨天的 <a href="https://hackmd.io/39D2cl2wTc-rep0l7Zhpow">在 class-based Component 中的 State 與事件處理</a> 中我們對於事件處理的部分有稍微提了一些，而今天的篇幅是針對於在使用事件時的一些細節學習。</p>
<span id="more"></span>
<p>而今天的內容會依據官方文件提供的例子，再搭配一些簡單的測試範例來學習。</p>
<h2 id="將參數傳給-Event-Handler"><a class="header-anchor" href="#將參數傳給-Event-Handler"></a>將參數傳給 Event Handler</h2>
<p>我們可以透過如下兩種方式將額外的參數傳給 Event Handler:</p>
<ul>
<li><code>Function.prototype.bind()</code></li>
<li><code>arrow function</code></li>
</ul>
<p>如同文件提供的例子:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">deleteRow</span>(id, e)&#125;&gt;<span class="title class_">Delete</span> <span class="title class_">Row</span>&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.deleteRow.bind(this,</span> <span class="attr">id</span>)&#125;&gt;</span>Delete Row<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>接著讓我們分析一下這兩種寫法的細節:</p>
<h3 id="使用箭頭函式-arrow-function-的方式"><a class="header-anchor" href="#使用箭頭函式-arrow-function-的方式"></a>使用箭頭函式(arrow function)的方式</h3>
<p>在文件中提及的部分在於，<strong>如果使用箭頭函式(arrow function)的話，我們必須明確將 <code>e</code> 傳遞到 handler 中</strong>，讓我們透過傳統函式的寫法來改寫使用箭頭函式的寫法，如下方這個小範例:</p>
<p>PS. 由於這邊的部分屬於原生 JS 的行為，並不是 React 特有的，所以這邊我們可以透過原生 JS 的方式來呈現。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;Click&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deleteRow</span>(<span class="params">id, e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">box.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="title function_">deleteRow</span>(<span class="number">0</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而 <code>onclick</code> 等號右邊的這一段程式碼:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">box.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="title function_">deleteRow</span>(<span class="number">0</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>透過 ES6 箭頭函式簡化，其實就等同於:  <code>(e) =&gt; deleteRow(id, e)</code>。</p>
<p>所以才有文件上 <code>&lt;button onClick=&#123;(e) =&gt; this.deleteRow(id, e)&#125;&gt;Delete Row&lt;/button&gt;</code> 這樣的結果(<code>this</code> 則由於是因為文件在這裡是以 class-based Component 來探討)。</p>
<h3 id="使用-Function-prototype-bind-的方式"><a class="header-anchor" href="#使用-Function-prototype-bind-的方式"></a>使用 Function.prototype.bind() 的方式</h3>
<p>另一種文件中提及可以達到相同目的的方式就是透過<strong>使用 bind 綁定的方式</strong>。</p>
<p>所以我們先看看 bind 怎麼使用:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fun.<span class="title function_">bind</span>(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure>
<ul>
<li><code>thisArg</code>: 我們指定的 this 的值</li>
<li><code>arg1, arg2....argN</code>: 我們額外傳入的參數</li>
</ul>
<p>bind 會建立一個新的函式，而這個函式的 <code>this</code> 可以透過 <code>this</code> 可以透過我們自定義的值綁定。</p>
<p>而額外傳入的參數則可以在這個新建立的函式中使用。</p>
<p>如下方這個小範例:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">p1, p2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&#x27;foo test&#x27;</span>, <span class="string">&#x27;foo test2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newFoo = foo.<span class="title function_">bind</span>(<span class="string">&#x27;bind this text&#x27;</span>, <span class="string">&#x27;newFoo test&#x27;</span>, <span class="string">&#x27;newFoo test2&#x27;</span>);</span><br><span class="line"><span class="title function_">newFoo</span>();</span><br></pre></td></tr></table></figure>
<ul>
<li>執行 <code>foo</code> 時，由於使用嚴格模式(<code>'use strict'</code>)，所以可以得到 <code>this</code> 的值是 <code>undefined</code>。</li>
<li>執行 <code>newFoo</code> 時，由於透過 <code>bind</code> 的方式綁定了 <code>this</code> ，所以可以得到 <code>this</code> 的值是 <code>bind this text</code>。</li>
</ul>
<p>了解了 bind 的使用方式後，我們接著將剛剛使用箭頭函式(arrow function)的方式透過 <code>bind</code> 方式改寫：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deleteRow</span>(<span class="params">id, e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(id);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">box.<span class="property">onclick</span> = deleteRow.<span class="title function_">bind</span>(box, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>這裡的 <code>this</code> 我們將其綁定在 box 這個元素上，並額外帶入作為 <code>id</code> 使用的參數，並且可以發現我們<strong>不用額外傳入 <code>e</code> 就可以在 handler 中使用，而 <code>e</code> 都會是作為最後一個參數被使用</strong>。</p>
<p>如同上方的程式碼，我們額外傳入 <code>id</code> ，所以在 <code>deleteRow</code> 中參數的順序依序為 <code>id</code> 、 <code>e</code>。</p>
<h2 id="傳遞方法到子元件與實現-input-雙向綁定-Two-way-binding"><a class="header-anchor" href="#傳遞方法到子元件與實現-input-雙向綁定-Two-way-binding"></a>傳遞方法到子元件與實現 input 雙向綁定(Two way binding)</h2>
<p>最後要學習的部分是在 React 中<strong>傳遞父層的方法到子元件中，以及透過 修改 input 的輸入值，進而改變文字的內容，實現簡單的雙向綁定。</strong></p>
<p>這邊我們先以在 class component 中如何達成來理解。</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/great-meadow-ohd0j?file=/src/App.js">點擊前往</a>。</p>
<p>所以這邊我們先假設一個情境，如圖：</p>
<p><img src="https://i.imgur.com/fOFlcdh.png" alt=""></p>
<p>我們先看看父層的元件結構:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Person</span> <span class="keyword">from</span> <span class="string">&quot;./Person.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">person</span>: [&#123; <span class="attr">name</span>: <span class="string">&quot;init value&quot;</span> &#125;]</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  changeNameHandler = <span class="function">(<span class="params">e, name, idx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; person &#125; = state;</span><br><span class="line">      person[idx].<span class="property">name</span> = name;</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; person &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>雙向綁定(Two way binding)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Person</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&#123;person[0].name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">changeNameHandler</span>=<span class="string">&#123;this.changeNameHandler&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>
<p>然後是子層的元件結構：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.scss&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Person</span> = props =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, changeNameHandler &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;person&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;e</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          changeNameHandler(e, e.target.value, 0);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        placeholder=&quot;type name here...&quot;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Person</span>;</span><br></pre></td></tr></table></figure>
<p>對於上述的程式碼進行說明：</p>
<ol>
<li>父層的 <code>&lt;Person&gt;</code> 中的 <code>name</code> 是透過 <code>state</code> 的值作為 <code>props</code> 傳入。</li>
<li>父層的 <code>&lt;Person&gt;</code> 中的 <code>changeNameHandler</code> 是為了將這個方法傳入(pass)到子元件中，才能在子元件中使用。</li>
<li>在子元件中的 <code>input</code> 透過 <code>onChange</code> 事件作為觸發的事件類型，並在觸發時，調用從父層傳遞進來的 <code>changeNameHandler</code>，而 <code>0</code> 代表的是 <code>index</code> ，這邊先透過 hard code 的方式提供。</li>
<li><code>input</code> 輸入時，觸發了父層 <code>changeNameHandler</code> 的方法，此時透過 <code>setState</code> 的方式更新 <code>state</code> 中的資料，並藉此更新畫面(UI)</li>
</ol>
<p>今天的部分是為了補充對於事件的使用方式，明天讓我們繼續下一個部分進行學習吧。</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://zh-hant.reactjs.org/docs/handling-events.html">事件處理</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 React developer Tool 提高開發效率</title>
    <url>/2020/09/24/%E4%BD%BF%E7%94%A8-React-developer-Tool-%E6%8F%90%E9%AB%98%E9%96%8B%E7%99%BC%E6%95%88%E7%8E%87/</url>
    <content><![CDATA[<p>今天的篇幅比較簡單，但是在透過框架開發時卻是一個會影響開發時間、效率很重要的關鍵工具之一，那就是 React 的 developer tools。</p>
<span id="more"></span>
<p><img src="https://i.imgur.com/2UxaNk5.png" alt=""></p>
<p>在開發過程時，我們肯定需要常常觀察元件(Component)中像是 state 的變化等等，這個時候就是 React developer tools 派上用場的時候囉!!</p>
<p>而目前的學習階段由於還沒有學習到 Redux，所以 Redux 的 developer tools 的使用就留待後面學習到的時候再說囉XD</p>
<p>接著讓我們來學習如何使用吧</p>
<h2 id="透過瀏覽器安裝-React-developer-tools。"><a class="header-anchor" href="#透過瀏覽器安裝-React-developer-tools。"></a>透過瀏覽器安裝 React developer tools。</h2>
<p>這邊介紹在 Google Chrome 與 Firefox 中安裝的部分。</p>
<p>在 Google Chrome 可以透過 chrome 線上應用程式商店中安裝，<a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?utm_source=chrome-ntp-icon">點擊連結前往</a>。</p>
<p><img src="https://i.imgur.com/KQ49OrA.png" alt=""></p>
<p>而在 Firefox 中則是可以透過在 ADD-ONS 中安裝，<a href="https://addons.mozilla.org/zh-TW/firefox/addon/react-devtools/">點擊連結前往</a>。</p>
<p><img src="https://i.imgur.com/WPWG6wS.png" alt=""></p>
<p>接著就透過 Google 的 React developer tools 來看看怎麼使用吧!</p>
<h2 id="透過簡單例子使用-React-developer-tools"><a class="header-anchor" href="#透過簡單例子使用-React-developer-tools"></a>透過簡單例子使用 React developer tools</h2>
<p>這邊為了可以更聚焦如何使用 React developer tools，所以提供一個非常簡單的測試例子。</p>
<p>情境： 當點擊 Card 元件時，會替換掉名字、年齡與嗜好。</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/boring-zhukovsky-ngyem?file=/src/App.js">點擊前往</a>。</p>
<p>而這裡為了節省一些時間，透過 codesandbox 這個服務來觀察，這個服務已經將 React developer tools 也都準備好了，沒意外的話應該可以看到如下的畫面:</p>
<p><img src="https://i.imgur.com/9BiM4zj.png" alt=""></p>
<p>但這邊想要分享一個小小的技巧，通常我們將專案運行起來時會透過F12 打開 chrome 的 dev tools</p>
<p>而如果有安裝 React developer tools 的話，預期右邊的工具列中會有兩個選項，分別是「Components」、「Profiler」(這兩個就是透過剛剛安裝後才能看到的，一般來說不會有哦!)</p>
<p>但如果是透過筆電或者小螢幕開發時，如果要開啟 React developer tools ，我們<strong>總是需要點擊下拉選單才可以選取到</strong>，多少會造成一些不便。</p>
<p>所以這邊有個自己覺得比較順手的開發習慣，<strong>就是將 「Components」移至最前方</strong>，這對於螢幕視窗不大卻要開發時，可以不會因為開發者工具視窗比較小而總是一直點擊下拉選單選取，增加了一些方便性呢！</p>
<p><img src="https://i.imgur.com/RQnCEqh.png" alt=""></p>
<p>拉回來主題，可以先點擊卡片區塊觀察是否有 state 中的資料替換掉，接著再看看 React developer tools state 的變化。</p>
<p>預期會從這樣子的結果:</p>
<p><img src="https://i.imgur.com/Zk3E6pZ.png" alt=""></p>
<p>變成這樣子的結果:</p>
<p><img src="https://i.imgur.com/Z6BlCyI.png" alt=""></p>
<p>但除了可以觀察改變之外，我們也可以透過直接在這裡修改 <code>name</code> 的值來觀察變化，可以自行嘗試看看。</p>
<p>而左方的部分，則是顯示了元件(Components) 的架構，如圖:</p>
<p><img src="https://i.imgur.com/KK7i3fn.png" alt=""></p>
<p>至於「props」，若是在元件中如果有使用到 props ，就會在這裡可以清楚看見。</p>
<p>如 Card 元件，因為是透過 props 的值來顯示內容，所以可以看到如下資訊:</p>
<p><img src="https://i.imgur.com/DBmGDM5.png" alt=""></p>
<p>其他如「rendered by」及「source」則是用來讓開發者知道用的是哪個版本的 React-dom 與來源。</p>
<p>開發者工具一定要了解怎麼使用，因為這會大幅提升開發的效率!!</p>
<p>今天的學習就這樣囉，明天見~</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ol>
<li><a href="https://penghuachen.github.io/">個人部落格</a></li>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ol>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 jQuery的 $.Ajax() 技術和介接api</title>
    <url>/2020/01/12/%E4%BD%BF%E7%94%A8-jQuery%E7%9A%84-Ajax-%E6%8A%80%E8%A1%93%E5%92%8C%E4%BB%8B%E6%8E%A5api/</url>
    <content><![CDATA[<h2 id="什麼是-jQuery"><a class="header-anchor" href="#什麼是-jQuery"></a>什麼是 jQuery ?</h2>
<p>既然要使用jQuery的語法，那不免要先提一下什麼是jQuery才行。</p>
<span id="more"></span>
<p>所以就讓我們先簡單了解jQuery是什麼，以及簡單的使用吧!</p>
<blockquote>
<p>jQuery是一套跨瀏覽器的JavaScript函式庫，簡化HTML與JavaScript之間的操作。[1]由約翰·雷西格（John Resig）在2006年1月的BarCamp NYC上釋出第一個版本。<br>
…<br>
jQuery的語法設計使得許多操作變得容易，如操作文件（document）、選擇文件物件模型（DOM）元素、建立動畫效果、處理事件、以及開發Ajax程式。<br>
<a href="https://zh.wikipedia.org/wiki/JQuery">wiki jQuery</a></p>
</blockquote>
<p>從維基百科的解釋可以知道，jQuery在<mark>操作DOM、動畫效果、事件處理以及Ajax部分，都可以有比寫原生JavaScript還要更快速的處理方式。</mark></p>
<p>因為jQuery本身將那些功能都已經封裝好提供我們使用了。</p>
<h2 id="怎麼使用-jQuery"><a class="header-anchor" href="#怎麼使用-jQuery"></a>怎麼使用 jQuery ?</h2>
<p>使用的方式也很簡單，有兩種方式:</p>
<ul>
<li>透過CDN引入</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://code.jquery.com/jquery-3.4.1.js&quot;</span></span><br><span class="line">integrity=<span class="string">&quot;sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU=&quot;</span>crossorigin=<span class="string">&quot;anonymous&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>將jQuery程式碼下載到電腦裡<br>
<a href="https://jquery.com/download/">jQuery官網連結</a></li>
</ul>
<p>將jQuery引入到編輯器後就可以使用囉!</p>
<h2 id="jQuery-的-ajax"><a class="header-anchor" href="#jQuery-的-ajax"></a>jQuery 的 <code>$.ajax()</code></h2>
<p>進入到這篇的主題 <code>$.ajax()</code> 。</p>
<p>這邊只會將有使用到的參數部分做說明，剩下的就待客倌們好好研究囉!</p>
<p>先來看看一段測試碼，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>:,</span><br><span class="line">  <span class="attr">method</span>:,</span><br><span class="line">  <span class="attr">dataType</span>:,</span><br><span class="line">  <span class="attr">data</span>:</span><br><span class="line">  </span><br><span class="line">  <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(res)&#125;,</span><br><span class="line">  <span class="attr">error</span>:<span class="keyword">function</span>(<span class="params">err</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(err)&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面前四個參數 <code>url</code>、<code>method</code>、<code>dataType</code>、<code>data</code> 是在向遠端要求資料時很重要的參數，來看看用途:</p>
<ul>
<li>url: 要請求資料的網址</li>
<li>method: 請求資料的方式(Ex:<code>POST</code> / <code>GET</code> / <code>PUT</code>…等)</li>
<li>dataType: 請求資料的類型(Ex:xml, json, script, or html…等)</li>
<li>data: 如果需要傳送資料時，則將資料設定在這裡。</li>
</ul>
<p>基本上述已經建立好了一個向遠端請求資料的格式，但這裡還少了一點東西。</p>
<p>那就是提供成功或失敗訊息讓我們可以知道結果為何。</p>
<ul>
<li><code>success</code>: 當成功接收到資料時，<code>success</code> 會執行並顯示結果。</li>
<li><code>error</code> :  當接收資料失敗時，<code>error</code> 會執行並顯示結果。</li>
</ul>
<p>以上大概就是這次會用到的設定，接下來來看看這次的實作吧!</p>
<h2 id="實作：透過-ajax-介接高雄市政府資料開放平台的Open-Data"><a class="header-anchor" href="#實作：透過-ajax-介接高雄市政府資料開放平台的Open-Data"></a>實作：透過 <code>$.ajax()</code> 介接高雄市政府資料開放平台的Open Data</h2>
<p>這個例子會透過 <code>$.ajax()</code> 的 <code>GET</code> 方法取得高雄市政府資料開放平台的Open Data</p>
<p>記得要透過前面提到的方式<strong>先將 jQuery 引入才可以正常使用喔</strong>！</p>
<blockquote>
<p><a href="https://data.kcg.gov.tw/dataset/a98754a3-3446-4c9a-abfc-58dc49f2158c/resource/48d4dfc4-a4b2-44a5-bdec-70f9558cd25d/download/yopendata1070622opendatajson-1070622.json">電動機車充電站名稱及充電站地址</a></p>
</blockquote>
<p>可以將程式碼貼到自己的編輯器中查看結果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- css part --&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">      background: #f0d0d0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h1 &#123;</span><br><span class="line">      text-align: center;</span><br><span class="line">      font-weight: bold;</span><br><span class="line">      font-size: 48px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .charge-list &#123;</span><br><span class="line">      display: flex;</span><br><span class="line">      list-style: none;</span><br><span class="line">      flex-wrap: wrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .charge-list li &#123;</span><br><span class="line">      box-sizing: border-box;</span><br><span class="line">      flex: 0 1 24%;</span><br><span class="line">      padding: 10px;</span><br><span class="line">      margin: 0 1% 2% 0;</span><br><span class="line">      border-radius: 10px;</span><br><span class="line">      transition: all .4s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .charge-list li:hover &#123;</span><br><span class="line">      margin-top: -1%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .charge-list li:nth-child(n) &#123;</span><br><span class="line">      background: #aaaadd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .charge-list li:nth-child(2n) &#123;</span><br><span class="line">      background: #ddddaa;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .charge-list li:nth-child(3n) &#123;</span><br><span class="line">      background: #dad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .charge-list li:nth-child(3n+1) &#123;</span><br><span class="line">      background: #aaf;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- html --&gt;</span><br><span class="line">  &lt;h1&gt;高雄市電動機車充電站名稱及充電站地址一覽表&lt;/h1&gt;</span><br><span class="line">  &lt;ul class=&quot;charge-list&quot;&gt;&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> endpoint = <span class="string">&#x27;https://data.kcg.gov.tw/dataset/a98754a3-3446-4c9a-abfc-58dc49f2158c/resource/48d4dfc4-a4b2-44a5-bdec-70f9558cd25d/download/yopendata1070622opendatajson-1070622.json&#x27;</span>;</span><br><span class="line"> $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">   <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">   <span class="attr">url</span>: endpoint,</span><br><span class="line">   <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">     <span class="keyword">const</span> charge = [];</span><br><span class="line">     charge.<span class="title function_">push</span>(...response);</span><br><span class="line">     <span class="title function_">createDomElement</span>(charge);</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">thrownError</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(thrownError);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">createDomElement</span>(<span class="params">charge</span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> domElements = charge.<span class="title function_">map</span>( <span class="function"><span class="params">place</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">   &lt;li&gt;</span></span><br><span class="line"><span class="string">     &lt;p class=&quot;location&quot;&gt;位置： <span class="subst">$&#123; place.Location &#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">     &lt;p class=&quot;address&quot;&gt;地址：<span class="subst">$&#123; place.Address &#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">   &lt;/li&gt;</span></span><br><span class="line"><span class="string"> `</span>;</span><br><span class="line">   &#125;).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> chargeList = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.charge-list&#x27;</span>);</span><br><span class="line">   chargeList.<span class="property">innerHTML</span> = domElements;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>傳值(By value)與傳參考(By reference)</title>
    <url>/2019/10/10/%E5%82%B3%E5%80%BC-By-value-%E8%88%87%E5%82%B3%E5%8F%83%E8%80%83-By-reference/</url>
    <content><![CDATA[<h1 id="傳值-By-value-與傳參考-By-reference"><a class="header-anchor" href="#傳值-By-value-與傳參考-By-reference"></a>傳值(By value)與傳參考(By reference)</h1>
<p>講在前面: 這個篇幅會搭配 understanding the weird parts(克服JS奇怪的部分) 的影片章節來學習。</p>
<span id="more"></span>
<p>而篇幅會聚焦在 by value(傳值)、 by reference (傳參考)這兩個方向， by sharing 則留待日後更加了解後再學習、比較。</p>
<p>影片中有兩張關鍵圖片，這裡會以此作為起點並向下延伸。</p>
<h2 id="call-by-value-傳值"><a class="header-anchor" href="#call-by-value-傳值"></a>call by value (傳值)</h2>
<p><img src="https://lh3.google.com/u/0/d/1vpQv7t3cnWahm4P8Y9ZPjBQ_wwjLGxKo=w2880-h1530-iv1" alt="Day10-1"></p>
<p>從圖中可以知道:</p>
<p>若某個變數值為基本型別值(primitive value)，當指定給另一個變數時，<mark>該變數會建立一個新的記憶體位址，並拷貝這個基本型別的值儲存到新的記憶體位址上。</mark></p>
<p>來看看一個測試的例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line">b = a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a的值為: &#x27;</span> + a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b的值為: &#x27;</span> + b);</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1C1mvQDTEkOf_EunFBJE3T899hmMFTHlK=w1298-h1498-iv1" alt="Day10-1"></p>
<p>到這邊應該還不難理解，再來我們在測試看看另一個例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line">b = a;</span><br><span class="line">a = <span class="number">6</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a的值為: &#x27;</span> + a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b的值為: &#x27;</span> + b);</span><br></pre></td></tr></table></figure>
<p>跟前一個例子很類似，只是多了一行程式 <mark>改變 <code>a</code> 的值</mark>，這時候再來看看兩個變數的值會是怎麼樣</p>
<p><img src="https://lh3.google.com/u/0/d/1ZzeXr96BS5hBQrtS5_i6cD-UyXv1hr0a=w1298-h1498-iv1" alt="Day-11-3"></p>
<p>可以知道，即使我們修改了 <code>a</code> 的值， <code>b</code> 也不會因此而被修改。</p>
<p>因為將 <code>a</code> 的值傳給 <code>b</code> ，實際上是只有單純的把 <code>a</code> 的值 <code>5</code> 拷貝一份，然後儲存到 <code>b</code> 的記憶體裡。</p>
<p>而上述就是剛剛講在前面的 <mark>call by value(傳值)</mark></p>
<p>再來讓我們往下看看 call by reference (傳參考)</p>
<h2 id="call-by-reference-傳參考"><a class="header-anchor" href="#call-by-reference-傳參考"></a>call by reference (傳參考)</h2>
<p><img src="https://lh3.google.com/u/0/d/1FzYhUkEgFYABClA0B9EO-h-wXJFTWGmZ=w1298-h1498-iv1" alt="Day11-4"></p>
<p>從圖中可以知道:</p>
<p><mark>若某個變數的值為物件時</mark>，當把該變數的值傳給另一個變數時，此時<mark>這兩個變數會指向同一個記憶體位址</mark>。也因此如果修改了物件中的特性與方法，自然就會同時變更到另一個物件。</p>
<p>來看看這個測試例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">greeting</span>: <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2;</span><br><span class="line">obj2 = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2);</span><br></pre></td></tr></table></figure>
<p>從圖中的結果可以得知當透過 <code>obj2 = obj</code> ，兩者指向同一個記憶體位址，並非是兩個不同的記憶體位址。</p>
<p>再來看看變更了其中一個物件的特性值，看會是什麼情況。</p>
<p><img src="https://lh3.google.com/u/0/d/1WRhaxBO3gfvPR-xvMfT1ZaRGkXJzwrs3=w1298-h1498-iv1" alt="Day11-5"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">greeting</span>: <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2;</span><br><span class="line">obj2 = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2);</span><br><span class="line">obj2.<span class="property">greeting</span> = <span class="string">&#x27;Hola&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2);</span><br></pre></td></tr></table></figure>
<p>當 <code>obj2</code> 中的特性 <code>greeting</code> 值修改為 <code>Hola</code> ，可以看到 <code>obj</code> 物件竟然也同時被修改了 <code>greeting</code> 特性的值。</p>
<p>原因就是因為兩者都指向同一個記憶體位址的緣故，所以才會改了其中一個，而另一個也被修改了。</p>
<p>而上述就是剛剛講在前面的 <mark>call by reference(傳參考)</mark></p>
<p><img src="https://lh3.google.com/u/0/d/1je-Ablfv99ZfXEEFNpyMfwnsSclggJTH=w1298-h1498-iv1" alt="Day11-6"></p>
<p>但凡事總是有所謂的例外情況:</p>
<h2 id="例外情況"><a class="header-anchor" href="#例外情況"></a>例外情況</h2>
<p>前面有提到，所有的物件都是 call by reference，</p>
<p>但當如果有下列這種情況時，就不是 call by reference :</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">greeting</span>: <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2;</span><br><span class="line">obj2 = obj;</span><br><span class="line">obj = &#123;</span><br><span class="line">  <span class="attr">greeting</span>: <span class="string">&#x27;Hi&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2);</span><br></pre></td></tr></table></figure>
<p><code>obj</code> 透過物件字面值的方式建立了一個新的物件，所以此時的 <code>obj</code>、<code>obj2</code> 已經是指向兩個不同記憶體位址的物件。</p>
<p>自然也就不會因為更改 <code>obj</code> 而 <code>obj2</code> 也跟著被更改。</p>
<p><img src="https://lh3.google.com/u/0/d/1AnDlULzTH9Qcm4iuxMGK93doemrNYqyh=w1298-h1498-iv1" alt="Day11-7"></p>
<p>關於 傳值(By value)與傳參考(By reference) 的學習就先到這囉</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 fetch() 來介接 api 吧! </title>
    <url>/2020/01/24/%E4%BD%BF%E7%94%A8-fetch-%E4%BE%86%E4%BB%8B%E6%8E%A5-api-%E5%90%A7/</url>
    <content><![CDATA[<h2 id="關於-fetch"><a class="header-anchor" href="#關於-fetch"></a>關於 fetch()</h2>
<p>先來看看 MDN 是如何介紹的:</p>
<span id="more"></span>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Fetch_API/Using_Fetch">MDN</a><br>
Fetch API 提供了工具使操作 http pipeline 更加容易, 像是日常會用到的發送和接送資料都可以使用。並且有 global 的 fetch() 可以直接呼叫, 使開發能夠用更簡潔的語法取得非同步資料。<br>
以往都是依賴 XMLHttpRequest。 但相較下 Fetch 使用上更容易，並被廣泛使用在 Service Workers。Fetch 在設定 HTTP 相關的設定時, 也提供可讀性比較好的方法, 這些設定包括 CORS 以及其他 header。</p>
</blockquote>
<p>從這裡可以得到一個結論: 透過 <mark><code>fetch()</code> 取得非同步資料的過程會比使用 <code>XMLHttpRequest</code> 物件還要來的更加容易、簡單。</mark></p>
<p><code>fetch()</code> 方法有一個必填的參數:<mark>要請求的網址</mark>，且使用 <code>fetch()</code> 的話，<mark>無論請求成功或失敗都一定得到一個 <code>promise</code> 的回應</mark>。</p>
<p>然後 <code>fetch()</code> 回傳的為一個包含 <code>Response</code> 的 <code>promise</code> 物件，這個物件中定義了我們可以使用的方法。</p>
<p>且因為剛有提到，<strong>無論請求成功或失敗都一定得到一個 <code>promise</code> 的回應</strong>，所以 <code>fetch()</code> 會透過 <code>then()</code> 、 <code>catch</code> 來接收成功取得的非同步的資料或者請求失敗時的錯誤訊息。</p>
<h2 id="使用-fetch"><a class="header-anchor" href="#使用-fetch"></a>使用 fetch()</h2>
<p>先來看看一個測試的例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> endPoint = <span class="string">&#x27;https://data.kcg.gov.tw/dataset/a98754a3-3446-4c9a-abfc-58dc49f2158c/resource/48d4dfc4-a4b2-44a5-bdec-70f9558cd25d/download/yopendata1070622opendatajson-1070622.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(endPoint);</span><br></pre></td></tr></table></figure>
<p>可以看到 <code>fetch()</code> 會得一個 <code>Promise</code> 的物件。</p>
<p><img src="https://i.imgur.com/WPHsePk.png" alt="Day28-1"></p>
<p>再來我們要透過 <code>then()</code> 取得資料，並先透過 <code>clone()</code> 的方法複製一份後再透過 <code>json()</code> 方法將其轉為 JSON 格式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> endPoint = <span class="string">&#x27;https://data.kcg.gov.tw/dataset/a98754a3-3446-4c9a-abfc-58dc49f2158c/resource/48d4dfc4-a4b2-44a5-bdec-70f9558cd25d/download/yopendata1070622opendatajson-1070622.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(endPoint)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">clone</span>().<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p>預期可以得到一個格式為 JSON 的資料，再來就可以針對那些資料做操作囉</p>
<h2 id="實作-透過-fetch-介接高雄市資料開放平臺的-open-data"><a class="header-anchor" href="#實作-透過-fetch-介接高雄市資料開放平臺的-open-data"></a>實作: 透過 fetch 介接高雄市資料開放平臺的 open data</h2>
<ol>
<li>撰寫HTML、CSS部分</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- css part --&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    background: #f0d0d0;</span><br><span class="line">  &#125;</span><br><span class="line">  h1 &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    font-size: 48px;</span><br><span class="line">  &#125;</span><br><span class="line">  .charge-list &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    list-style: none;</span><br><span class="line">    flex-wrap: wrap;</span><br><span class="line">  &#125;</span><br><span class="line">  .charge-list li &#123;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    flex: 0 1 24%;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    margin: 0 1% 2% 0;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    transition: all .4s;</span><br><span class="line">  &#125;</span><br><span class="line">  .charge-list li:hover &#123;</span><br><span class="line">    margin-top: -1%;</span><br><span class="line">  &#125;</span><br><span class="line">  .charge-list li:nth-child(n) &#123;</span><br><span class="line">    background: #aaaadd;</span><br><span class="line">  &#125;</span><br><span class="line">  .charge-list li:nth-child(2n) &#123;</span><br><span class="line">    background: #ddddaa;</span><br><span class="line">  &#125;</span><br><span class="line">  .charge-list li:nth-child(3n) &#123;</span><br><span class="line">    background: #dad;</span><br><span class="line">  &#125;</span><br><span class="line">  .charge-list li:nth-child(3n+1) &#123;</span><br><span class="line">    background: #aaf;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- html --&gt;</span><br><span class="line">&lt;ul class=&quot;charge-list&quot;&gt;&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>透過 fetch 介接 open data</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> endPoint = <span class="string">&#x27;https://data.kcg.gov.tw/dataset/a98754a3-3446-4c9a-abfc-58dc49f2158c/resource/48d4dfc4-a4b2-44a5-bdec-70f9558cd25d/download/yopendata1070622opendatajson-1070622.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(endPoint)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">clone</span>().<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">chargeStation</span> =&gt;</span> <span class="title function_">createDomElement</span>(chargeStation))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>));</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>將指定的資料內容(位置、地址)渲染到HTML頁面中</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createDomElement</span>(<span class="params">chargeStation</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> domElements = charge.<span class="title function_">map</span>(<span class="function"><span class="params">place</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;li&gt;</span></span><br><span class="line"><span class="string">      &lt;p class=&quot;location&quot;&gt;位置： <span class="subst">$&#123; place.Location &#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p class=&quot;address&quot;&gt;地址：<span class="subst">$&#123; place.Address &#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">  &#125;).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> chargeList = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.charge-list&#x27;</span>);</span><br><span class="line">  chargeList.<span class="property">innerHTML</span> = domElements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>其餘參數(Rest parameter)與展開運算子(Spread operator)</title>
    <url>/2019/08/03/%E5%85%B6%E9%A4%98%E5%8F%83%E6%95%B8-Rest-parameter-%E8%88%87%E5%B1%95%E9%96%8B%E9%81%8B%E7%AE%97%E5%AD%90-Spread-operator/</url>
    <content><![CDATA[<h1 id="其餘參數-rest-parameter-與展開運算子-Spread-operator"><a class="header-anchor" href="#其餘參數-rest-parameter-與展開運算子-Spread-operator"></a>其餘參數(rest parameter)與展開運算子(Spread operator)</h1>
<p><strong>其餘參數(rest parameter)與展開運算子(Spread operator)</strong> 為 ES6 的新特性，然而這兩者雖然使用的方式都是 <code>...</code> ，但是用途的不同決定我們當下使用的是其餘參數（rest parameter）還是展開運算子(Spread operator)，如下方表格:</p>
<span id="more"></span>
<table>
<thead>
<tr>
<th>語法</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>其餘參數 <code>...</code></td>
<td>將一個不確定數量的參數集合在一個陣列中</td>
</tr>
<tr>
<td>展開運算子 <code>...</code></td>
<td>將陣列中的值展開為個別值</td>
</tr>
</tbody>
</table>
<h2 id="其餘參數-Rest-parameter-的使用與比較"><a class="header-anchor" href="#其餘參數-Rest-parameter-的使用與比較"></a>其餘參數(Rest parameter)的使用與比較</h2>
<h3 id="怎麼使用其餘參數"><a class="header-anchor" href="#怎麼使用其餘參數"></a>怎麼使用其餘參數:</h3>
<p>來看看幾個測試例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">result</span>(<span class="params">...numbers</span>)&#123;</span><br><span class="line">    <span class="comment">//會獲得一組陣列:[1,2,3,4,5]</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(numbers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">result</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>從上面這個例子可以獲得以下的資訊:</p>
<ol>
<li>這邊最後獲得的值為一組陣列 <code>[1,2,3,4,5]</code>，表示這邊使用的 <code>...</code> 是作為 <mark>其餘參數</mark> 使用。</li>
<li>在函式參數位置的 <code>numbers</code> ，則是參數集合在一個陣列之後，我們可以運用的變數。</li>
<li>透過 <code>console.log(numbers);</code> ，獲得陣列型式的值。</li>
</ol>
<p>再往下看看這個例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">result</span>(<span class="params">a,b,...numbers</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a的值為: &#x27;</span> + a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b的值為: &#x27;</span> + b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(numbers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">result</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>如同一開始所提: <mark>其餘參數用於將一個不確定數量的參數集合在一個陣列中</mark>，而在其餘參數 <code>...</code> 之前有<code>a</code> 與<code>b</code> 兩個參數，因此<mark>其餘參數只會將扣除<code>a</code> 與<code>b</code> 後剩餘下的參數集合在陣列中。</mark></p>
<p>所以會得到結果如下圖:</p>
<p><img src="https://lh3.google.com/u/0/d/1v_NlRYtwQle2xFsPV-sKFXzp0ozzMgfV=w1444-h1498-iv1" alt="Day19-1"></p>
<h3 id="其餘參數與-arguments-物件的比較"><a class="header-anchor" href="#其餘參數與-arguments-物件的比較"></a>其餘參數與 arguments 物件的比較:</h3>
<p>再來要談談其餘參數與<code>arguments</code>物件的關係</p>
<p><mark>其餘參數之所以被創造就是要用來取代ES5的<code>arguments</code>物件</mark></p>
<p>而<code>arguments</code>物件，是類陣列(array-like)，<strong>因此不能使用陣列的多數方法</strong>:</p>
<p>來看看這個測試的例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">result</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">result</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1KtRqM1JAOyejMqG0Fdu6njBVXP4g3ONP=w1444-h1498-iv1" alt="Day19-2"></p>
<p>如果想要將<code>arguments</code>物件轉為陣列，可以透過下面測試例子中的方法轉換。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">result</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> arg = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">result</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>在ES6之前只有<code>arguments</code>物件可以使用時，可能還需要透過一些手法處理後才能使用陣列的方法，但ES6之後有了其餘參數一切都變得省事許多！</p>
<p><img src="https://lh3.google.com/u/0/d/138_DQrA-7dgEOrITM7HF9kSROnJWYaZ2=w1444-h1498-iv2" alt="Day19-3"></p>
<h2 id="展開運算子-Spread-operator-的使用"><a class="header-anchor" href="#展開運算子-Spread-operator-的使用"></a>展開運算子(Spread operator)的使用</h2>
<h3 id="怎麼使用展開運算子"><a class="header-anchor" href="#怎麼使用展開運算子"></a>怎麼使用展開運算子:</h3>
<ol>
<li><strong>展開運算子的 <code>...</code> 後面必定是接一個陣列或物件</strong></li>
<li>可以將一個陣列的元素值展開成個別值(簡化展開陣列的過程)</li>
<li>可以將一個物件的可列舉特性拷貝到新的物件中</li>
</ol>
<p>看看這個測試例子幫助理解:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...numbers);</span><br></pre></td></tr></table></figure>
<p>可以獲得陣列值被展開的結果</p>
<p>接下來讓我們將展開運算子運用在函式上:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a,b,c</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> totalSum = <span class="title function_">sum</span>(...numbers);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(totalSum);</span><br></pre></td></tr></table></figure>
<p>這裡的 <code>...</code> 為展開運算子，所以會將 <code>numbers</code> 的值展開給 <code>sum </code>函式的 <code>a,b,c</code>參數，於是會得到總和值為 <code>6</code> 。</p>
<p>最後來看看將展開運算子用在物件上的使用:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&quot;Bill&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;habbit&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">value</span>:<span class="string">&quot;Read books&quot;</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;...obj&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2);</span><br></pre></td></tr></table></figure>
<p>由程式碼可以知道，透過展開運算子可以更快速地將物件的<strong>可列舉特性</strong>拷貝給另一個物件。</p>
<p>而且因為 <code>habbit</code> 特性被設定為不可列舉，所以即使使用展開運算子也無法將這個無法列舉的特性拷貝到 <code>obj2</code> 物件上。</p>
<p>可以嘗試看看將 <code>enumerable: false</code> 改為 <code>enumerable: true</code>看看差別~</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Class-based Component 中的 State 與事件處理</title>
    <url>/2020/09/20/%E5%9C%A8-Class-based-Component-%E4%B8%AD%E7%9A%84-State-%E8%88%87%E4%BA%8B%E4%BB%B6%E8%99%95%E7%90%86/</url>
    <content><![CDATA[<h1 id="在-Class-based-Component-中的-State-與事件處理"><a class="header-anchor" href="#在-Class-based-Component-中的-State-與事件處理"></a>在 Class-based Component 中的 State 與事件處理</h1>
<p>今天 React 好朋友要帶我學習的部分是如何在 Class-based 的元件(component)中透過<strong>修改 state 的值來達到更新畫面(UI)</strong>，而為了幫助自己更快了解，這邊會同時將 React 中事件處理的部分也一併學習，並且搭配一個簡單的測試情境，才可以更好地吸收。</p>
<span id="more"></span>
<h2 id="在-Class-based-的元件-component-中的-state"><a class="header-anchor" href="#在-Class-based-的元件-component-中的-state"></a>在 Class-based 的元件(component)中的 state</h2>
<p>很重要的一個觀念: <strong>state 可以用來在 class-based 的元件(component)中，對於資料進行更新。</strong></p>
<p><strong>而在還沒有 React Hook 的時期，這是透過資料來更新畫面(UI)的唯一撰寫方式</strong>，然而 React Hook 的出現，使得寫法得以有所變化：<strong>這讓我們可以在 Functional 元件(component)中透過修改 state 的值來重新渲染畫面(UI)</strong></p>
<p>這邊我們模擬一個使用情境，並透過這個情境來了解如何在 <strong>Class-based 的元件(component)中修改 state 中的資料並觸發 React 重新更新畫面(UI)。</strong></p>
<h3 id="情境-透過點擊-click-按鈕，將目前元件中的姓名與年齡替換成另一組資料"><a class="header-anchor" href="#情境-透過點擊-click-按鈕，將目前元件中的姓名與年齡替換成另一組資料"></a>情境: 透過點擊(click)按鈕，將目前元件中的姓名與年齡替換成另一組資料</h3>
<h4 id="首先-先將-Function-component-轉換成-Class-based-component"><a class="header-anchor" href="#首先-先將-Function-component-轉換成-Class-based-component"></a>首先: 先將 Function component 轉換成 Class-based component:</h4>
<p>(P.S. 這裡將 Function component 轉換成 Class-based component 的目的是在於了解這兩者之間該如何轉換哦!)</p>
<p>我們先設定一個 Function component 需要的樣子:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Person</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;person&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bill<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Your Age: 29<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>接著，我們將它改寫成 Class-based component，並且也在 state 中新增資料，用來取代目前寫死的值，這邊有幾個小訣竅:</p>
<ol>
<li>作為渲染畫面(UI)的 React element，<strong>在 class 中要透過調用 <code>render()</code> 方法實現</strong></li>
<li>由於 ES7 之後在 class 的寫法上又更加的簡化，並且可以透過 babel 轉譯，所以寫不寫 <code>constructor</code> 則看個人怎麼決定，而這邊我們將兩種寫法都寫出來比較：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 沒有 constructor 的寫法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">person</span>: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;Bill&quot;</span>, <span class="attr">age</span>: <span class="string">&quot;29&quot;</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; person &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;person&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123; person[0].name &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Your Age: &#123; person[0].age &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有 constructor 的寫法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">person</span>: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;Bill&quot;</span>, <span class="attr">age</span>: <span class="string">&quot;29&quot;</span> &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; person &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;person&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123; person[0].name &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Your Age: &#123; person[0].age &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述的設定，我們已經準備好了一個具有 state 的 Class-based 元件(component)，接下來我們還需要先學習一個部分才能更好地觀察元件(component)重新渲染(render)，所以我們必須先了解如果在 React 中使用事件(event)。</p>
<h2 id="事件處理"><a class="header-anchor" href="#事件處理"></a>事件處理</h2>
<p>在 React 官方文件提到：</p>
<blockquote>
<p>使用 React element 處理事件跟使用 DOM element 處理事件是十分相似的。</p>
</blockquote>
<p>但是依然有一些差異之處:</p>
<ol>
<li><strong>事件的名稱在 React 中都是 camelCase，而在 HTML DOM 中則是小寫。</strong></li>
<li><strong>事件的值在 JSX 中是一個 function，而在 HTML DOM 中則是一個 string。</strong></li>
</ol>
<p>第一點相信大家都可以了解，是基於在 JS 與 HTML 中的命名規則。</p>
<p>而第二點在文件中也給出了兩個小範例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=&quot;activateLasers()&quot;&gt;</span><br><span class="line">  Activate Lasers</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;activateLasers&#125;&gt;</span><br><span class="line">  <span class="title class_">Activate</span> <span class="title class_">Lasers</span></span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<p>由於<strong>事件的值在JSX 中是一個 function</strong>，這意謂著如果今天我們改成如下寫法時，會是直接執行這個 function：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="title function_">activateLasers</span>()&#125;&gt;</span><br><span class="line">  <span class="title class_">Activate</span> <span class="title class_">Lasers</span></span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<p>了解基本使用事件處理的方式後，接著我們替剛剛改寫成 Class-based 的元件(component)添加一個按鈕，用來改變 state ：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">person</span>: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;Bill&quot;</span>, <span class="attr">age</span>: <span class="string">&quot;29&quot;</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  switchNameHandler = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;check clicked!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; person &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;person&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123; person[0].name &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Your Age: &#123; person[0].age &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">this.switchNameHandler</span> &#125;&gt;</span>Switch Name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這邊我們掛上一個 <code>onClick</code> 事件，用來觸發 <code>switchNameHandler</code> 函式，此時應該可以成功取得 <code>check clicked!</code> 的值。</p>
<p>確認 <code>switchNameHandler</code> 函式可以執行後，接著我們要來了解修改 state 的可行與不可行的方式。</p>
<p>首先是不可行的方式，那就是<strong>直接修改 state</strong></p>
<p>在文件中<a href="https://zh-hant.reactjs.org/docs/state-and-lifecycle.html#using-state-correctly">正確的使用 State</a>中有提到：</p>
<blockquote>
<p>請不要直接修改 State</p>
</blockquote>
<p>這並不會導致重新 render component，比如這個範例:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">comment</span> = <span class="string">&#x27;Hello&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>而正確修改 state 的方式，<strong>就是使用 <code>setState()</code></strong>，我們將上述的程式碼在修正成符合情境的設定：</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/holy-glade-81xgu?file=/src/components/Person/Person.jsx">點擊前往</a>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">person</span>: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;Bill&quot;</span>, <span class="attr">age</span>: <span class="string">&quot;29&quot;</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  switchNameHandler = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">person</span>: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;Alex&quot;</span>, <span class="attr">age</span>: <span class="string">&quot;25&quot;</span> &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; person &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;person&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123; person[0].name &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Your Age: &#123; person[0].age &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">this.switchNameHandler</span> &#125;&gt;</span>Switch Name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>透過 <code>setState</code> 可以讓我們更新資料的狀態(state)，而更新的方式不只一種，上面只是其中一種簡單的方式。</p>
<p>接著讓我們從<a href="https://zh-hant.reactjs.org/docs/react-component.html#setstate">文件</a>中來看看還有哪幾種更新的方式吧!</p>
<p>在文件中提到了幾個關於使用 <code>setState</code> 的重點，這邊一一條條列出來:</p>
<ol>
<li>setState() 會將改變排進一個 queue 中，並告知 React 這個 component 以及它的 children 需要用更新後的 state 重新 render。</li>
<li><strong>請把 setState() 想成一個請求而非一個馬上對 component 進行更新的指令。為了達到更好的效能，React 也許會延遲這個請求，然後一次更新數個 component。React 並不保證 state 的改變會馬上發生。</strong></li>
<li><strong>如果要在 <code>setState</code> 之後就馬上讀取 <code>this.state</code> 的話，因為 <code>setState</code> 並不會總是馬上更新元件，所以如果需要的話則要透過 <code>setState(updater, callback)</code> 的方式處理。 <code>callback</code> 會在完成 component 被重新 render 之後被執行。</strong></li>
<li><strong>會 merge 到目前的 state，並且不影響其他在 state 中的屬性(property)，這代表我們只要設定想要更新的屬性(property)而不用總是在 <code>setState</code> 中提供完整的 state。</strong></li>
</ol>
<p>接著我們改寫一下上面的程式碼來呈現吧!</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./person.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">person</span>: [&#123; <span class="attr">name</span>: <span class="string">&quot;Bill&quot;</span>, <span class="attr">age</span>: <span class="string">&quot;29&quot;</span> &#125;]</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 透過物件的方式進行更新</span></span><br><span class="line">  switchNameHandler = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">person</span>: [&#123; <span class="attr">name</span>: <span class="string">&quot;Alex&quot;</span>, <span class="attr">age</span>: <span class="string">&quot;25&quot;</span> &#125;]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 透過 updater 的方式更新</span></span><br><span class="line">  <span class="comment">// switchNameHandler = () =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   this.setState((state) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     return &#123;</span></span><br><span class="line">  <span class="comment">//       person: [&#123; name: &quot;Alex&quot;, age: &quot;25&quot; &#125;]</span></span><br><span class="line">  <span class="comment">//     &#125;;</span></span><br><span class="line">  <span class="comment">//   &#125;);</span></span><br><span class="line">  <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果需要在更新元件後做某件事情時</span></span><br><span class="line">  <span class="comment">// switchNameHandler = () =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   this.setState(</span></span><br><span class="line">  <span class="comment">//     (state) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//       return &#123;</span></span><br><span class="line">  <span class="comment">//         person: [&#123; name: &quot;Alex&quot;, age: &quot;25&quot; &#125;]</span></span><br><span class="line">  <span class="comment">//       &#125;;</span></span><br><span class="line">  <span class="comment">//     &#125;,</span></span><br><span class="line">  <span class="comment">//     () =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//       console.log(&quot;do something here....&quot;);</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//   );</span></span><br><span class="line">  <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; person &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;person&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;person[0].name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Your Age: &#123;person[0].age&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.switchNameHandler&#125;</span>&gt;</span>Switch Name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>關於在 Class-based 元件中更新 state 的學習就先暫時到這裡囉。</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://zh-hant.reactjs.org/docs/state-and-lifecycle.html#using-state-correctly">State 和生命週期</a></li>
<li><a href="https://zh-hant.reactjs.org/docs/handling-events.html">事件處理</a></li>
<li><a href="https://zh-hant.reactjs.org/docs/events.html">SyntheticEvent</a></li>
<li><a href="https://zh-hant.reactjs.org/docs/react-component.html#setstate">setState()</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>在 React 中執行非同步請求</title>
    <url>/2020/10/01/%E5%9C%A8-React-%E4%B8%AD%E5%9F%B7%E8%A1%8C%E9%9D%9E%E5%90%8C%E6%AD%A5%E8%AB%8B%E6%B1%82/</url>
    <content><![CDATA[<h1 id="在-React-中執行非同步請求"><a class="header-anchor" href="#在-React-中執行非同步請求"></a>在 React 中執行非同步請求</h1>
<p>今天要學習的部分是在 React 中透過 axios 來操作非同步請求的 CRUD，</p>
<span id="more"></span>
<p>為了減少在學習時還要為了找尋可以練習 CRUD 的資源，這邊我們就透過 JSONPlaceholder 這一套來練習 CRUD 的部分，可以更專注於本章篇幅的學習主軸。</p>
<p>不過首先，我們先學 axios 這個套件的一些使用方式吧!</p>
<h2 id="Axios-是什麼與如何使用"><a class="header-anchor" href="#Axios-是什麼與如何使用"></a>Axios 是什麼與如何使用</h2>
<p>axios 是一套基於 promise 的 http 庫，是可以用來發送非同步請求的 library。</p>
<p>以往在前端開發時，常常會透過以下方式來發送非同步請求:</p>
<ul>
<li>XMLHttpRequest</li>
<li>Fetch</li>
<li>jQuery 的 $ajax</li>
</ul>
<p>然而由於 axios 的出現，讓我們在做非同步請求時，可以透過更簡單的方式來執行。</p>
<p>相關的知識點可以透過<a href="https://github.com/axios/axios">文件</a>來理解，蠻容易懂的。</p>
<p>接著讓我們來看看怎麼搭配 JSONPlaceholder 來達成一個基本的 CRUD，這邊我們先透過一個簡化過的例子:</p>
<p>備註: 將透過 input 輸入取得值之類相關的操作簡化，專注於當拿到值之後準備透過各種 methods 發送請求的部分：</p>
<p>這個部分可以搭配測試範例以及 JSONPlaceholder 的請求格式一起閱讀，此外，這邊只會挑出 CRUD 的函式出來理解。</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/great-monad-eoqgd?file=/src/App.js">點擊前往</a>。</p>
<h2 id="在-React-中使用-axios"><a class="header-anchor" href="#在-React-中使用-axios"></a>在 React 中使用 axios</h2>
<p>首先是當我們需要在畫面上顯示從遠端取得的資料時會使用到的方法，<strong>GET</strong>，來看看這一段程式碼：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Get method</span></span><br><span class="line">getPostHandler = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(</span><br><span class="line">    <span class="string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">post</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: data.<span class="property">title</span>,</span><br><span class="line">      <span class="attr">body</span>: data.<span class="property">body</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>來看看 axios 中 get 的其中一種使用方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(url[, config])</span><br></pre></td></tr></table></figure>
<p>使用 axios 發送請求的寫法其實很多種，端看自己的喜好。</p>
<p>撇除掉用於更新 state 的 this.setState，使用 Get 方法取得資料基本上只要<strong>寫入請求的 url</strong> ，即可拿取對應的資料回來(不考慮跨域問題。)</p>
<p>沒意外的話，你可以成功看到畫面如下:</p>
<p><img src="https://i.imgur.com/7BwwrkL.png" alt=""></p>
<p>接著是更新 post 的資料:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Patch method</span></span><br><span class="line">updatePostHandler = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.<span class="title function_">patch</span>(</span><br><span class="line">    <span class="string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// body request...</span></span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;new Title&quot;</span>,</span><br><span class="line">      <span class="attr">body</span>: <span class="string">&quot;new body content&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// header configuration</span></span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">post</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: data.<span class="property">title</span>,</span><br><span class="line">      <span class="attr">body</span>: data.<span class="property">body</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">patch</span>(url[, data[, config]])</span><br></pre></td></tr></table></figure>
<p>更新會透過 <strong>pacth</strong> 的方式進行，這邊需要注意的是除了<strong>請求的 url 之外，我們還需要額外將要更新的資料寫在 body 中，以及資料的格式必須要設定在 header 中</strong>，才能讓遠端知道更新的資料與資料格式為何。</p>
<p>所以預期成功更新的話，會得到如下的畫面：</p>
<p><img src="https://i.imgur.com/XcPgfUQ.png" alt=""></p>
<p>接著是新增一筆 post 的資料，我們額外在 state 中命名為 newPost:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Post method</span></span><br><span class="line">addPostHandler = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.<span class="title function_">post</span>(</span><br><span class="line">    <span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// body request...</span></span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;Another new Title&quot;</span>,</span><br><span class="line">      <span class="attr">body</span>: <span class="string">&quot;Another new body content&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// header configuration</span></span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">newPost</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: data.<span class="property">title</span>,</span><br><span class="line">      <span class="attr">body</span>: data.<span class="property">body</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(url[, data[, config]])</span><br></pre></td></tr></table></figure>
<p>用法與 patch 基本上無意，差別在於方法的使用差異而已，預期可以得到如下畫面：</p>
<p><img src="https://i.imgur.com/gkAwhRE.png" alt=""></p>
<p>最後則是刪除一筆 post 的資料:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Delete method</span></span><br><span class="line"> deletePostHandler = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.<span class="title function_">delete</span>(</span><br><span class="line">     <span class="string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span></span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">     <span class="attr">post</span>: data,</span><br><span class="line">     <span class="attr">deletePost</span>: <span class="literal">true</span></span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">delete</span>(url[, config])</span><br></pre></td></tr></table></figure>
<p>delete 的使用與 get 基本上無異，如果成功刪除後，預期可以得到如下畫面:</p>
<p><img src="https://i.imgur.com/SYZtHWm.png" alt=""></p>
<p>以上是在 React component 中透過 axios 所做的非同步請求的方式</p>
<p>今天的學習就到這邊囉!</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://github.com/axios/axios">Axios</a></li>
<li><a href="https://jsonplaceholder.typicode.com/">JSONPlaceholder</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>初探 React Router</title>
    <url>/2020/10/02/%E5%88%9D%E6%8E%A2-React-Router/</url>
    <content><![CDATA[<h1 id="初探-React-Router"><a class="header-anchor" href="#初探-React-Router"></a>初探 React Router</h1>
<p>在網頁中最常使用的操作肯定要有<strong>透過導航列切換頁面</strong>這一個功能，而在 React 中我們可以透過 React router 的方式達成<strong>切換元件，渲染對應元件的內容來達成就像是跳轉到該頁面的目的。</strong></p>
<span id="more"></span>
<p>意思是在 React 中，透過 router 切換的 url 並非是真正的跳轉至具有該 url 的頁面，透過這個 path 用來切換的是我們寫在 React 中的元件。</p>
<p>後續幾天的篇幅會搭配著文件提供的部分範例來學習在不是使用 hook 與使用 hook 下的不同寫法。</p>
<p>接著讓我們來學習關於 router 常用的一些方式吧!</p>
<h2 id="使用-react-router-dom-套件"><a class="header-anchor" href="#使用-react-router-dom-套件"></a>使用 react-router-dom 套件</h2>
<p>這是一套並非由 Facebook 團隊開發的套件，但是在 React 中卻廣為被應用於配置路由的套件。</p>
<p>首先，我們先進行安裝:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i --save react-router-dom</span><br></pre></td></tr></table></figure>
<p>接著再往下設定基礎的 router 之前，我們要先了解組成 React router 最重要的三個部分:</p>
<p>根據這個套件的<a href="https://reactrouter.com/web/guides/primary-components">文件</a>描述:</p>
<blockquote>
<ul>
<li>routers, like <code>&lt;BrowserRouter&gt;</code> and <code>&lt;HashRouter&gt;</code></li>
<li>route matchers, like <code>&lt;Route&gt;</code> and <code>&lt;Switch&gt;</code></li>
<li>and navigation, like <code>&lt;Link&gt;</code>, <code>&lt;NavLink&gt;</code>, and <code>&lt;Redirect&gt;</code></li>
</ul>
</blockquote>
<p>接著我們先看看這幾個重要的組成的用途</p>
<h3 id="routers"><a class="header-anchor" href="#routers"></a>routers</h3>
<p>首先是 routers，區分為 <code>&lt;BrowserRouter&gt;</code> 以及 <code>&lt;HashRouter&gt;</code>，差異如下:</p>
<ul>
<li><code>&lt;BrowserRouter&gt;</code>: <a href="http://example.com/your/page">http://example.com/your/page</a></li>
<li><code>&lt;HashRouter&gt;</code>: <a href="http://example.com/#/your/page">http://example.com/#/your/page</a></li>
</ul>
<p>透過 <code>&lt;BrowserRouter&gt;</code> 方式呈現的 URL 更貼近於我們平常在使用的 URL，但這個部分需要注意和後端的設定做配置，否則可能容易導致 404 的情形發生。</p>
<p>而 <code>&lt;HashRouter&gt;</code> 方式則是多了一個 <code>/#/</code>，雖然不貼近於我們使用的 URL，但是並不需要注意後端的配置是否會影響。</p>
<h3 id="route-matchers"><a class="header-anchor" href="#route-matchers"></a>route matchers</h3>
<p>接著是 route matchers，<code>&lt;Route&gt;</code> 以及 <code>&lt;Switch&gt;</code>，透過 <code>&lt;Switch&gt;</code> 可以用來包住 <code>&lt;Route&gt;</code> ，將 <code>&lt;Route&gt;</code> 作為它的 children。並且 <code>&lt;Switch&gt;</code> 只會渲染第一個符合匹配的路徑(即使還有另外一個符合的路徑。)</p>
<p>而 <code>&lt;Route&gt;</code> 則是用來將符合匹配路徑的元件內容渲染出來。</p>
<p>此外，文件中提到在使用 <code>&lt;Route path&gt;</code> 需要注意的部分: <strong>path 從 URL 的開頭進行匹配，而非是整個 path。</strong></p>
<p>舉個例子： 我們可能會有如下這個 router設置:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/page&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>在上述的設定中， <strong>path 永遠只匹配 <code>/</code> 這個路徑，因此為了避免這個部分，有幾種做法:</strong></p>
<ol>
<li><strong>將 <code>&lt;Route path=&quot;/&quot;&gt;</code> 移動到所有 router 配置的最後方</strong></li>
<li><strong>透過 exact 明確表示要匹配完整 path</strong></li>
</ol>
<p>所以會變成如下兩種方式:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/page&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> exact path=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/page&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>另外要提的部分是，如果有查閱<a href="https://reactrouter.com/web/api/Route">文件</a>的話，會發現有三種方式可以 render component:</p>
<ul>
<li><code>&lt;Route component&gt;</code></li>
<li><code>&lt;Route render&gt;</code></li>
<li><code>&lt;Route children&gt; function</code></li>
</ul>
<p>至於為什麼有這幾種不同的方式，可以從這篇 <a href="https://stackoverflow.com/questions/59256109/difference-between-passing-component-to-route-as-prop-and-wrapping-component-in">Difference between passing component to Route as prop and wrapping component in render function</a> stackoverflow 中的回答可以有比較多的了解。</p>
<p>基本上在 react-router v5 之前只有 <code>&lt;Route component&gt;</code>、<code>&lt;Route render&gt;</code> 這兩種方式，而在 v5 之後提供了<code>&lt;Route children&gt; function</code>，而這幾個方式的實作上有著什麼差異呢?</p>
<p>首先是透過 <code>&lt;Route component&gt;</code> 的方式，這個方式是使用 <code>React.createElement</code> 的方式每次都產生一個<strong>新的 react element</strong>，當如果是透過內聯函式的方式設定，比如這個寫法:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> component=&#123;<span class="function">() =&gt;</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">Bar</span> <span class="attr">id</span>=<span class="string">&#123;this.state.id&#125;/</span>&gt;</span></span>)&#125;/&gt;</span><br></pre></td></tr></table></figure>
<p>則會造成元件不斷的在 mount 與 unmount 導致效率很低。</p>
<p>然後是 <code>&lt;Route render&gt;</code>，這個方式則不會有 <code>&lt;Route component&gt;</code> 的問題，並不會導致元件不斷的在 mount 與 unmount。但需要注意的是如果同時使用 <code>&lt;Route component&gt;</code> 與 <code>&lt;Route render&gt;</code> 的話，前者優先權比後者高。</p>
<p>接著是 <code>&lt;Route children&gt; function</code>，用法與 <code>&lt;Route render&gt;</code> 基本上沒有差異，差別只在當 route 沒有 match 到 URL 時， 此時 match 的值會是 null ，並且可以動態調整 UI 等。</p>
<p>可以參考官方的這個 <a href="https://reactrouter.com/web/api/Route/children-func">範例</a>。</p>
<h3 id="navigation"><a class="header-anchor" href="#navigation"></a>navigation</h3>
<p>最後是 <code>&lt;Link&gt;</code>, <code>&lt;NavLink&gt;</code>, 以及 <code>&lt;Redirect&gt;</code>，用途如下:</p>
<ul>
<li><code>&lt;Link&gt;</code>: 用來導航至你要渲染出來的元件，在 HTML 中會是以 <code>&lt;a&gt;</code> 的方式呈現</li>
<li><code>&lt;NavLink&gt;</code>: 也是一種 <code>&lt;Link&gt;</code>，但差別在於<strong>可以自訂點擊該連結時的效果，透過搭配 activeClassName 來使用</strong>，並且當路徑中有 <code>&quot;/&quot;</code> 設定時，需搭配 <code>exact</code> 明確指出需要完整匹配路徑才可以觸發 active style</li>
<li><code>&lt;Redirect&gt;</code>: 用於頁面重整等等時，作為重導向到指定路徑使用</li>
</ul>
<p>接著我們透過上述的理解與文件中 <a href="https://reactrouter.com/web/guides/quick-start">Quick Start</a> 的範例，改寫一個比較簡單的例子來學習:</p>
<p>這裡只提供關於 router 配置的部分，相關測試範例，<a href="https://codesandbox.io/s/quiet-mountain-glw7z?file=/src/App.js">點擊前往</a>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PageA</span> <span class="keyword">from</span> <span class="string">&quot;./containers/PageA&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PageB</span> <span class="keyword">from</span> <span class="string">&quot;./containers/PageB&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>,</span><br><span class="line">  <span class="title class_">Switch</span>,</span><br><span class="line">  <span class="title class_">Route</span>,</span><br><span class="line">  <span class="title class_">Link</span>,</span><br><span class="line">  <span class="title class_">NavLink</span>,</span><br><span class="line">  <span class="title class_">Redirect</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用 Link<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/PageA&quot;</span>&gt;</span>PageA<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/PageB&quot;</span>&gt;</span>PageB<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用 NavLink<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/PageA&quot;</span> <span class="attr">activeClassName</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                PageA</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/PageB&quot;</span> <span class="attr">activeClassName</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                PageB</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/PageA&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/PageA&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">PageA</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/PageB&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">PageB</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述範例展示如何透過 router 切換路由，分為幾個部分:</p>
<ul>
<li><code>&lt;Link&gt;</code>、<code>&lt;NavLink&gt;</code> 與 <code>&lt;Route&gt;</code> 都要寫在 <code>&lt;Router&gt;</code> 中(這裡的 <code>&lt;Router&gt;</code> 指的是 <code>&lt;BrowserRouter&gt;</code> 或者 <code>&lt;HashRouter&gt;</code>)</li>
<li>在 <code>&lt;Route&gt;</code> 中指定路徑，渲染對應的元件</li>
<li>在 <code>&lt;Link&gt;</code>、<code>&lt;NavLink&gt;</code> 中指定要前往的路徑，若符合匹配，則會切換並渲染該元件的內容。</li>
<li><code>&lt;Link&gt;</code>、<code>&lt;NavLink&gt;</code> 差別只在於點擊時是否有被點擊(active)的效果。</li>
<li>可以修改 <code>&lt;Switch&gt;</code> 中的 <code>&lt;Route path=&quot;/pageA&quot;&gt;</code> 為 <code>&lt;Route path=&quot;/pageB&quot;&gt;</code>，理解 <code>&lt;Switch&gt;</code> 的用意：<strong>只會渲染第一個符合匹配的路徑(即使還有另外一個符合的路徑。)</strong></li>
</ul>
<p>了解了基本的配置方式之後，明天我們接著學習幾個常用的 router 配置方式。</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://reactrouter.com/">React Router</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>完賽日，心得與階段學習驗收</title>
    <url>/2020/10/15/%E5%AE%8C%E8%B3%BD%E6%97%A5%EF%BC%8C%E5%BF%83%E5%BE%97%E8%88%87%E9%9A%8E%E6%AE%B5%E5%AD%B8%E7%BF%92%E9%A9%97%E6%94%B6/</url>
    <content><![CDATA[<h1 id="完賽日，心得與階段學習驗收"><a class="header-anchor" href="#完賽日，心得與階段學習驗收"></a>完賽日，心得與階段學習驗收</h1>
<p>今年度的鐵人賽於今天即將完賽，終於要告一段落啦!!!</p>
<span id="more"></span>
<p>回顧這三十天的的學習，給自己打了個差強人意的分數。</p>
<p>不過整體來說還是把 React 的基礎算是有了個基本的了解</p>
<p>而本次給自己訂定的目標，算是有成功達標，真的是小確幸XD</p>
<p>不過該如何運用到實務經驗中才是考驗的開始，填坑之路才正要前行!</p>
<p>而今天的篇幅最後附上作為驗收的小小 <a href="https://codesandbox.io/s/naughty-river-98rk7">demo</a> 以及本次的學習文章目錄。</p>
<p>簡單說明一下這個 demo 是一個非常簡單的照片牆，透過串接 <a href="https://unsplash.com/developers">Unsplash API</a> 的資料來完成。</p>
<p>而為了可以將這段時間學到的觀念運用到，所以使用了 React Redux 來管理狀態，至於在頁面切換的部分則是透過 React Router 完成。</p>
<p>雖然只是一個非常簡單的 demo，但還是跑過了 React  基本該使用的那些觀念與套件。</p>
<p>最後，期待明年可以再相見(?!)</p>
<p>附上本次的文章總目錄</p>
<h2 id="本次鐵人賽文章目錄"><a class="header-anchor" href="#本次鐵人賽文章目錄"></a>本次鐵人賽文章目錄</h2>
<table>
<thead>
<tr>
<th>目錄</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10237444">1. 拉開序幕，認識 React 好朋友</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10238355">2. 建立第一個 React Code</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10239097">3. 什麼是 JSX?</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10239791">4. React Element 與 Component</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10240503">5. 在 Class-based Component 中的 State 與事件處理</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10241067">6. 事件處理的使用與了解</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10241714">7. Class-based Component 的生命週期</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10242491">8. Class-based Component 生命週期方法(續) </a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10243122">9. 使用 React Dev Tool 提高開發效率</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10243795">10. 條件 Render、列表與 key </a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10244335">11. Styled Component</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10244954">12. CSS modules</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10245544">13. Higher order component(HOC)</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10246160">14. createRef 學起來，focus 元素不麻煩</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10246793">15. context API</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10247314">16. 在 React 中執行非同步請求</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10247735">17. 初探 React Router</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10248252">18. React router 配置動態參數並取得 api 資料內容</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10248756">19. 巢狀路由、 Query 參數與重導向</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10249241">20. 透過 React Router config 統一管理路由</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10249724">21. React Router 與 hooks</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10250232">22. Redux 觀念初探</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10250728">23. Redux 同步資料流</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10251182">24. Redux 非同步資料處理 - 使用 Redux Thunk</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10251583">25. Redux 非同步資料流 - Redux saga 基本用法</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10251966">26. React Redux 與 Hooks</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10252328">27. 認識 React Hooks 之一</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10252327">28. 認識 React Hooks 之二</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10253073">29. 認識 React Hooks 之三</a></td>
</tr>
<tr>
<td><a href="https://ithelp.ithome.com.tw/articles/10253389">30. 完賽日，心得與階段學習驗收</a></td>
</tr>
</tbody>
</table>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://unsplash.com/developers">Unsplash API</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>巢狀路由、 Query 參數與重導向</title>
    <url>/2020/10/04/%E5%B7%A2%E7%8B%80%E8%B7%AF%E7%94%B1%E3%80%81-Query-%E5%8F%83%E6%95%B8%E8%88%87%E9%87%8D%E5%B0%8E%E5%90%91/</url>
    <content><![CDATA[<h1 id="巢狀路由、-Query-參數與重導向"><a class="header-anchor" href="#巢狀路由、-Query-參數與重導向"></a>巢狀路由、 Query 參數與重導向</h1>
<p>今天要學習的是關於如何在 React router 中<strong>設定巢狀路由、設定 Query 參數以及重導向(Redirect)。</strong></p>
<span id="more"></span>
<p>今天學習的部分都可以參考測試例子來幫助理解。</p>
<p>接著就趕緊今天的學習吧!</p>
<h2 id="巢狀路由-Nesting-Route"><a class="header-anchor" href="#巢狀路由-Nesting-Route"></a>巢狀路由(Nesting Route)</h2>
<p>按照慣例，一樣先將測試範例中的情境描述一下，加速進入狀況:</p>
<ol>
<li>設置兩個按鈕作為第一層 Router 切換畫面使用，此時也會看到預設寫在 PageA 元件中的兩個按鈕:</li>
</ol>
<p><img src="https://i.imgur.com/K4HQ4bw.png" alt=""></p>
<ol start="2">
<li>接著當點擊 PageA 元件中任一個按鈕的時候，顯示對應的元件內容，以Page A Nested Component 為例：</li>
</ol>
<p><img src="https://i.imgur.com/4QvsUuS.png" alt=""></p>
<p>以上是簡單的巢狀路由使用的方式，接著讓我們來看看在 PageA 元件中是怎麼設定巢狀路由吧！</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/happy-tu-5puv5?file=/src/App.js">點擊前往</a>。</p>
<p>首先是第一層的路由設置，相信大家已經知道怎麼使用了。</p>
<ol>
<li>透過 <code>&lt;BrowserRouter&gt;</code> 將 App 元件內容包住，才可以使用 Router 相關的元件(<code>&lt;Route&gt;</code>,<code>&lt;NavLink&gt;</code>, <code>Switch</code>)。</li>
<li>在 <code>&lt;NavLink&gt;</code> 中配置要切換的路由路徑， <code>to=&quot;/PageA&quot;</code>, <code>to=&quot;/PageB&quot;</code>，以及當按鈕為 active 時的樣式設定(<code>activeClassName=&quot;link&quot;</code>)。</li>
<li>在 <code>&lt;Switch&gt;</code> 中配置 <code>&lt;Route&gt;</code> ，用來渲染符合路徑匹配的元件內容。</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>,</span><br><span class="line">  <span class="title class_">Route</span>,</span><br><span class="line">  <span class="title class_">NavLink</span>,</span><br><span class="line">  <span class="title class_">Switch</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PageA</span> <span class="keyword">from</span> <span class="string">&quot;./containers/PageA&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PageB</span> <span class="keyword">from</span> <span class="string">&quot;./containers/PageB&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">activeClassName</span>=<span class="string">&quot;link&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/PageA&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Link-A</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">activeClassName</span>=<span class="string">&quot;link&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/PageB&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Link-B</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/pageA&quot;</span> <span class="attr">component</span>=<span class="string">&#123;PageA&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/pageB&quot;</span> <span class="attr">component</span>=<span class="string">&#123;PageB&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接著來看看 PageA 元件中的路由配置，而這邊也是今天巢狀路由的重點:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Route</span>, <span class="title class_">NavLink</span>, <span class="title class_">Switch</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PageAComponent</span> <span class="keyword">from</span> <span class="string">&quot;../../components/PageAComponent&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PageAAnotherComponent</span> <span class="keyword">from</span> <span class="string">&quot;../../components/PageAAnotherComponent&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PageA</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Page A Component<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">className</span>=<span class="string">&quot;nonactive-link&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">activeClassName</span>=<span class="string">&quot;nested-link&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            // 重點觀察位置</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">to</span>=<span class="string">&#123;this.props.match.url</span> + &quot;/<span class="attr">PageAComponent</span>&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            Nested Link - A Nested Component</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">className</span>=<span class="string">&quot;nonactive-link&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">activeClassName</span>=<span class="string">&quot;nested-link&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            // 重點觀察位置</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">to</span>=<span class="string">&#123;this.props.match.url</span> + &quot;/<span class="attr">PageAAnotherComponent</span>&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            Nested Link - A Another Nested Component</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            // 重點觀察位置</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">path</span>=<span class="string">&#123;this.props.match.url</span> + &quot;/<span class="attr">:cmp</span>&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            // 重點觀察位置</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">render</span>=<span class="string">&#123;(props)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">              // console.log(props);</span></span><br><span class="line"><span class="language-xml">              // 以目前需求簡化成如下判斷式</span></span><br><span class="line"><span class="language-xml">              if (props.location.pathname === &quot;/PageA/PageAAnotherComponent&quot;) &#123;</span></span><br><span class="line"><span class="language-xml">                return <span class="tag">&lt;<span class="name">PageAAnotherComponent</span> /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">              &#125; else &#123;</span></span><br><span class="line"><span class="language-xml">                return <span class="tag">&lt;<span class="name">PageAComponent</span> /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">              &#125;</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">PageA</span>;</span><br></pre></td></tr></table></figure>
<p>為了更聚焦在重點觀察的位置，這邊我們擷取每一部分的程式碼出來:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">NavLink</span></span><br><span class="line">  className=<span class="string">&quot;nonactive-link&quot;</span></span><br><span class="line">  activeClassName=<span class="string">&quot;nested-link&quot;</span></span><br><span class="line">  <span class="comment">// 重點觀察位置</span></span><br><span class="line">  to=&#123;<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>.<span class="property">url</span> + <span class="string">&quot;/PageAComponent&quot;</span>&#125;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="title class_">Nested</span> <span class="title class_">Link</span> - A <span class="title class_">Nested</span> <span class="title class_">Component</span></span><br><span class="line">&lt;/<span class="title class_">NavLink</span>&gt;</span><br></pre></td></tr></table></figure>
<p>首先是巢狀路由中的配置方式，在 <code>to=&#123;this.props.match.url + &quot;/PageAComponent&quot;&#125;</code> 中可以發現這裡使用了 <code>this.props.match.url</code> 來設定路由路徑，所以讓我們看看這個 <code>this.props.match</code> 的物件內容:</p>
<p><img src="https://i.imgur.com/qef9qbR.png" alt=""></p>
<p>從圖中可以得知，<code>this.props.match.url</code>拿到的值為 <code>/PageA</code>。</p>
<p>緊接著我們在後方加上了 <code>/PageAComponent</code>，所以當我們點擊對應的按鈕時，此時會取得的路由路徑為: <code>/PageA/PageAComponent</code>，而到這裡，我們已經成功配置好路由的路徑。</p>
<p>接著我們要做什麼呢? 相信大家都猜到了，沒錯，我們接著要配置可以渲染元件內容的 <code>&lt;Route&gt;</code>:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Switch</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    // 重點觀察位置</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">path</span>=<span class="string">&#123;this.props.match.url</span> + &quot;/<span class="attr">:cmp</span>&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    // 重點觀察位置</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">render</span>=<span class="string">&#123;(props)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">      // console.log(props);</span></span><br><span class="line"><span class="language-xml">      // 以目前需求簡化成如下判斷式</span></span><br><span class="line"><span class="language-xml">      if (props.location.pathname === &quot;/PageA/PageAAnotherComponent&quot;) &#123;</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">PageAAnotherComponent</span> /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      &#125; else &#123;</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">PageAComponent</span> /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  /&gt;</span></span><br><span class="line">&lt;/<span class="title class_">Switch</span>&gt;</span><br></pre></td></tr></table></figure>
<p>以這個測試範例的巢狀路由為例，會得到如下的路由路徑：</p>
<ol>
<li><code>/PageA/PageAComponent</code></li>
<li><code>/PageA/PageAAnotherComponent</code></li>
</ol>
<p>所以這邊在 <code>path</code> 中的設定，我們可以搭配路由參數的方式，簡化<br>
<code>&lt;Route&gt;</code> 的配置。</p>
<p>接著這邊遇到了一個小問題: 在原本的方式中，我們透過 component 的寫法來渲染對應的元件內容:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Switch</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/pageA&quot;</span> <span class="attr">component</span>=<span class="string">&#123;PageA&#125;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/pageB&quot;</span> <span class="attr">component</span>=<span class="string">&#123;PageB&#125;</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Switch</span>&gt;</span><br></pre></td></tr></table></figure>
<p>但是這樣的的方式並沒有辦法讓我們可以條件選擇要渲染的元件內容。</p>
<p>所以這邊我們要使用另外一種在 Router 中渲染元件內容的方式， 這邊我們使用 <code>render</code> 方法。</p>
<p>在 <code>render</code> 方法中， React Router 允許我們傳入 route 的 props 到這個函式中，於是我們可以透過判斷當前的路由來條件選擇要渲染的元件內容。</p>
<p>以上就是關於巢狀路由的簡單使用方式，接著讓我們往下繼續學習 Query 參數。</p>
<h2 id="Query-參數"><a class="header-anchor" href="#Query-參數"></a>Query 參數</h2>
<p>Query 參數最常應用的地方之一，就是有切換分頁行為的時候，當我們在切換分頁時，常常會看到類似這種 <code>http://xxxx/search?page=5</code> 的 url:</p>
<p>而這邊我們也透過一個簡單的測試範例來呈現這樣的 url 吧！</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/headless-moon-iut38?file=/src/App.js">點擊前往</a>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Link</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">parsingQueryParams</span> = (<span class="params">paramsString</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> searchParams = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(paramsString);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">of</span> searchParams) &#123;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Item</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [param, value] = <span class="title function_">parsingQueryParams</span>(props.<span class="property">location</span>.<span class="property">search</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Query 的參數為: &#123;param&#125;，值為 &#123;value&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">to</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">pathname:</span> &quot;/<span class="attr">item</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">search:</span> &quot;?<span class="attr">page</span>=<span class="string">1</span>&quot;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              模擬切換至 page 1</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">to</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">pathname:</span> &quot;/<span class="attr">item</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">search:</span> &quot;?<span class="attr">page</span>=<span class="string">2</span>&quot;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              模擬切換至 page 2</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/Item&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Item&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這邊一樣我們將將上方的程式碼的重點擷取出來:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Link</span></span><br><span class="line">  to=&#123;&#123;</span><br><span class="line">    <span class="attr">pathname</span>: <span class="string">&quot;/item&quot;</span>,</span><br><span class="line">    <span class="attr">search</span>: <span class="string">&quot;?page=2&quot;</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  模擬切換至 page <span class="number">2</span></span><br><span class="line">&lt;/<span class="title class_">Link</span>&gt;</span><br></pre></td></tr></table></figure>
<p><code>to</code> 除了可以接受字串格式之外，也可以接收物件格式，而所有可接受的格式為:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Link</span></span><br><span class="line">  to=&#123;&#123;</span><br><span class="line">    <span class="attr">pathname</span>: <span class="string">&quot;/courses&quot;</span>,</span><br><span class="line">    <span class="attr">search</span>: <span class="string">&quot;?sort=name&quot;</span>,</span><br><span class="line">    <span class="attr">hash</span>: <span class="string">&quot;#the-hash&quot;</span>,</span><br><span class="line">    <span class="attr">state</span>: &#123; <span class="attr">fromDashboard</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
<p>其中 <code>search</code> 就是用來設置 query 參數的位置。</p>
<p>當我們設定好 query 參數後，我們可以在點擊 <code>&lt;Link&gt;</code> 時發現到 url 在點擊時會是如下呈現:</p>
<p><img src="https://i.imgur.com/Q9tpkxm.png" alt=""></p>
<p>而另外一個值得學習的部分是，如何快速解析 query 參數，這邊我可以透過上方完整程式碼中的 <code>parsingQueryParams</code> 方法來處理:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">parsingQueryParams</span> = (<span class="params">paramsString</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 重點觀察位置</span></span><br><span class="line">  <span class="keyword">const</span> searchParams = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(paramsString);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">of</span> searchParams) &#123;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>透過建立一個 URLSearchParams 物件，並傳入如 <code>/item?page=2</code> 的字串，可以透過 <code>for..of</code> 的方式得到一個陣列值:</p>
<p>這裡借用上方的函式來執行看看會得到什麼結果:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="title function_">parsingQueryParams</span>(<span class="string">&#x27;?page=2&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [&quot;page&quot;, &quot;2&quot;]</span></span><br></pre></td></tr></table></figure>
<p>當我們需要處理 url 的 Query 參數時，這會是一個很好用的方式。</p>
<p>但需要注意的是這個方法在 IE 中並不支援，在使用時要注意。</p>
<h2 id="重導向"><a class="header-anchor" href="#重導向"></a>重導向</h2>
<p>今天最後要學習的是重導向(Redirect)，最常使用的情境大概就在於當使用者權限不足時，必須將使用者導航至首頁或者登入頁等等。</p>
<p>這邊我們一樣透過一個模擬情境來學習這個部分。</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/patient-paper-g5yl4?file=/src/App.js">點擊前往</a>。</p>
<p>首先我們會有一個登入畫面:</p>
<p><img src="https://i.imgur.com/PlHR2YM.png" alt=""></p>
<p>接著輸入帳號密碼之後，可以成功跳轉至 Home 元件內容中</p>
<p><img src="https://i.imgur.com/STUtJYl.png" alt=""></p>
<p>在 Home 元件內容中，設定一個用來模擬當頁面切換但驗證卻失敗的時候，跳轉回到登入畫面</p>
<p><img src="https://i.imgur.com/eGEqnYe.png" alt=""></p>
<p>接著這邊擷取重點程式碼來觀察：</p>
<p>首先是路由的配置:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">  &#123;<span class="comment">/* 重要觀察位置 */</span>&#125;</span><br><span class="line">  &lt;<span class="title class_">Redirect</span> to=<span class="string">&quot;/Login&quot;</span> /&gt;</span><br><span class="line">  &#123;<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">auth</span> ? (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">to</span>=<span class="string">&quot;/Home&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">render</span>=<span class="string">&#123;(props)</span> =&gt;</span> (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Home</span> <span class="attr">loginFailed</span>=<span class="string">&#123;this.loginFailed&#125;</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line">  ) : (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">to</span>=<span class="string">&quot;/Login&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">render</span>=<span class="string">&#123;(props)</span> =&gt;</span> <span class="tag">&lt;<span class="name">Login</span> <span class="attr">login</span>=<span class="string">&#123;this.login&#125;</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>當進入這個網頁時，透過 <code>&lt;Redirect&gt;</code> 將路由導航至登入畫面，路經變成 <code>/Login</code>，而網頁內容的部分則透過 state 中的 auth 判斷渲染的元件內容。</p>
<p>接著我們透過點擊登入按鈕時，修改 state 中 auth 的值，並將路由導航至 Home 元件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">login = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 重要觀察位置</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">auth</span>: <span class="literal">true</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">auth</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;模擬登入成功!!&quot;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">push</span>(<span class="string">&quot;/Home&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// console.log(this.props);</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>這邊需要注意的部分是透過 <code>withRouter</code> 這個 HOC 元件將 App 元件包住，才可以在 App 元件中使用到 route 物件中的方法 push。</p>
<p>然後在 Home 元件中設定了一個用來模擬身份失效時，導航至登入畫面的按鈕，觸發身份失敗時回到登入畫面的方法。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">loginFailed = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 重要觀察位置</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">auth</span>: <span class="literal">false</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">auth</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;身份驗證失敗，回到登入畫面!!&quot;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">push</span>(<span class="string">&quot;/Login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>重導向的使用基本上不難，所以就搭配著簡單的驗證方式來學習與理解囉。</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://reactrouter.com/web/guides/quick-start">React Router</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>在 vue cli3 中使用 vue2-google-maps 把玩 google map</title>
    <url>/2020/06/13/%E5%9C%A8-vue-cli3-%E4%B8%AD%E4%BD%BF%E7%94%A8-vue2-google-maps-%E6%8A%8A%E7%8E%A9-google-map/</url>
    <content><![CDATA[<p>此篇幅聚焦於如何快速透過 vue2-google-maps 來製作一個客製化需求的 google map。</p>
<span id="more"></span>
<p>如果之前有玩過 google 提供的 <a href="https://developers.google.com/maps/documentation/javascript/tutorial">範例</a>，那就能很快理解 vue2-google-maps 該怎麼使用。</p>
<p>至於透過原生寫法製作一個客製化需求 google map，則另外找時間再寫一篇了。</p>
<h2 id="安裝-注意事項"><a class="header-anchor" href="#安裝-注意事項"></a>安裝 &amp; 注意事項</h2>
<ul>
<li>安裝 vue2-google-maps:</li>
</ul>
<p>透過 <a href="https://www.npmjs.com/package/vue2-google-maps">npm</a> 或者 <a href="https://github.com/xkjyeah/vue-google-maps">github</a> 其實就可以很清楚知道該怎麼使用，寫的挺清楚的。</p>
<p>如果是透過 npm 方式安裝:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue2-google-maps</span><br></pre></td></tr></table></figure>
<p>順帶一提，如果透過 yarn 方式安裝則是:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add vue2-google-maps</span><br></pre></td></tr></table></figure>
<p>此外，作者也有提供將整份 <a href="https://github.com/xkjyeah/vue-google-maps/blob/vue2/dist/vue-google-maps.js">dist/vue-google-maps.js</a> 引入到 HTML 中的方式來使用，也提到了因為 HTML 採用 kebab case 的方式，所以要這麼寫:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 採用將整份 dist/vue-google-maps.js 引入到 HTML 中的方式 --&gt;</span><br><span class="line">&lt;gmap-map&gt;</span><br><span class="line">&lt;!-- 不可使用 --&gt;</span><br><span class="line">&lt;GmapMap&gt;</span><br></pre></td></tr></table></figure>
<p>但筆者此次專案需求並沒有使用到，所以就留給有需要的讀者玩看看囉。</p>
<ul>
<li>In main.js:</li>
</ul>
<p>設定 google map 需要的一些基本設定，例如像是金鑰等。</p>
<p>詳細的設定可以透過上述提供的連結查看，這裡筆者只單純設定了 key 和 libraries，並額外建立一支新的檔案管理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @/plugins/vue2GoogleMaps/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">VueGoogleMaps</span> <span class="keyword">from</span> <span class="string">&#x27;vue2-google-maps&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueGoogleMaps</span>, &#123;</span><br><span class="line">  <span class="attr">load</span>: &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;你的 Google map API key&#x27;</span>,</span><br><span class="line">    <span class="attr">libraries</span>: [<span class="string">&#x27;geometry&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./plugins/vue2GoogleMaps&#x27;</span>; </span><br></pre></td></tr></table></figure>
<h2 id="開始使用，以-Vue-file-components-為例"><a class="header-anchor" href="#開始使用，以-Vue-file-components-為例"></a>開始使用，以 Vue file components 為例</h2>
<ul>
<li>引入 component</li>
</ul>
<p>作者提到如果透過 Webpack 或者 Vue file components ，可以直接使用官方提供的 code：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;GmapMap</span><br><span class="line">  :center=&quot;&#123; lat:10, lng:10 &#125;&quot;</span><br><span class="line">  :zoom=&quot;7&quot;</span><br><span class="line">  map-type-id=&quot;terrain&quot;</span><br><span class="line">  style=&quot;width: 500px; height: 300px&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;GmapMarker</span><br><span class="line">    :key=&quot;index&quot;</span><br><span class="line">    v-for=&quot;(m, index) in markers&quot;</span><br><span class="line">    :position=&quot;m.position&quot;</span><br><span class="line">    :clickable=&quot;true&quot;</span><br><span class="line">    :draggable=&quot;true&quot;</span><br><span class="line">    @click=&quot;center=m.position&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/GmapMap&gt;</span><br></pre></td></tr></table></figure>
<p>筆者目前習慣將額外透過 vue <code>computed</code> 將設定統一管理，所以額外會寫成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;GmapMap</span><br><span class="line">  :center=&quot;&#123; lat:10, lng:10 &#125;&quot;</span><br><span class="line">  :options=&quot;mapOptions&quot;</span><br><span class="line">  :style=&quot;mapStyle&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;GmapMarker</span><br><span class="line">    :key=&quot;index&quot;</span><br><span class="line">    v-for=&quot;(m, index) in markers&quot;</span><br><span class="line">    :position=&quot;m.position&quot;</span><br><span class="line">    :clickable=&quot;true&quot;</span><br><span class="line">    :draggable=&quot;true&quot;</span><br><span class="line">    @click=&quot;center=m.position&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/GmapMap&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//... 略</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="title function_">mapOptions</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">zoom</span>: <span class="number">7</span>,</span><br><span class="line">      <span class="attr">mapTypeId</span>: <span class="string">&quot;terrain&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mapStyle</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="number">500</span> + <span class="string">&quot;px&quot;</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="number">300</span> + <span class="string">&quot;px&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這邊需要注意的是: 在官方 source code 中可以看出其把 <code>props</code> 的 <code>center</code> 的設定成 <mark><code>required: true</code></mark>，所以 <code>:center</code> 是必須被保留在 <code>template</code> 上的。 <a href="https://github.com/xkjyeah/vue-google-maps/blob/vue2/src/components-implementation/map.js">source code 連結</a></p>
<ul>
<li>把資料透過 markers 標記在地圖上</li>
</ul>
<p>把 componet 引入後，接著要來把<strong>資料標記在地圖上</strong>了</p>
<p>如果曾寫過 <a href="https://developers.google.com/maps/documentation/javascript/marker-clustering">原生</a> 的話對於這一個部分就不會太難理解</p>
<p>那如果是第一次使用則是可以先知道只要把 <strong>一個具有經緯度資料的陣列，當作 markers 的值傳入給 <code>GmapMarker</code> 即可。</strong></p>
<p>大致程式碼如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;GmapMap</span><br><span class="line">  :center=&quot;&#123; lat:10, lng:10 &#125;&quot;</span><br><span class="line">  :options=&quot;mapOptions&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;GmapMarker</span><br><span class="line">    :key=&quot;index&quot;</span><br><span class="line">    v-for=&quot;(m, index) in markers&quot;</span><br><span class="line">    :position=&quot;m.position&quot;</span><br><span class="line">    :clickable=&quot;true&quot;</span><br><span class="line">    :draggable=&quot;true&quot;</span><br><span class="line">    @click=&quot;center=m.position&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/GmapMap&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//... 略</span></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">markers</span>: [</span><br><span class="line">      &#123; </span><br><span class="line">        <span class="attr">position</span>: &#123; <span class="attr">lat</span>:<span class="number">20</span>, <span class="attr">lng</span>:<span class="number">20</span> &#125; </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; </span><br><span class="line">        <span class="attr">position</span>: &#123; <span class="attr">lat</span>:<span class="number">30</span>, <span class="attr">lng</span>:<span class="number">30</span> &#125; </span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>調用 Map 實例</li>
</ul>
<p>有時候我會需要調用一些方法，如同筆者在專案中需要用到計算兩點的直線距離為例，需要使用到的 google map api 中的 geometry 中的方法: <code>computeDistanceBetween</code>。</p>
<p>而官方也有開接口讓我們可以存取 Map instance:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;GmapMap ref=&quot;mapRef&quot; ...&gt;&lt;/GmapMap&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">mapRef</span>.<span class="property">$mapPromise</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">map</span>) =&gt;</span> &#123;</span><br><span class="line">      map.<span class="title function_">panTo</span>(&#123;<span class="attr">lat</span>: <span class="number">1.38</span>, <span class="attr">lng</span>: <span class="number">103.80</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>文件中也提到當 vue component 在 mounted 時，此時 map 還沒有被初始化，所以要透過 <code>then</code> 的方式等確定初始化後才可以使用那些方法。</p>
<p>不過筆者自己在測試時因為需要用到的方法在上述無法更快取得，於是搜尋了一下並改用下列方式取得要用的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">mapRef</span>.$gmapApiPromiseLazy().<span class="title function_">then</span>(<span class="function"><span class="params">map</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="title class_">LatLng</span>, geometry &#125; = map.<span class="property">maps</span>;</span><br><span class="line">    <span class="keyword">const</span> result = geometry.<span class="property">spherical</span>.<span class="title function_">computeDistanceBetween</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">LatLng</span>(&#123; <span class="attr">lat</span>:<span class="number">20</span>, <span class="attr">lng</span>:<span class="number">20</span> &#125;),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">LatLng</span>(&#123; <span class="attr">lat</span>:<span class="number">30</span>, <span class="attr">lng</span>:<span class="number">30</span> &#125;),</span><br><span class="line">    );</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">distance</span> = (result / <span class="number">1000</span>).<span class="title function_">toFixed</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>調用 google 物件</li>
</ul>
<p>官方額外有提供存取 google 物件的方式讓我們使用，但筆者在測試時卻是一直得到 null 的值，並不能正常的存取到。</p>
<p>所以如果有讀者成功取得的話，在麻煩底下留言給我，小弟不勝感激～</p>
<p>以上就是這次在 vue cli3 中使用 vue2-google-maps 的開發記錄，相關測試程式碼可以到我的 Github 找到：</p>
<p><a href="https://github.com/penghuachen/vue2-google-maps-demo/blob/master/src/App.vue">點擊前往 Github</a></p>
]]></content>
      <categories>
        <category>vue vue cli3</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>把玩 HTML Drag and Drop API</title>
    <url>/2021/01/31/%E6%8A%8A%E7%8E%A9-HTML-Drag-and-Drop-API/</url>
    <content><![CDATA[<p>距離上一次的發文好像又隔了好一段時間(遠目)</p>
<span id="more"></span>
<p>但 2021 年都已經又快過完一個月了，怎麼還能不開張呢!!</p>
<p>所以思來想去，最近剛好對於 HTML Drag and Drop API 的操作挺有興趣</p>
<p>所以決定 2021 年的首發就從把玩 Drag and Drop API 開始吧！！</p>
<h2 id="梳理文章架構"><a class="header-anchor" href="#梳理文章架構"></a>梳理文章架構</h2>
<p>今天的篇幅會大致會拆分為如下幾個區塊:</p>
<ol>
<li>了解 Drag and Drop API 的用途</li>
<li>了解如何設定可拖曳的元素與可以放置拖曳元素的區塊</li>
<li>了解使用 Drag and Drop API 時可以觸發的事件(情境)</li>
<li>其他語法的細節學習</li>
<li>兩個測試 Demo</li>
</ol>
<p>接著，就讓我們趕緊來把玩這個 API 吧！！</p>
<h2 id="了解-Drag-and-Drop-API-的用途"><a class="header-anchor" href="#了解-Drag-and-Drop-API-的用途"></a>了解 Drag and Drop API 的用途</h2>
<p>想運用這些 API 之前，一定要先知道這些 API 的用途，了解這些 API 可以讓我們運用在哪些使用情境上。</p>
<p>而 Drag and Drop API 透過單字的理解不難知道，這就是一個支援我們能夠在<mark>瀏覽器上拖曳元素及放置元素的 API</mark></p>
<p>而這一個 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/drag_event#examples">MDN Example</a> 可以讓讀者更快了解如何使用，以及呈現的方式。</p>
<p><img src="https://i.imgur.com/BrWK7Zo.gif" alt=""></p>
<p>接著，讓我們來看看怎麼<strong>設定一個可拖曳的元素與一個可以放置拖曳元素的區塊</strong>吧！！</p>
<h2 id="了解如何設定可拖曳的元素與可以放置拖曳元素的區塊"><a class="header-anchor" href="#了解如何設定可拖曳的元素與可以放置拖曳元素的區塊"></a>了解如何設定可拖曳的元素與可以放置拖曳元素的區塊</h2>
<p>在寫程式時，為了可以更有效率的解決問題，所以我們<strong>在動手之前一定要先思考它的使用者流程會是怎麼運作。</strong></p>
<p>以今天把玩的 Drag and Drop API 為例，我們會知道一個基本的拖曳與放置的流程會經過以下的流程:</p>
<p><mark>1. 使用者選取到一個可以被拖曳(draggle)的元素<br>
2. 將可被拖曳的元素拖曳到可以放置拖曳元素(dropple)的區塊<br>
3. 將元素放置(drop)到該區塊</mark></p>
<p>而上述的一個簡單的拖曳和放置的流程，我們可以搭配 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API#the_basics">MDN</a> 的部分來看看會用到哪些語法</p>
<h3 id="首先，由「使用者選取到一個可以被拖曳-draggle-的元素」可以思考到，我們必須設定一個可以被拖曳-draggle-的元素，才能讓瀏覽器分辨哪些是可以被拖曳而哪些不行。"><a class="header-anchor" href="#首先，由「使用者選取到一個可以被拖曳-draggle-的元素」可以思考到，我們必須設定一個可以被拖曳-draggle-的元素，才能讓瀏覽器分辨哪些是可以被拖曳而哪些不行。"></a><strong>首先，由「使用者選取到一個可以被拖曳(draggle)的元素」可以思考到，我們必須設定一個可以被拖曳(draggle)的元素</strong>，才能讓瀏覽器分辨哪些是可以被拖曳而哪些不行。</h3>
<p>而設定上也很簡單，只是加上 <code>draggable=&quot;true&quot;</code> 即可。</p>
<p>這邊附上最後要呈現的其中一個小測試 Demo 的程式碼：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p id=&quot;drag-text&quot; draggable=&quot;true&quot;&gt;This is a draggable text&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>然後為了知道這個可拖曳(draggle)的元素什麼時候會被拖曳(drag)，我們需要<strong>替它註冊一個 dragstart 事件，在元素被拖曳時觸發。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dragText = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#drag-text&quot;</span>);</span><br><span class="line">dragText.<span class="title function_">addEventListener</span>(<span class="string">&quot;dragstart&quot;</span>, dragStart);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dragStart</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;drag start!&#x27;</span>);</span><br><span class="line">  e.<span class="property">dataTransfer</span>.<span class="title function_">setData</span>(<span class="string">&quot;text/plain&quot;</span>, e.<span class="property">target</span>.<span class="property">id</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你也許會困惑 <code>e.dataTransfer.setData(&quot;text/plain&quot;, e.target.id)</code> 這一行程式碼的用途，這邊可以先簡單理解，<strong>瀏覽器會需要將正在拖曳的元素相關的數據儲存起來做後續的應用</strong>，所以當元素觸發 <code>dragstart</code> 事件時，必須執行上述該行的程式碼。</p>
<p>這邊我們先看看有沒有成功註冊了 <code>dragstart</code> 事件：</p>
<p><img src="https://i.imgur.com/cSGb7dh.gif" alt=""></p>
<h3 id="接著，「將可被拖曳的元素拖曳到可以放置拖曳元素-dropple-的區塊」可以知道我們需要配置一塊可以放置拖曳元素的區域，然後將元素放置-drop-到該區塊"><a class="header-anchor" href="#接著，「將可被拖曳的元素拖曳到可以放置拖曳元素-dropple-的區塊」可以知道我們需要配置一塊可以放置拖曳元素的區域，然後將元素放置-drop-到該區塊"></a>接著，「將可被拖曳的元素拖曳到可以放置拖曳元素(dropple)的區塊」可以知道我們需要配置一塊可以放置拖曳元素的區域，然後將元素放置(drop)到該區塊</h3>
<p>在 HTML 中我們配置一個簡單的區塊如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ebeaea</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然後我們需要替這個區塊註冊兩個事件： <code>dragover</code> 與 <code>drop</code></p>
<ul>
<li><code>dragover</code> 事件<strong>會以每幾百毫秒的時間間隔來偵測拖曳元素是不是位於可以放置拖曳元素的區塊</strong>，</li>
<li><code>drop</code> 事件則是<strong>當被拖曳中元素於可以放置拖曳元素的區塊被使用者放開時會觸發</strong></li>
</ul>
<p>接著讓我們看看這兩個事件的設計:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>);</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&quot;drop&quot;</span>, drop)</span><br><span class="line"></span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&quot;dragover&quot;</span>, dragOver);</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&quot;drop&quot;</span>, drop);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dragOver</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;drag over!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">drop</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;drop&#x27;</span>);  </span><br><span class="line">  <span class="keyword">const</span> data = e.<span class="property">dataTransfer</span>.<span class="title function_">getData</span>(<span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  e.<span class="property">target</span>.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(data));</span><br><span class="line">  e.<span class="property">dataTransfer</span>.<span class="title function_">clearData</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這邊會困惑的點可能會有兩點：</p>
<ol>
<li>為什麼需要使用 <code>e.preventDefault()</code>？</li>
<li><code>e.dataTransfer.getData(&quot;text/plain&quot;);</code> 與 <code>e.dataTransfer.clearData();</code> 在此時的用途是？</li>
</ol>
<p>首先先解答第一點，為什麼需要使用 <code>e.preventDefault()</code>？原因是因為瀏覽器中可以被觸發的事件其實非常多，並且<mark>時常在觸發某個事件時也同時觸發了另一個事件</mark>，最常見之一莫過於<strong>同時觸發了 <code>click</code> 與 <code>blur</code> 事件造成的一些小困擾</strong>。</p>
<p>而拖曳事件同樣也會有這個問題，所以透過 <code>e.preventDefault()</code> 來<mark>阻止這個事件觸發時，也有額外的事件觸發</mark></p>
<p>接著是第二點，還是記得剛剛前面簡單瞭解的 <code>e.dataTransfer.setData(&quot;text/plain&quot;, e.target.id)</code> 嗎？ 我們把拖曳相關的狀態記錄起來，並在 <code>drop</code> 事件被觸發時可以透過 <code>e.dataTransfer.getData(&quot;text/plain&quot;);</code> 的方式<mark>取得這個我們儲存的拖曳元素</mark>，然後透過 <code>appendChild</code> 等等的方式將元素放置(drop)到該區塊。</p>
<p>而 <code>e.dataTransfer.clearData();</code> 則是用來清除這個我們儲存的拖曳元素的狀態</p>
<p>來看看實際執行的成果吧！！</p>
<p><img src="https://i.imgur.com/sJuaxJH.gif" alt=""></p>
<p>以上就完成一個簡單的拖放元素的操作囉!!蠻有趣而且 API 使用上也不會很難～</p>
<h2 id="了解使用-Drag-and-Drop-API-時可以觸發的事件-情境"><a class="header-anchor" href="#了解使用-Drag-and-Drop-API-時可以觸發的事件-情境"></a>了解使用 Drag and Drop API 時可以觸發的事件(情境)</h2>
<p>在前面我們完成了一個簡單的測試範例，接著要來看看除了上面提到的事件之外，我們還可以運用哪些事件。</p>
<p>這裡不賣關子，直接上測試範例的程式碼和執行結果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dragText = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#drag-text&quot;</span>);</span><br><span class="line">dragText.<span class="title function_">addEventListener</span>(<span class="string">&quot;dragstart&quot;</span>, drag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>);</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&quot;dragover&quot;</span>, dragOver);</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&quot;drop&quot;</span>, drop);</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&quot;dragenter&quot;</span>, dragEnter);</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&quot;dragleave&quot;</span>, dragLeave);</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&quot;dragend&quot;</span>, dragEnd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">drag</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;drag start!&#x27;</span>);</span><br><span class="line">  e.<span class="property">dataTransfer</span>.<span class="title function_">setData</span>(<span class="string">&quot;text/plain&quot;</span>, e.<span class="property">target</span>.<span class="property">id</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dragOver</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;drag over!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">drop</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;drop&#x27;</span>);  </span><br><span class="line">  <span class="keyword">const</span> data = e.<span class="property">dataTransfer</span>.<span class="title function_">getData</span>(<span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">  e.<span class="property">target</span>.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(data));</span><br><span class="line">  e.<span class="property">dataTransfer</span>.<span class="title function_">clearData</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dragEnter</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;drag enter!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dragLeave</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;drag leave!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dragEnd</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;drag end!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/T4VlHeX.gif" alt=""></p>
<ul>
<li><code>dragstart</code>: 可拖曳元素<strong>開始被拖曳時</strong>觸發</li>
<li><code>dragover</code>: 可拖曳元素<strong>進入</strong>到可放置拖曳元素的區塊時觸發</li>
<li><code>dragEnter</code>: 可拖曳元素<strong>進入</strong>到可放置拖曳元素的區塊時觸發</li>
<li><code>dragLeave</code>: 可拖曳元素<strong>離開</strong>到可放置拖曳元素的區塊時觸發</li>
<li><code>dragEnd</code>:  <strong>一個拖曳操作完成時</strong>觸發</li>
<li><code>drop</code>: 可拖曳元素<strong>放置</strong>在可放置拖曳元素的區塊時觸發</li>
</ul>
<p>而這些事件可以讓我們在拖曳過程中額外做很多事情，如同上面提到的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/drag_event#examples">MDN Example</a> ，在拖曳過程中的背景顏色等等的改變都是可以在這些事件中額外設定。</p>
<p><img src="https://i.imgur.com/BrWK7Zo.gif" alt=""></p>
<h2 id="其他語法的細節學習"><a class="header-anchor" href="#其他語法的細節學習"></a>其他語法的細節學習</h2>
<p>這個部分要來看的是 <code>DataTransfer</code> 物件中提供的一些方法和特性：</p>
<ol>
<li><code>dropEffect</code></li>
<li><code>effectAllowed</code></li>
<li><code>files</code></li>
<li><code>setData()</code></li>
<li><code>getData()</code></li>
<li><code>clearData()</code></li>
</ol>
<h3 id="DataTransfer-物件"><a class="header-anchor" href="#DataTransfer-物件"></a><code>DataTransfer</code> 物件</h3>
<p>這個物件是瀏覽器用來<strong>保存拖放操作期間要拖動的數據而建立的物件</strong>。</p>
<h4 id="DataTransfer-物件中的-dropEffect-與-effectAllowed"><a class="header-anchor" href="#DataTransfer-物件中的-dropEffect-與-effectAllowed"></a><code>DataTransfer</code> 物件中的 <code>dropEffect</code> 與 <code>effectAllowed</code></h4>
<p>而這個物件提供了 <code>dropEffect</code> 與 <code>effectAllowed</code> 兩個特性來判定拖曳過程時 <mark>鼠標的樣式呈現與是否是一個符合當前拖曳操作類型的行為</mark>，可以透過這兩個特性來規定。</p>
<p>首先先看看 <code>dropEffect</code> 的效果，有四種值可設定：</p>
<ul>
<li><code>none</code></li>
<li><code>copy</code></li>
<li><code>link</code></li>
<li><code>move</code></li>
</ul>
<p>這裡擷取設定 <code>dropEffect</code> 的程式碼方便讀者閱讀:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dragOver</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;drag over!&#x27;</span>);</span><br><span class="line">  e.<span class="property">dataTransfer</span>.<span class="property">dropEffect</span> = <span class="string">&quot;copy&quot;</span>; <span class="comment">// control how cursor displays</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當我們將 <code>dropEffect</code> 效果設定為 <code>copy</code> 時：</p>
<p><img src="https://i.imgur.com/aPbMg1R.gif" alt=""></p>
<p>可以清楚看見鼠標樣式與前面的測試範例長得非常不同，適用於 <code>copy</code> 時鼠標的呈現。</p>
<p>接著是 <code>effectAllowed</code> 用來判定當前的拖曳操作是否為符合的操作，有九種值可設定：</p>
<ul>
<li><code>none</code></li>
<li><code>copy</code></li>
<li><code>link</code></li>
<li><code>move</code></li>
<li><code>copyLink</code></li>
<li><code>copyMove</code></li>
<li><code>linkMove</code></li>
<li><code>all</code></li>
<li><code>uninitialized</code></li>
</ul>
<p>為了更便於理解，這邊設定一個測試情境：</p>
<p><strong><code>dropEffect</code> 設定為 <code>copy</code> 的情境，但是 <code>effectAllowed</code> 卻是 <code>move</code></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dragStart</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;drag start!&#x27;</span>);</span><br><span class="line">  <span class="comment">// console.log(e);</span></span><br><span class="line">  e.<span class="property">dataTransfer</span>.<span class="title function_">setData</span>(<span class="string">&quot;text/plain&quot;</span>, e.<span class="property">target</span>.<span class="property">id</span>)</span><br><span class="line">  event.<span class="property">dataTransfer</span>.<span class="property">effectAllowed</span> = <span class="string">&quot;move&quot;</span>; <span class="comment">// limit what drag effect is allowed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dragOver</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;drag over!&#x27;</span>);</span><br><span class="line">  e.<span class="property">dataTransfer</span>.<span class="property">dropEffect</span> = <span class="string">&quot;copy&quot;</span>; <span class="comment">// control how cursor displays</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同樣的來看看效果：</p>
<p><img src="https://i.imgur.com/v5OiunQ.gif" alt=""></p>
<p>會發現因為允許的拖曳操作為 <code>move</code>，但當前的拖曳操作行為為 <code>copy</code> ，因此無法成功放置拖曳元素。</p>
<h4 id="DataTransfer-物件中的-files"><a class="header-anchor" href="#DataTransfer-物件中的-files"></a><code>DataTransfer</code> 物件中的 <code>files</code></h4>
<p><mark>當使用情境是從本地拖曳一個文件類型的資料到可以放置拖曳元素的區域時，<code>files</code> 中會記錄這個資料相關的資訊</mark></p>
<p>這裡我們透過從本地拖曳一張圖片來觀察 <code>files</code> 的變化：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">drop</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;drop&#x27;</span>); </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">dataTransfer</span>.<span class="property">files</span>[<span class="number">0</span>]);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/mY01dSD.gif" alt=""></p>
<p>這個方式讓我們可以做出好比說像是<strong>拖曳本地圖片到瀏覽器中特地位置然後預覽</strong>的的效果，很是方便呢！！</p>
<h4 id="DataTransfer-物件中的-setData-getData-clearData"><a class="header-anchor" href="#DataTransfer-物件中的-setData-getData-clearData"></a><code>DataTransfer</code> 物件中的 <code>setData()</code>, <code>getData()</code>, <code>clearData()</code></h4>
<p><code>setData()</code> 允許我們將拖曳操作的資料<strong>設定為指定的數據和類型</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> dataTransfer.<span class="title function_">setData</span>(format, data);</span><br></pre></td></tr></table></figure>
<p>這裡的 <code>format</code> 指的是 <a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME TYPE</a> 規範的規則，有興趣的讀者可以前往閱讀。</p>
<p>而 <code>data</code> 則是我們指定要拖曳的元素所儲存的資料。</p>
<p>然後透過 <code>getData()</code> 取出符合類型的拖曳資料，我們就可以執行後續的想要的操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dataTransfer.<span class="title function_">getData</span>(format);</span><br></pre></td></tr></table></figure>
<p>而 <code>clearData()</code> 則是用來刪除剛剛給定類型的資料</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dataTransfer.<span class="title function_">clearData</span>([format]);</span><br></pre></td></tr></table></figure>
<h2 id="測試-Demo"><a class="header-anchor" href="#測試-Demo"></a>測試 Demo</h2>
<p>文章的最後不免俗的要將今天學習的部分做個測試範例，當作本篇幅的最後總結</p>
<p>這邊提供筆者在測試時所做的範例提供給有興趣的讀者測試看看囉!!</p>
<ul>
<li>相關測試範例： <a href="https://codesandbox.io/s/vigorous-star-2vzg6?file=/index.html">點擊前往</a>。</li>
<li>筆者的 <a href="https://github.com/penghuachen">Github</a></li>
</ul>
<h2 id="參考來源"><a class="header-anchor" href="#參考來源"></a>參考來源</h2>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API#the_basics">HTML Drag and Drop API</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer">DataTransfer</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/getData">DataTransfer.getData()</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/clearData">DataTransfer.clearData()</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setData">DataTransfer.setData（）</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#draggableattribute">Drag Operations</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME 類別 (IANA 媒體類別)</a></li>
</ul>
]]></content>
      <categories>
        <category>html5</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>html5</tag>
      </tags>
  </entry>
  <entry>
    <title>建立第一個 React Code</title>
    <url>/2020/09/17/%E5%BB%BA%E7%AB%8B%E7%AC%AC%E4%B8%80%E5%80%8B-React-Code/</url>
    <content><![CDATA[<h1 id="建立第一個-React-Code"><a class="header-anchor" href="#建立第一個-React-Code"></a>建立第一個 React Code</h1>
<p>學習新技術的第一天總是精神奕奕，趕緊跟 React 好朋友學習吧！</p>
<span id="more"></span>
<p>今天 React 好朋友跟我說，學習一門技術最快的方式就是把手弄髒(get hands dirty)，所以它打算透過舉一個簡單的範例來讓我了解 React 是如何建立一個元件(component) 並將資料傳入到元件中(component)的。</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/affectionate-leftpad-pi2eu?file=/src/App.js">點擊前往</a>。</p>
<h2 id="初探-React，建立第一個元件"><a class="header-anchor" href="#初探-React，建立第一個元件"></a>初探 React，建立第一個元件</h2>
<h3 id="React-環境建置-使用-create-react-app"><a class="header-anchor" href="#React-環境建置-使用-create-react-app"></a>React 環境建置: 使用 create-react-app</h3>
<p>往下理解 React 如何建立元件(component)之前，需要先建立環境。</p>
<p>而這裡則透過使用 <strong>create-react-app 的方式建立環境</strong></p>
<p>至於建立的方式則是可以參考官方提供的方式： <a href="https://github.com/facebook/create-react-app#quick-overview">Quick Overview</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line"><span class="built_in">cd</span> my-app</span><br><span class="line">npm start </span><br></pre></td></tr></table></figure>
<p>完成環境建置後，接著我們要開始建立第一個元件囉</p>
<h3 id="建立第一個元件-component"><a class="header-anchor" href="#建立第一個元件-component"></a>建立第一個元件(component)</h3>
<p>首先先來看看一個我們在 HTML 常見的撰寫:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;person&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Bill&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;Your Age: 26&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .person &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    margin: 10px;</span><br><span class="line">    border: 1px solid #eee;</span><br><span class="line">    box-shadow: 0 2px 2px #ccc;</span><br><span class="line">    width: 200px;</span><br><span class="line">    padding: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>接下來，我們要透過在 <strong>React 中建立元件，並且 DOM 架構會與上面的程式碼相同</strong>。</p>
<h4 id="建立第一個-Function-Component"><a class="header-anchor" href="#建立第一個-Function-Component"></a>建立第一個 Function Component</h4>
<p>最基本的方式之一是<strong>使用 function 建立的元件，也稱為 Function Component</strong>。</p>
<p>並且我們會使用到一種叫做 <strong>JSX 的語法</strong>幫助我們在建立元件(component)時可以更加容易。</p>
<p>JSX 語法在此時的出現也許會造成一些疑問，不過這於接下來的文章中會深入了解，所以這邊我們先理解怎麼使用即可。</p>
<p>接著，我們在專案中建立 PersonOne 元件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ./src/components/PersonOne</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">PersonOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;person&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bill<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Your Age: 26<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> personOne;</span><br></pre></td></tr></table></figure>
<p>在 App.js 中引入這個元件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PersonOne</span> <span class="keyword">from</span> <span class="string">&quot;./components/PersonOne&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>建立第一個 Function Component<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">PersonOne</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這邊需要注意的重點是:</p>
<ul>
<li><strong>因為 <code>class</code> 在 JS 是保留字，所以另外寫成 <code>className</code>。</strong> 這個部分的說明可以在文件中查到，<a href="https://zh-hant.reactjs.org/docs/introducing-jsx.html#specifying-attributes-with-jsx">前往文件</a>。</li>
<li>將 <code>PersonOne</code> Component export ，在 App.js 中使用。</li>
</ul>
<p>如果沒意外的話，應該可以成功看到我們透過 React 建立的元件已經顯示在畫面上了。</p>
<p>但是上面的元件存在一個問題: <strong>無法有效的複用</strong>，因為值是固定的(hard code)。</p>
<p>因此這邊我們需要建立一個可以<strong>傳遞自定義參數</strong>的函式，這樣我們才可以<strong>依據不同的值，渲染出不同的資料</strong>。</p>
<p>所以這邊我們需要改寫一下剛剛程式碼，讓它更有彈性一些。</p>
<p>為了保留比較，這邊建立 <code>PersonTwo</code> Component:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">PersonTwo</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, age &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;person&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123; name &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Your Age: &#123; age &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 App.js 中引入這個元件，並且傳遞自定義的參數:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PersonOne</span> <span class="keyword">from</span> <span class="string">&quot;./components/PersonOne&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PersonTwo</span> <span class="keyword">from</span> <span class="string">&quot;./components/PersonTwo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>建立第一個 Function Component<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">PersonOne</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">PersonTwo</span> <span class="attr">name</span>=<span class="string">&quot;Mark&quot;</span> <span class="attr">age</span>=<span class="string">&quot;27&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這邊需要注意的重點是：</p>
<ul>
<li>在 React 元件中透過在<strong>大括號 <code>&#123;&#125;</code> 中寫入變數</strong>，可以取得動態傳入的值。</li>
<li>在 React component 中，<strong>允許我們透過 <code>props</code> 這個物件，將自定義的參數傳到 function 中使用</strong>。</li>
</ul>
<p>上述的篇幅學習了如何建立一個 Function Component，接著讓我們來看看如何建立一個 Class-based Component 吧！</p>
<h4 id="建立一個-Class-based-Component"><a class="header-anchor" href="#建立一個-Class-based-Component"></a>建立一個 Class-based Component</h4>
<p>這裡我們將 PersonTwo 的程式碼從原本的 <strong>Function Component 改寫成 Class-based Component，PersonThree。</strong></p>
<p>使用 ES6 Class 語法達成：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonThree</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, age &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;person&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Your Age: &#123;age&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">PersonThree</span>;</span><br></pre></td></tr></table></figure>
<p>引入到 App.js 後的使用方式相同。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 略</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PersonThree</span> <span class="keyword">from</span> <span class="string">&quot;./components/PersonThree&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     // ...略</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>建立一個可傳入自定義參數的 Class-based Component<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">PersonThree</span> <span class="attr">name</span>=<span class="string">&quot;Terry&quot;</span> <span class="attr">age</span>=<span class="string">&quot;17&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>透過 ES6 Class 建立的元件有幾個地方需要注意:</p>
<ol>
<li><strong>Class-based Component 使用 props 的方式需要透過 <code>this</code> 來取得。</strong></li>
<li>透過 <code>render()</code> 方法將內容渲染在網頁上。</li>
</ol>
<p>以上就是 React 好朋友在今天想要讓我先了解的部分~</p>
<p>它告訴我雖然一下子就提供了看似很難的例子，但這邊可以先記住使用的方式，並且在往後的天數裡會慢慢帶領我學習今天使用的種種技巧的細節。</p>
<p>程式碼同步發佈於:</p>
<ol>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ol>
<p>就這樣囉，明天見~</p>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://zh-hant.reactjs.org/docs/introducing-jsx.html#specifying-attributes-with-jsx">在 JSX 中指定屬性</a></li>
<li><a href="https://github.com/facebook/create-react-app#quick-overview">Quick Overview</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>把玩 Leaflet</title>
    <url>/2021/05/05/%E6%8A%8A%E7%8E%A9-Leaflet/</url>
    <content><![CDATA[<div style="text-align: center">
  <img src="https://i.imgur.com/JRqzMRD.png">
</div>
<h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2>
<p>Leaflet 是一套開源的地圖服務，此外這套服務在網頁端與手機端都可以有良好的使用者體驗。</p>
<span id="more"></span>
<p>如果讀者在之前有嘗試過 Google 的地圖服務，那麼在使用這套服務時相信不會遇到太大的問題，因為使用方式上並不會有太迥異的做法。</p>
<p>但如果是第一次接觸地圖服務的讀者，那麼也不用擔心，筆者今天會依據 <a href="https://leafletjs.com/examples/quick-start/">Leaflet Quick Start Guide</a> 的篇幅一步步測試文章中提到的部分。</p>
<p>不得不說的是，<a href="https://leafletjs.com/examples/quick-start/">Leaflet Quick Start Guide</a> 的內容真的很淺顯易懂，只要願意花心思好好看完，對於 Leaflet 的基礎應用就可以上手囉！</p>
<p>而快速入門的篇幅大概可以歸納出以下的範圍，這裡整理出來方便讀者梳理文章的重點：</p>
<ol>
<li>透過 CDN 引入 Leaflet 服務</li>
<li>建立第一個地圖(Map)</li>
<li>使用圖層服務設定地圖風格</li>
<li>在地圖上畫出範圍(range)：以圓形(circle)和多邊形(polygon)為例</li>
<li>設定第一個 marker 與使用 popup</li>
<li>在整體地圖與 marker 建立可以觸發的點擊(click)事件</li>
</ol>
<p>而本篇幅會依據使用情境的增加，逐步的更新上來，所以有興趣把玩 Leaflet 的讀者可以持續追蹤哦！</p>
<h2 id="透過-CDN-引入-Leaflet-服務"><a class="header-anchor" href="#透過-CDN-引入-Leaflet-服務"></a>透過 CDN 引入 Leaflet 服務</h2>
<p>文件中其實寫的很清楚，只是需要特別注意的是<strong>引入的順序</strong>:</p>
<ol>
<li>Leaflet 的 CSS</li>
<li>Leaflet 的 Javascript</li>
</ol>
<p>引入這兩個檔案之後，後續就可以引入自己的 Javascript 與 CSS 囉</p>
<ul>
<li>CSS</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/leaflet@1.7.1/dist/leaflet.css&quot;</span><br><span class="line">   integrity=&quot;sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==&quot;</span><br><span class="line">   crossorigin=&quot;&quot;/&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>Javascript</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Make sure you put this AFTER Leaflet&#x27;s CSS --&gt;</span><br><span class="line"> &lt;script src=&quot;https://unpkg.com/leaflet@1.7.1/dist/leaflet.js&quot;</span><br><span class="line">   integrity=&quot;sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==&quot;</span><br><span class="line">   crossorigin=&quot;&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>到這裡，我們已經將 Leaflet 的地圖服務引入到專案裡囉，接著要初始化一個地圖</p>
<h2 id="建立第一個地圖-Map"><a class="header-anchor" href="#建立第一個地圖-Map"></a>建立第一個地圖(Map)</h2>
<p>首先，我們需要準備一個用來建立的地圖時使用的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- you can change id name whatever you want!--&gt;</span><br><span class="line">&lt;div id=&quot;mapid&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>然後給予這個容器一個高度，這樣才能顯示地圖：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#mapid</span> &#123; <span class="attribute">height</span>: <span class="number">600px</span>; &#125;</span><br></pre></td></tr></table></figure>
<p>到這裡我們已經準備好一個地圖，接著我們要設定這個地圖初始化時的座標位置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mymap = L.<span class="title function_">map</span>(<span class="string">&#x27;mapid&#x27;</span>).<span class="title function_">setView</span>([<span class="number">51.505</span>, -<span class="number">0.09</span>], <span class="number">13</span>);</span><br></pre></td></tr></table></figure>
<p>這邊搭配 <a href="https://leafletjs.com/reference-1.7.1.html">API 文件</a> 查看，可以知道 <code>L.map</code> 用來初始化一個 map 實例，而 <code>setView</code> 可以用來設定中心點與初始 zoom 的值。</p>
<p>此外文件有提到一件事情是筆者覺得很方便的部分：</p>
<blockquote>
<p>Note that setView call also returns the map object — most Leaflet methods act like this when they don’t return an explicit value, which allows convenient jQuery-like method chaining.</p>
</blockquote>
<p><strong>意思是如果調用的 method 不是會明確回傳一個值的 method，那麼就會回傳一個 map 的物件(這個物件包含許多 methods)，便於我們透過像是 jQuery 那樣使用 method chaining 的寫法使用這些方法</strong>，真的是很便利！</p>
<p>這邊舉個後面會提到的例子，剛剛這段話的實際寫法大概如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// method chaining 的寫法</span></span><br><span class="line"><span class="keyword">var</span> popup = L.<span class="title function_">popup</span>()</span><br><span class="line">  .<span class="title function_">setLatLng</span>([<span class="number">51.5</span>, -<span class="number">0.09</span>])</span><br><span class="line">  .<span class="title function_">setContent</span>(<span class="string">&quot;I am a standalone popup.&quot;</span>)</span><br><span class="line">  .<span class="title function_">openOn</span>(mymap);</span><br></pre></td></tr></table></figure>
<p>這個時候我們已經建立了地圖與設定後初始縮放(zoom)與中心點了，如果照著設定的讀者應該會發現此時的地圖長這樣：</p>
<p><img src="https://i.imgur.com/oLW7IjE.png" alt=""></p>
<p>看起來好像壞掉了對吧？ 不要擔心，接下來讓我們把地圖的內容呈現出來吧！</p>
<h3 id="使用圖層-tile-layer-服務設定地圖風格"><a class="header-anchor" href="#使用圖層-tile-layer-服務設定地圖風格"></a>使用圖層(tile layer)服務設定地圖風格</h3>
<p>設計之前有幾個很重要的觀念，要知道 Leaflet 允許我們用不同的圖層服務來作為地圖內容呈現，意思是我們透過<strong>抽換圖層</strong>的方式能讓這個地圖的風格擁有非常多的風格</p>
<p>此外，使用這些圖層服務需要了解使用時有什麼需要注意的地方</p>
<p>最後是使用這些服務基本上與使用 Google 地圖服務類似，都需要一個 key，只是 Google 地圖的 key 除了讓我們可以正常使用地圖外，更重要的是作為收費的重要參數，<strong>而 Leaflet 在此則是需要取得圖層服務的 <code>access_token</code> 作為使用這些圖層的判定</strong></p>
<p>而文件使用 <a href="https://www.mapbox.com/">mapbox</a> 的圖層服務，所以我們必須先取得剛剛提到的  <code>access_token</code>  後續才能使用這個圖層(tile layer)，建立一個  <code>access_token</code> 的方式則參考 <a href="https://www.mapbox.com/studio/account/tokens/">request an access token</a>。</p>
<p>接著我們將圖層應用到我們的地圖上：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">L.<span class="title function_">tileLayer</span>(<span class="string">&#x27;https://api.mapbox.com/styles/v1/&#123;id&#125;/tiles/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;?access_token=&#123;accessToken&#125;&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">attribution</span>: <span class="string">&#x27;Map data &amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors, Imagery © &lt;a href=&quot;https://www.mapbox.com/&quot;&gt;Mapbox&lt;/a&gt;&#x27;</span>,</span><br><span class="line">    <span class="attr">maxZoom</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;mapbox/streets-v11&#x27;</span>,</span><br><span class="line">    <span class="attr">tileSize</span>: <span class="number">512</span>,</span><br><span class="line">    <span class="attr">zoomOffset</span>: -<span class="number">1</span>,</span><br><span class="line">    <span class="attr">accessToken</span>: <span class="string">&#x27;your.mapbox.access.token&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">addTo</span>(mymap);</span><br></pre></td></tr></table></figure>
<p>這邊快速提一下這些參數的定義，詳細的設定則要到 API 文件中查看。</p>
<ul>
<li>使用 <a href="https://leafletjs.com/reference-1.7.1.html#tilelayer-url-template">URL template</a> 設定</li>
<li><code>attribution</code>: 標注貢獻者</li>
<li><code>maxZoom</code>: 最大縮放參數，超過則以 <code>maxZoom</code> 的值為準</li>
<li><code>id</code>: 圖層服務的圖層 style 的對應 id， 可參考 <a href="https://docs.mapbox.com/api/maps/styles/#mapbox-styles">Mapbox styles</a></li>
<li><code>tileSize</code>: 每一圖格的大小，預設是 256</li>
<li><code>zoomOffset</code>: 縮放偏移量</li>
<li><code>accessToken</code>： 存取該圖層服務的 token</li>
</ul>
<p>關於 <code>tileSize</code> 與 <code>zoomOffset</code> 的設定可以參考 <a href="https://docs.mapbox.com/help/troubleshooting/migrate-legacy-static-tiles-api/#leaflet-implementations">mapbox - Leaflet implementations</a> 提到的 warning:</p>
<blockquote>
<p>Warning<br>
By default, the modern Static Tiles API returns a 512×512 map tile, instead of the 256×256 that Mapbox classic styles returned. If you do not include the tileSize: 512 and zoomOffset: -1 options, your map will still load but labels, icons, and other features may appear much smaller than expected.</p>
</blockquote>
<p>如果照著設定的讀者應該可以成功看到地圖的內容囉：</p>
<p><img src="https://i.imgur.com/kYzRkZi.png" alt=""></p>
<p>接著我們要來開始在地圖上加上一些東西了！</p>
<h3 id="在地圖上畫出範圍-range-：以圓形-circle-和多邊形-polygon-為例"><a class="header-anchor" href="#在地圖上畫出範圍-range-：以圓形-circle-和多邊形-polygon-為例"></a>在地圖上畫出範圍(range)：以圓形(circle)和多邊形(polygon)為例</h3>
<p>以畫出一個圓形(circle)和多邊形(polygon)為例，要調用的方法如下：</p>
<ul>
<li>圓形(circle): <code>L.circle(&lt;LatLng&gt; latlng, &lt;Circle options&gt; options?)</code></li>
<li>多邊形(polygon): <code>L.polygon(&lt;LatLng[]&gt; latlngs, &lt;Polyline options&gt; options?)</code></li>
</ul>
<p>相關的設定可以參考文件，這邊筆者只有替換地圖的座標而已：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 圓形(circle)</span></span><br><span class="line"><span class="keyword">var</span> circle = L.<span class="title function_">circle</span>([<span class="number">22.9990296</span>,<span class="number">120.2106981</span>], &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&quot;#f00&quot;</span>,</span><br><span class="line">  <span class="attr">fillColor</span>: <span class="string">&quot;#f03&quot;</span>,</span><br><span class="line">  <span class="attr">fillOpacity</span>: <span class="number">0.5</span>,</span><br><span class="line">  <span class="attr">radius</span>: <span class="number">500</span></span><br><span class="line">&#125;).<span class="title function_">addTo</span>(mymap);</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/fmIrAHm.jpg" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多邊形(polygon)</span></span><br><span class="line"><span class="keyword">var</span> polygon = L.<span class="title function_">polygon</span>([</span><br><span class="line">  [<span class="number">22.9990296</span>,<span class="number">120.2106981</span>],</span><br><span class="line">  [<span class="number">22.9990541</span>,<span class="number">120.204132</span>],</span><br><span class="line">  [<span class="number">23.0038765</span>,<span class="number">120.2100078</span>],</span><br><span class="line">]).<span class="title function_">addTo</span>(mymap);</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/OUlVfDN.jpg" alt=""></p>
<h3 id="設定第一個-marker-與使用-popup"><a class="header-anchor" href="#設定第一個-marker-與使用-popup"></a>設定第一個 marker 與使用 popup</h3>
<p>了解如何設定範圍之後，接著要來看看最常使用的設定：建立 marker</p>
<p>首先先看看 marker 要調用的方法：<br>
<code>L.marker(&lt;LatLng&gt; latlng, &lt;Marker options&gt; options?)</code></p>
<p>接著看如何使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> marker = L.<span class="title function_">marker</span>([<span class="number">22.9990296</span>,<span class="number">120.2106981</span>]).<span class="title function_">addTo</span>(mymap);</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/TH0AKFH.png" alt=""></p>
<p>那麼假設我有多組資料需要呈現多個 marker 呢？</p>
<p>其實不難，可以參考以下設計：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123; <span class="attr">lat</span>: <span class="number">22.9990296</span>, <span class="attr">lng</span>: <span class="number">120.2106981</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">lat</span>: <span class="number">22.9991296</span>, <span class="attr">lng</span>: <span class="number">120.2116981</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">lat</span>: <span class="number">22.9992296</span>, <span class="attr">lng</span>: <span class="number">120.2126981</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">data.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  L.<span class="title function_">marker</span>([item.<span class="property">lat</span>, item.<span class="property">lng</span>]).<span class="title function_">addTo</span>(mymap);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/5YupCAY.png" alt=""></p>
<p>了解如何設定 marker 後，接著還有一個很常搭配使用的設定，那就是 popup 的資訊視窗</p>
<p>而操作 popup 的顯示、關閉與資訊內容有幾種方式：</p>
<ol>
<li>只能在 marker 上使用的方法： <code>.bindPopup()</code></li>
<li>可應用在整個地圖的方法： <code>L.popup()</code></li>
</ol>
<p>在 <code>.bindPopup()</code> 中我們可以設定要呈現的內容，以範例為例：</p>
<p>搭配 <code>.openPopup()</code> 可以一開始就顯示 popup</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">marker.<span class="title function_">bindPopup</span>(<span class="string">&quot;&lt;b&gt;Hello world!&lt;/b&gt;&lt;br&gt;I am a popup.&quot;</span>).<span class="title function_">openPopup</span>();</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/OUlKOIY.png" alt=""></p>
<p>而透過 <code>L.popup()</code> 則可以透過 method chaining 的方式使用多個 method 設定，這裡依序設定了座標(<code>setLatLng</code>)、要顯示的內容(<code>setContent</code>)與在地圖上打開 popup 的方法(<code>openOn</code>)</p>
<p>來看看如何使用:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> popup = L.<span class="title function_">popup</span>()</span><br><span class="line">  .<span class="title function_">setLatLng</span>([<span class="number">22.9990396</span>,<span class="number">120.2206991</span>])</span><br><span class="line">  .<span class="title function_">setContent</span>(<span class="string">&quot;I am a standalone popup.&quot;</span>)</span><br><span class="line">  .<span class="title function_">openOn</span>(mymap);</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/SthHdfB.jpg" alt=""></p>
<h3 id="在整個地圖與-marker-建立可以觸發的點擊-click-事件"><a class="header-anchor" href="#在整個地圖與-marker-建立可以觸發的點擊-click-事件"></a>在整個地圖與 marker 建立可以觸發的點擊(click)事件</h3>
<p>文件最後學習的是如何觸發事件，而這裡則是透過 <code>on</code> 的方式觸發事件，這裡以點擊事件為例：</p>
<p>首先是一個只在 marker 上點擊時才觸發的事件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> marker2 = L.<span class="title function_">marker</span>([<span class="number">22.9990296</span>,<span class="number">120.2006981</span>]).<span class="title function_">addTo</span>(mymap);</span><br><span class="line"></span><br><span class="line">marker2.<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, onMarkerClick);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onMarkerClick</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  L.<span class="title function_">popup</span>()</span><br><span class="line">    .<span class="title function_">setLatLng</span>(e.<span class="property">latlng</span>)</span><br><span class="line">    .<span class="title function_">setContent</span>(<span class="string">&quot;You clicked the map at &quot;</span> + e.<span class="property">latlng</span>.<span class="title function_">toString</span>())</span><br><span class="line">    .<span class="title function_">openOn</span>(mymap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外一個是點擊地圖任何一處都可以被觸發的事件:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mymap = L.<span class="title function_">map</span>(<span class="string">&#x27;map&#x27;</span>).<span class="title function_">setView</span>([<span class="number">22.9990296</span>,<span class="number">120.2106981</span>], <span class="number">16</span>);</span><br><span class="line">mymap.<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, onMapClick);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onMapClick</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;You clicked the map at &quot;</span> + e.<span class="property">latlng</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上是 <a href="https://leafletjs.com/examples/quick-start/">Leaflet Quick Start Guide</a> 提到的入門內容，如果讀者們有理解的話，基本就可以做一些基礎的應用囉！</p>
<h3 id="測試範例"><a class="header-anchor" href="#測試範例"></a>測試範例</h3>
<p>測試範例，<a href="https://codesandbox.io/s/leaflet-t0pjf">點擊前往</a>。</p>
<h2 id="參考"><a class="header-anchor" href="#參考"></a>參考</h2>
<ul>
<li><a href="https://leafletjs.com/">leafletjs</a></li>
<li><a href="https://leafletjs.com/examples/quick-start/">Leaflet Quick Start Guide</a></li>
<li><a href="https://leafletjs.com/reference-1.7.1.html">API document</a></li>
<li><a href="https://www.mapbox.com/">mapbox</a></li>
<li><a href="https://docs.mapbox.com/help/troubleshooting/migrate-legacy-static-tiles-api/#leaflet-implementations">mapbox - Leaflet implementations</a></li>
<li><a href="https://www.mapbox.com/studio/account/tokens/">request an access token</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>把玩 vue-chartjs</title>
    <url>/2021/05/01/%E6%8A%8A%E7%8E%A9-vue-chartjs/</url>
    <content><![CDATA[<div style="text-align: center">
  <img src="https://i.imgur.com/3RiBUvM.png">
</div>
<h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2>
<p>vue-chartjs 是基於 chart.js 服務封裝成 vue component 的圖表服務，基本上常見的圖表需求都可以透過這個服務達到目的。</p>
<span id="more"></span>
<p>由於筆者這陣子在專案中有使用圖表的需求，但要實作的功能只是簡單的將 API 回來的資料渲染到圖表上而已，並沒有辦法運用到這個服務的全部功能，所以筆者決定採用逐次更新的方式完善這個服務的學習。</p>
<p>所以如果有興趣的讀者可以持續關注此篇幅，內容會不定期更新！</p>
<p>那麼就趕緊進入主題吧！</p>
<h2 id="安裝-vue-chartjs-、-chart-js"><a class="header-anchor" href="#安裝-vue-chartjs-、-chart-js"></a>安裝 vue-chartjs 、 chart.js</h2>
<p>使用 vue-chartjs 時要同時安裝 chart.js 才可以，畢竟是基於 chart.js 封裝而來的服務。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add vue-chartjs chart.js </span><br><span class="line"></span><br><span class="line">npm install vue-chartjs chart.js --save</span><br></pre></td></tr></table></figure>
<h3 id="安裝後遇到版本更新後導致的錯誤"><a class="header-anchor" href="#安裝後遇到版本更新後導致的錯誤"></a>安裝後遇到版本更新後導致的錯誤</h3>
<p>如果是大約 2021 年4月 之後使用這個服務的讀者可能會遇到以下的報錯：</p>
<p><img src="https://i.imgur.com/2BkyErz.png" alt=""></p>
<p><strong>報錯原因在於 chart.js 服務 v3 後的版本在 vue cli 中使用會有問題導致</strong></p>
<p>然而將版本調降至 v2 的版本後就可以正常使用了</p>
<p>這邊提供在 github 中這個 issue 的討論，有興趣的讀者可以持續關注這個問題是否已經被修正： <a href="https://github.com/apertureless/vue-chartjs/issues/695">Chart.js 3.0 support #695</a>。</p>
<p>不過尚未修正前，讀者們可能只能先暫時透過 v2 版本使用這個服務了。</p>
<p>順帶一提，chat.js v2 與 v3 版本的文件可是不同的哦，附上連結：</p>
<ul>
<li><a href="https://www.chartjs.org/docs/2.9.4/">前往 v2.9.4 文件(v2 最新版本)</a></li>
<li><a href="https://www.chartjs.org/docs/latest/">前往 v3.2.0 文件(v3 最新版本)</a></li>
</ul>
<p>解決安裝時的小插曲後，接著來建立第一個圖表吧！</p>
<h2 id="建立第一個-vue-chart-js-圖表"><a class="header-anchor" href="#建立第一個-vue-chart-js-圖表"></a>建立第一個 vue-chart.js 圖表</h2>
<p>如果讀者有前往 <a href="https://vue-chartjs.org/zh-cn/guide/#vue-%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6">vue-chart.js 文件</a> 閱讀的話第一次看會有幾點需要注意的部分：</p>
<ul>
<li><strong>圖表使用的元件不能使用 <code>&lt;template&gt;</code> 標籤</strong></li>
<li><strong>更新圖表的幾種方式</strong></li>
</ul>
<p>至於不能使用 <code>&lt;template&gt;</code> 標籤的原因在文件中也有描述：</p>
<blockquote>
<p>不要使用Template標籤<br>
不要在你的.vue文件中引入<code>&lt;template&gt;</code>標籤. Vue無法合併模板.如果你添加了一個空的<code>&lt;template&gt;</code>標籤, Vue將會從你的主鍵裡獲取模板,而不會從你extend中獲取,這將導致頁面為空並報錯.</p>
</blockquote>
<p>接著讓我們先從建立一個 Line Chart 開始：</p>
<h3 id="建立一個-Line-Chart"><a class="header-anchor" href="#建立一個-Line-Chart"></a>建立一個 Line Chart</h3>
<p>根據 <a href="https://vue-chartjs.org/zh-cn/guide/#vue-%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6">vue-chart.js 文件</a> 可以梳理出一些步驟，假設今天要建立一個形式為 Line 的 chart ：</p>
<ol>
<li><strong>建立一個 component 將 vue-chartjs 封裝的 Line component 引入，</strong></li>
<li><strong>extend vue-chartjs 封裝的 Line component</strong></li>
<li><strong>建立 local data 或者取得由父層傳入的 props data</strong></li>
<li><strong>透過 <code>renderChart()</code> 建立圖表</strong></li>
</ol>
<p>所以這邊我們建立一個 LineChart 元件，而資料與額外圖表的設定(<code>options</code>) 則由父層 props 進來：<br>
<img src="https://i.imgur.com/koVRF9Z.png" alt=""></p>
<p>一個基本的 Line 圖表我們已經建立好了，接著我們從父層 props data 到這個元件中:</p>
<p><img src="https://i.imgur.com/nQVDmdF.png" alt=""></p>
<p>data 的格式參考 <a href="https://www.chartjs.org/docs/2.9.4/#creating-a-chart">chart.js</a> 服務中設定 data 的格式，這裡介紹一下這個 data 中的每個參數：</p>
<ul>
<li>第一層 <code>labels</code>: 類別軸定義，用於 x 軸(參考 <a href="https://www.chartjs.org/docs/2.9.4/axes/cartesian/category.html">Category Cartesian Axis</a>)</li>
<li><code>datasets</code>: 用來設定資料、樣式等等，依據圖表類型不同可設定的參數不一定相同(參考 <a href="https://www.chartjs.org/docs/2.9.4/charts/">Charts</a>)</li>
<li>第二層 <code>labels</code>: 顯示在圖表中對應的資料控制顯示，如下圖中的 「My First Dataset」
<ul>
<li><img src="https://i.imgur.com/VQwvQA7.png" alt=""></li>
</ul>
</li>
<li><code>borderColor</code>, <code>pointBackgroundColor</code> 等：用於樣式設定</li>
<li><code>options</code>: 該圖表的 config，如果有額外設定則需要寫在這裡</li>
<li><code>resonsive</code>: 用於設定該圖表是否需要響應式(Responsive)(參考 <a href="https://www.chartjs.org/docs/2.9.4/general/responsive.html">Responsive Charts</a>)</li>
<li><code>maintainAspectRatio</code>: 用於設定縮放時是否維持 canvas 的大小(圖表是透過 canvas 渲染的)(參考 <a href="https://www.chartjs.org/docs/2.9.4/general/responsive.html">Responsive Charts</a>)</li>
<li><code>title</code>: 用於設定該圖表的標題(參考 <a href="https://www.chartjs.org/docs/2.9.4/configuration/title.html">Title</a>)</li>
</ul>
<h3 id="新增-Line-Chart-中的數據"><a class="header-anchor" href="#新增-Line-Chart-中的數據"></a>新增 Line Chart 中的數據</h3>
<p>如果還沒有查看文件中關於新增圖表數據相關說明的讀者，可能在新增資料時會很直接地認為是不是只要把新的 data push 到 <code>datasets</code> 中就好了。</p>
<p>但很可惜並不是，在 <a href="https://vue-chartjs.org/zh-cn/guide/#%E6%9B%B4%E6%96%B0-charts">更新Charts</a> 提到：</p>
<blockquote>
<p>如果你修改了數據集, Chart.js是不會提供實時更新的</p>
</blockquote>
<p>不過 vue-chart.js 提供了兩種方便我們更新數據的方式：</p>
<ul>
<li><code>reactiveProp</code></li>
<li><code>reactiveData</code></li>
</ul>
<p>而這兩種方式的差別只在於<strong>資料是 local data 還是 props data 而已</strong></p>
<p><strong>不過在使用 <code>reactiveProp</code> 或者 <code>reactiveData</code> 需要注意的一點是關於 data 參數的限定，只能是 <code>chartData</code>，否則就會有 props 的錯誤。</strong></p>
<blockquote>
<p>…<br>
這兩個mixins其實實現的是相同的功能.大多數時間你將會使用 reactiveProp 它擴展了圖表組件的邏輯,並自動創建名為 chartData 的 prop s參數<br>
…</p>
</blockquote>
<p>由於我們在前面建立的測試範例資料是 props 的，所以這裡我們要使用 <code>reactiveProp</code> ，並依據 vue-chart.js 要求的寫法設定：</p>
<p><img src="https://i.imgur.com/eKi8eis.png" alt=""></p>
<p>然後我們在父層設定一個用來新增一筆資料的 <code>updata</code> method:</p>
<p><img src="https://i.imgur.com/lFuP0y2.png" alt=""></p>
<p>當點擊按鈕 2 秒後就可以看到一筆新的數據被新增到圖表中了，是不是非常簡單呢？</p>
<p>但也許會有讀者在想，有沒有辦法不要用 <code>chartData</code> 這個參數也一樣能更新圖表呢？</p>
<p>答案是：有的！</p>
<p>從文件中可以看到一段更新數據的描述：</p>
<blockquote>
<p>…<br>
並為這個參數添加vue watch.當數據改變,如果數據在數據集中改變,它將調用 update();如果添加了新的數據集,它將調用 renderChart()<br>
…</p>
</blockquote>
<p>從描述可以知道</p>
<ul>
<li>如果要新增資料，可以調用 <code>renderChart()</code></li>
<li>如果要更新資料，可以調用 <code>update()</code></li>
</ul>
<p>這邊我們梳理出一些步驟來測試：</p>
<ol>
<li>將 <code>chartData</code> 命名變更為 <code>customChartData</code></li>
<li>watch Line component 中 props 的 <code>customChartData</code></li>
<li>如果資料有新增，調用 <code>renderChart()</code></li>
<li>如果資料有更新，調用 <code>update()</code></li>
</ol>
<p>首先先看新增資料的時候，此時 Line component 的程式碼設計如圖：</p>
<p><img src="https://i.imgur.com/1gBkvyI.png" alt=""></p>
<p>父層為：</p>
<p><img src="https://i.imgur.com/TXyKUAa.png" alt=""></p>
<p>以上設定就可以不受命名的限制但依然可以新增資料到圖表囉！</p>
<p>除了 <code>renderChart()</code> 之外，我們再來測試更新數據時要用到的 <code>update()</code></p>
<p>而更新時則要透過這樣的方式使用 chart.js 中定義好的 <code>update()</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// delegate update method in __prtot__</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$data</span>.<span class="property">_chart</span>.<span class="title function_">update</span>()</span><br></pre></td></tr></table></figure>
<p>此時 Line component 的程式碼設計如圖：</p>
<p><img src="https://i.imgur.com/eqSkp43.png" alt=""></p>
<p>父層為：</p>
<p><img src="https://i.imgur.com/oXJIP70.png" alt=""></p>
<p>以上完成了一個基本 Line 圖表的呈現設定與更新數據，相關的測試範例，<a href="https://codesandbox.io/s/vue-chartjs-demo-9jtmk">點擊前往</a>。</p>
<h2 id="參考"><a class="header-anchor" href="#參考"></a>參考</h2>
<ul>
<li><a href="https://vue-chartjs.org/zh-cn/"> vue-chartjs</a></li>
<li><a href="https://www.chartjs.org/">Chart.js</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>把玩 vue-leaflet</title>
    <url>/2021/05/09/%E6%8A%8A%E7%8E%A9-vue-leaflet/</url>
    <content><![CDATA[<div style="text-align: center;">
  <img style="width: 300px;" src="https://i.imgur.com/mxzFK5g.png">
</div>
<h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2>
<p>vue Leaflet 是一套將開源的地圖服務 <a href="https://leafletjs.com/">Leaflet</a> 封裝成 vue 版本的服務，所以如果曾經使用過 Leaflet 的讀者相信在上手這一個套件可以很快瞭解怎麼使用。</p>
<span id="more"></span>
<p>如果還沒有用過 <a href="https://leafletjs.com/">Leaflet</a> 的讀者可以先前往筆者另外一篇 <a href="https://penghuachen.github.io/2021/05/05/%E6%8A%8A%E7%8E%A9-Leaflet/">把玩 Leaflet</a> 文章先瞭解看看 Leaflet 怎麼使用哦！</p>
<p>該篇文章以 <a href="https://leafletjs.com/examples/quick-start/">Leaflet Quick Start Guide</a> 的官方快速入門文件為依據並且一一測試篇幅中提到的部分，以及加上筆者自己額外過程中的理解而寫成的文章，有興趣的讀者可以前往查看。</p>
<p>另外為了方便讀者閱讀，這裡整理出來方便讀者梳理文章的重點：</p>
<ol>
<li>安裝 vue-leaflet</li>
<li>建立第一個地圖(Map)，設定座標中心點</li>
<li>使用圖層服務設定地圖風格</li>
<li>在地圖上畫出範圍(range)：以圓形(circle)和多邊形(polygon)為例</li>
<li>設定第一個 marker 、建立一個 marker 的點擊(click)事件與使用 popup</li>
<li>解決在 vue-leaflet 中 marker icon 無法顯示的問題</li>
<li>如何在 vue-leaflet 中使用 leaflet 提供的方法</li>
</ol>
<p>而本篇幅會依據使用情境的增加，逐步的更新上來，所以有興趣把玩 Leaflet 的讀者可以持續追蹤哦！</p>
<h2 id="安裝-vue-leaflet"><a class="header-anchor" href="#安裝-vue-leaflet"></a>安裝 vue-leaflet</h2>
<p>參考官方文件的安裝方式，這邊筆者透過 Yarn 的方式安裝：</p>
<ul>
<li>Npm</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install leaflet vue2-leaflet --save</span><br></pre></td></tr></table></figure>
<ul>
<li>Yarn</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add leaflet vue2-leaflet</span><br></pre></td></tr></table></figure>
<ul>
<li>CDN</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;//unpkg.com/leaflet/dist/leaflet.css&quot; /&gt;</span><br><span class="line">&lt;script src=&quot;//unpkg.com/leaflet/dist/leaflet.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;//unpkg.com/vue2-leaflet&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="建立第一個地圖-Map-，設定座標中心點"><a class="header-anchor" href="#建立第一個地圖-Map-，設定座標中心點"></a>建立第一個地圖(Map)，設定座標中心點</h2>
<p>在 vue 我們可以透過註冊在全域的方式讓整個專案都可以使用 leaflet，也可以只在想要的 component 中使用，這邊採取在特定的 component 中使用的方式</p>
<p>此外可以記得一個使用的要領： <strong>vue-leaflet 把所有在 leaflet 使用的如 marker 等等都封裝成 component ，讓我們可以直接在 vue template 中使用</strong></p>
<p>然後要記得無論採取哪一種都要在 <code>main.js</code> 中引入 leaflet 的 css 檔案哦！</p>
<p><img src="https://i.imgur.com/gxWV3wI.png" alt=""></p>
<p>接著我們來建立第一個地圖：</p>
<p>vue-leaflet <strong>將 leaflet 的 map 封裝成 <code>LMap</code>，因此我們需要透過 <code>ref=&quot;myMap&quot;</code> 的方式來使用 leaflet 中提供的方法</strong></p>
<p>而透過 <code>this.$refs.myMap.mapObject</code> 取得的結果其實就和在 leaflet 中使用 <code>L.map('map')</code> 初始化地圖後取得的結果一樣(都會取得一個回傳的 mapOject)</p>
<p>然後我們透過 <code>setView()</code> 為這個地圖設定一個中心點座標：</p>
<p><img src="https://i.imgur.com/phnwGhH.png" alt=""></p>
<p>如果你有看到如下的畫面代表你已經成功建立地圖囉！</p>
<p>至於什麼都看不到並不是因為壞掉，而是因為我們還沒有幫他加上圖層(tile layer)，接著我們來幫他加上圖層顯示地圖的內容吧！</p>
<p><img src="https://i.imgur.com/PLCD9XR.png" alt=""></p>
<h2 id="使用圖層服務設定地圖風格"><a class="header-anchor" href="#使用圖層服務設定地圖風格"></a>使用圖層服務設定地圖風格</h2>
<p>設定圖層風格時我們需要使用 <code>LTileLayer</code> component，並且設定好對應需要的參數資料。</p>
<p>以目前的測試為例，我們要使用的是 <a href="https://www.mapbox.com/">mapbox</a> 這個服務中圖層風格，所以我們如下的參數：</p>
<p><img src="https://i.imgur.com/Ohi75p3.png" alt=""></p>
<p>如果不知道如何在 mapbox 中取得 <code>accessToken</code> 的話，可以參考 <a href="https://www.mapbox.com/studio/account/tokens/">request an access token</a></p>
<p>至於有些參數為什麼要這樣設定則可以參考 <a href="https://docs.mapbox.com/help/troubleshooting/migrate-legacy-static-tiles-api/#leaflet-implementations">mapbox - Leaflet implementations</a></p>
<p>沒意外的話，應該可以成功看到以下內容囉：</p>
<p><img src="https://i.imgur.com/osp0WnD.jpg" alt=""></p>
<p>接著我們在地圖上設計些內容吧！</p>
<h2 id="在地圖上畫出範圍-range-：以圓形-circle-和多邊形-polygon-為例"><a class="header-anchor" href="#在地圖上畫出範圍-range-：以圓形-circle-和多邊形-polygon-為例"></a>在地圖上畫出範圍(range)：以圓形(circle)和多邊形(polygon)為例</h2>
<p>在 vue leaflet 中要畫出一個圓形的範圍，需要透過 <code>LCircle</code> 元件，可以設定的參數可以參考 <a href="https://vue2-leaflet.netlify.app/components/LCircle.html">LCircle</a>。</p>
<p>而要畫出一個多邊形則需要 <code>LPolygon</code> ，可以設定的參數則參考 <a href="https://vue2-leaflet.netlify.app/components/LPolygon.html">LPolygon</a></p>
<p>接著我們在測試範例中加上這兩個元件吧！</p>
<p>我們將圓形和多邊形範圍設定需要的參數設定好</p>
<ul>
<li>
<p>圓形<br>
<img src="https://i.imgur.com/Epc9LkL.png" alt=""></p>
</li>
<li>
<p>多邊形<br>
<img src="https://i.imgur.com/pLh0W85.png" alt=""></p>
</li>
</ul>
<p>並在 <code>template</code> 中使用 <code>LCircle</code> 、 <code>LPolygon</code> 元件</p>
<p><img src="https://i.imgur.com/zMMQN0d.png" alt=""></p>
<p>設定之後可以在地圖上看到以下內容囉！</p>
<p><img src="https://i.imgur.com/VG8swrq.jpg" alt=""></p>
<h2 id="設定第一個-marker-、建立一個-marker-的點擊-click-事件與使用-popup"><a class="header-anchor" href="#設定第一個-marker-、建立一個-marker-的點擊-click-事件與使用-popup"></a>設定第一個 marker 、建立一個 marker 的點擊(click)事件與使用 popup</h2>
<p>marker 應該是在地圖上最常遇到的應用，通常會搭配 popup 視窗呈現一些資訊</p>
<p>而在 vue leaflet 中使用的方式也很簡單</p>
<p>在 <code>template</code> 中將 <code>LMarker</code> 寫在 <code>LMap</code> 中：</p>
<p><img src="https://i.imgur.com/sC0OpJU.png" alt=""></p>
<p>然後設定好座標 <code>lat-lng</code>:</p>
<p><img src="https://i.imgur.com/FMYTiis.png" alt=""></p>
<p>就可以在畫面上看到 marker 囉！</p>
<p><img src="https://i.imgur.com/SH58biZ.jpg" alt=""></p>
<p>接著我們替這個 marker 建立一個點擊事件，並且在被點擊時顯示彈跳視窗，內容為目前這個 marker 的座標資訊</p>
<p><img src="https://i.imgur.com/Vv39qhE.png" alt=""></p>
<p>在 <code>LMarker</code> 中設定一個 <code>LPopup</code> ，我們就可以把想要的內容呈現在 popup 中，所以當點擊 marker 時，我們可以看到這樣的呈現：</p>
<p><img src="https://i.imgur.com/4JetJG8.jpg" alt=""></p>
<h2 id="解決在-vue-leaflet-中-marker-icon-無法顯示的問題"><a class="header-anchor" href="#解決在-vue-leaflet-中-marker-icon-無法顯示的問題"></a>解決在 vue-leaflet 中 marker icon 無法顯示的問題</h2>
<p>如果是第一次使用 <code>LMarker</code> 時可能會發現 Icon 無法正常顯示，而這部分在文件中也有提到解決的方案，可以參考 <a href="https://vue2-leaflet.netlify.app/quickstart/#marker-icons-are-missing">fix marker icon missing in vue-leaflet</a> 篇幅。</p>
<p>讓我們在專案中將這個修復方案加上：</p>
<p><img src="https://i.imgur.com/yaCHf0n.png" alt=""></p>
<h2 id="如何在-vue-leaflet-中使用-leaflet-提供的方法"><a class="header-anchor" href="#如何在-vue-leaflet-中使用-leaflet-提供的方法"></a>如何在 vue-leaflet 中使用 leaflet 提供的方法</h2>
<p>在 Leaflet 中，調用它提供的方法通常都會是透過 <code>L</code> 這個 reference 來呼叫，而這在 vue-leaflet 如果想要的話也是可以的</p>
<p>這裡我們設計一個情境：不透過 <code>LMarker</code> 建立一個 marker，改用 <code>L.maker</code> 的方式在地圖上再加入一個 marker，並可以點擊出現一個資訊視窗呈現一些內容</p>
<p>首先我們要使用 <code>L</code> 這個 reference 必須先引入：</p>
<p><img src="https://i.imgur.com/p6SJbTq.png" alt=""></p>
<p>然後在初始化地圖時建立一個 marker:</p>
<p><img src="https://i.imgur.com/DtJZQib.png" alt=""></p>
<p>如果是單純使用 Leaflet 的話，寫法就會如下方的方式在地圖中加入我們需要的內容</p>
<p>沒意外的話，可以成功看到一個直接開啟的訊息視窗囉！</p>
<p><img src="https://i.imgur.com/1ZcmIC2.jpg" alt=""></p>
<h2 id="測試範例"><a class="header-anchor" href="#測試範例"></a>測試範例</h2>
<p>測試範例，<a href="https://codesandbox.io/s/vue-leaflet-43cpe?file=/src/components/MapComponent.vue">點擊前往</a>。</p>
<h2 id="參考"><a class="header-anchor" href="#參考"></a>參考</h2>
<ul>
<li><a href="https://vue2-leaflet.netlify.app/">vue leaflet</a></li>
<li><a href="https://leafletjs.com/">Leaflet</a></li>
<li><a href="https://penghuachen.github.io/2021/05/05/%E6%8A%8A%E7%8E%A9-Leaflet/">把玩 Leaflet</a></li>
<li><a href="https://leafletjs.com/examples/quick-start/">Leaflet Quick Start Guide</a></li>
<li><a href="https://www.mapbox.com/">mapbox</a></li>
<li><a href="https://www.mapbox.com/studio/account/tokens/">request an access token</a></li>
<li><a href="https://docs.mapbox.com/help/troubleshooting/migrate-legacy-static-tiles-api/#leaflet-implementations">mapbox - Leaflet implementations</a></li>
<li><a href="https://vue2-leaflet.netlify.app/components/LCircle.html">LCircle</a></li>
<li><a href="https://vue2-leaflet.netlify.app/components/LPolygon.html">LPolygon</a></li>
<li><a href="https://vue2-leaflet.netlify.app/quickstart/#marker-icons-are-missing">fix marker icon missing in vue-leaflet</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>拉開序幕，認識 React 好朋友</title>
    <url>/2020/09/16/%E6%8B%89%E9%96%8B%E5%BA%8F%E5%B9%95%EF%BC%8C%E8%AA%8D%E8%AD%98-React-%E5%A5%BD%E6%9C%8B%E5%8F%8B/</url>
    <content><![CDATA[<h1 id="拉開序幕，認識-React-好朋友"><a class="header-anchor" href="#拉開序幕，認識-React-好朋友"></a>拉開序幕，認識 React 好朋友</h1>
<p>胎嘎後，大家好，沒想到今年我又決定參加鐵人賽了。</p>
<span id="more"></span>
<p>而今年要撰寫的主題已經非常清楚的寫在標題上，那就是想透過這三十天和 React 交個朋友培養一下感情～</p>
<p>按照慣例，還是需要寫一下這三十天預期想達成的目標。</p>
<p>這次的目標期許自己可以完成以下的學習:</p>
<ol>
<li><strong>React</strong> 的相關使用方式</li>
<li><strong>React Router</strong>，建立路由導航</li>
<li><strong>React Redux</strong>，學習管理共同狀態</li>
<li>透過一個小小的 <strong>Side Project</strong> 將這次的學習運用進去</li>
</ol>
<p>而依據上述的學習目標會嘗試分成幾個軸線延伸:</p>
<p>首先是:</p>
<ol>
<li>React 定義的一些術語，<strong>舉凡 JSX 語法、 React Element 的定義</strong>等等。</li>
<li>Class-based Component 與相關的使用，例如**「事件操作」、「生命週期」、「狀態(State)更新」、「傳遞狀態(State)到元件中」**等。</li>
<li>Function Component 與相關的使用，<strong>了解 React hooks 相較於 Class-based Component ，可以做到什麼事情</strong></li>
<li>在 React 中<strong>管理樣式的幾種方式(CSS modules、Styled component)</strong> 等</li>
<li>學習 <strong>HOC(Higher Order Component)</strong> 的觀念與基礎的使用</li>
</ol>
<p>接著是透過 React Router 建立整個 React 應用程式的頁面導航：</p>
<ol>
<li><strong>基本切換頁面</strong>的方式</li>
<li><strong>傳遞動態參數切換頁面</strong></li>
<li><strong>巢狀路由</strong>的設定</li>
<li>建立一個 <strong>Router Config 集中管理路由</strong></li>
<li><strong>透過 hook 的方式改寫</strong></li>
</ol>
<p>然後是學習 Redux ，管理共同的狀態:</p>
<ol>
<li>學習 <strong>Redux 觀念與運作方式</strong></li>
<li><strong>同步資料流的操作</strong></li>
<li>使用 <strong>Thunk、 Saga 處理非同步資料流</strong></li>
<li><strong>透過 hook 的方式改寫</strong></li>
</ol>
<p>而來到本次鐵人賽的最後，預計透過做出一個小小的 Side Project 將本次學習到的部分做一個驗收</p>
<p>至於是什麼呢？ 就讓我賣個關子吧(<strong><s>絕對不是因為還沒有想到要做什麼</s></strong>)</p>
<p>明天就讓 React 好朋友帶著我一同摸索 React 的世界啦!</p>
<p>我們明天見~</p>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>整理 Vue2 中在元件裡達到雙向綁定的幾種方式</title>
    <url>/2021/04/27/%E6%95%B4%E7%90%86-Vue2-%E4%B8%AD%E5%9C%A8%E5%85%83%E4%BB%B6%E8%A3%A1%E9%81%94%E5%88%B0%E9%9B%99%E5%90%91%E7%B6%81%E5%AE%9A%E7%9A%84%E5%B9%BE%E7%A8%AE%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>快速記錄一下幾個<mark>在 Vue2 中達成雙向綁定的方式</mark>：</p>
<ul>
<li><code>props</code> / <code>emit</code></li>
<li><code>sync</code> / <code>update</code></li>
<li>在元件上預設使用 <code>v-model</code> 的方式</li>
<li>在元件上客製化使用 <code>v-model</code> 的方式</li>
</ul>
<p>文章篇幅僅擷取重點程式碼部分，完整程式碼請移步至 <a href="https://codesandbox.io/s/vue-custom-event-2klo8?file=/src/App.vue">測試範例</a> 查看。</p>
<span id="more"></span>
<h2 id="使用-props-emit-的方式"><a class="header-anchor" href="#使用-props-emit-的方式"></a>使用 <code>props</code> / <code>emit</code> 的方式</h2>
<p>在父層的設計：</p>
<p><img src="https://i.imgur.com/u7XdEpn.png" alt=""></p>
<p>在子層(CustomComponent)的設計：</p>
<p><img src="https://i.imgur.com/k3bpc0z.png" alt=""></p>
<h2 id="使用-sync-update-的方式"><a class="header-anchor" href="#使用-sync-update-的方式"></a>使用 <code>sync</code> / <code>update</code> 的方式</h2>
<p>在父層的設計：</p>
<p><img src="https://i.imgur.com/IYnSEFL.png" alt=""></p>
<p>在子層(CustomComponent)的設計：</p>
<p><img src="https://i.imgur.com/y3Xwxxd.png" alt=""></p>
<h2 id="在元件上預設使用-v-model-的方式"><a class="header-anchor" href="#在元件上預設使用-v-model-的方式"></a>在元件上預設使用 <code>v-model</code> 的方式</h2>
<p><mark>預設 binding attribute： value / event: input</mark></p>
<p>在父層的設計：</p>
<p><img src="https://i.imgur.com/GiGzGRg.png" alt=""></p>
<p>在子層(CustomComponent)的設計：</p>
<p><img src="https://i.imgur.com/Qdq1nA7.png" alt=""></p>
<h2 id="在元件上客製化使用-v-model-的方式"><a class="header-anchor" href="#在元件上客製化使用-v-model-的方式"></a>在元件上客製化使用 <code>v-model</code> 的方式</h2>
<p><mark>客製化 binding attribute： value3 /event: use-v-model</mark></p>
<p>在父層的設計：</p>
<p><img src="https://i.imgur.com/UGTtRHf.png" alt=""></p>
<p>在子層(CustomComponent)的設計：</p>
<p><img src="https://i.imgur.com/yX4wNwP.png" alt=""></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>條件 Render、列表與 key</title>
    <url>/2020/09/25/%E6%A2%9D%E4%BB%B6-Render%E3%80%81%E5%88%97%E8%A1%A8%E8%88%87-key/</url>
    <content><![CDATA[<p>今天要學習的是如何根據<strong>條件判斷，渲染(render)對應需求的元件(Component)，以及根據資料渲染多個相同的元件(Component)</strong>。</p>
<span id="more"></span>
<p>這個部分要先掌握著一個很重要的觀念， <strong>在 React 的條件渲染(render) 與 JavaScript 一致，並沒有不同。</strong> 一樣可以透過三元運算子或者 if 建立與目前 state 中狀態一致的 React element，並更新畫面(UI)。</p>
<p>而渲染列表的部分同樣與 JavaScript 一致，我們可以<strong>透過 <code>map</code> 方法回傳一個具有 React element 元素的陣列來達成。</strong></p>
<p>接著，讓我們先個別看看怎麼撰寫，並在最後一樣透過情境來練習這個部分吧!</p>
<h2 id="條件-Render-React-element"><a class="header-anchor" href="#條件-Render-React-element"></a>條件 Render React element</h2>
<p>在 Vue 中如果我們需要透過條件判斷對應渲染的 DOM 部分，我們會透過 <code>v-if</code> 的方式達成:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p v-if=&quot;isShow&quot;&gt;I&#x27;m here!&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>相關測試範例，<a href="https://codesandbox.io/s/stupefied-galileo-twose?file=/src/App.vue:244-245">點擊前往</a>。</p>
<p>透過控制 <code>isShow</code> 的方式，決定是否要建立或銷毀這個 dom，而在 React 中則跟 JavaScript 的方式一樣，如果你曾經寫過類似下面的程式碼，那對於在 React 中如何條件渲染就不會太陌生:</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/goofy-shannon-bkl34">點擊前往</a>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dom = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123; isShow ? <span class="string">&#x27;&lt;p&gt;I\&#x27;m here!&lt;p&gt;&#x27;</span> : <span class="literal">null</span> &#125;</span></span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure>
<p>上述的方式是透過判斷 <code>isShow</code> 來決定是否渲染 <code>&lt;p&gt;I\'m here!&lt;/p&gt;</code> ，接著讓我們看看如果是在 JSX 中的寫法，以 function component 為例:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Test</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123; isShow ? <span class="tag">&lt;<span class="name">p</span>&gt;</span>I&#x27;m here!<span class="tag">&lt;/<span class="name">p</span>&gt;</span> : null &#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比較上面原生寫法與 React 的寫法是不是幾乎一樣呢?</p>
<p>了解了條件渲染後，接著來看看如何關於列表渲染的部分。</p>
<h2 id="列表與-key"><a class="header-anchor" href="#列表與-key"></a>列表與 key</h2>
<p>如同前面提到的部分：「<strong>透過 <code>map</code> 方法回傳一個具有 React element 元素的陣列來達成列表渲染。</strong>」，來看看一個簡單的情境：</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/admiring-water-p2y7l?file=/src/App.js">點擊前往</a>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>透過 map 渲染一個列表 List<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;[1, 2, 3, 4, 5].map((num) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>這是數字: &#123;num&#125;。<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">          &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述的寫法也可以寫成如下的方式：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Elements</span> = (<span class="params">&#123; arr &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">map</span>(<span class="function">(<span class="params">num, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>這是數字: &#123;num&#125;。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>透過 map 渲染一個列表 List<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        // ... 略</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>另一種渲染列表的方式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Elements</span> <span class="attr">arr</span>=<span class="string">&#123;arr&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在 React 中可以透過不同的寫法達到相同的結果，是不是很彈性呢?</p>
<p>關於列表渲染的部分，最後要提的是 Key 這個獨特的屬性，來看看 React 對於 key 的解釋:</p>
<blockquote>
<p>Key 幫助 React 分辨哪些項目被改變、增加或刪除。在 array 裡面的每個 element 都應該要有一個 key，如此才能給予每個 element 一個固定的身份。</p>
</blockquote>
<p>透過 <code>key</code> 才能讓列表中的每一個 React element 都是唯一的，讓我們替上面的例子新增一個 <code>key</code> 吧！</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Elements</span> = arr =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">map</span>(<span class="function">(<span class="params">num, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;</span> <span class="attr">index</span> &#125;&gt;</span>這是數字: &#123;num&#125;。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Test</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Elements</span> <span class="attr">arr</span>=<span class="string">&#123;</span> <span class="attr">arr</span> &#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>這邊需要注意的部分有以下幾點:</p>
<ol>
<li>React 不建議透過索引值作為 key，因為 key 可能會因為資料順序改變而改變 key 值，這對效能會產生不好的影響。</li>
<li>如果不明確的分配 key 值的話，預設會使用<strong>索引值</strong> 作為 key</li>
<li>如果資料是有固定的 <code>id</code> 值，請使用 <code>id</code> 作為 key 的值</li>
<li>React Component 不能讀取透過 props.key 的方式讀取到 key 的值，如果需要，則額外提供其他名稱作為 prop 到元件中的值。</li>
</ol>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>認識 React Hooks 之三</title>
    <url>/2020/10/14/%E8%AA%8D%E8%AD%98-React-Hooks-%E4%B9%8B%E4%B8%89/</url>
    <content><![CDATA[<p>今天是探索 Hooks 基礎觀念的最後一天，要學習的是 <code>useImperativeHandle</code>、<code>useLayoutEffect</code> 、如何打造自己的 Hook 與使用 Hook 時需要注意的幾個規則。</p>
<span id="more"></span>
<p>而打造自己的 Hook 的部分只會了解觀念，運用的部分則不在今天的範圍之內。</p>
<p>學習 React Hooks 基礎觀念的探索之旅也在今天的篇幅會暫時告一段落，接著就要靠著實務經驗來挖掘更多深層的觀念。</p>
<p>那事不宜遲，趕緊今天的學習吧！</p>
<h2 id="useImperativeHandle"><a class="header-anchor" href="#useImperativeHandle"></a><code>useImperativeHandle</code></h2>
<p>在前幾天的篇幅有介紹到如果需要像是 focus 在 input 元素之類的需求，我們可以透過 <code>useRef</code> 的方式達成。</p>
<p>但如果今天這個 <strong>input 元素是額外再封裝成一個 component 的話</strong>，而父 component 也想要對於這個被額外封裝成 component 的 input 元素可以執行像是 focus 的需求的話，那這時候就還需要用到 <code>useImperativeHandle</code> 這個 Hook</p>
<p>這裡讓我們看看這個測試範例:</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/romantic-ritchie-jvkdu?file=/src/components/BaseInput/index.jsx">點擊前往</a>。</p>
<p>首先我們先如同之前使用 <code>useRef</code> 的方式一樣設定</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BaseInput</span> <span class="keyword">from</span> <span class="string">&quot;./components/BaseInput&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">foucsBaseInput</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    inputRef.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;foucsBaseInput&#125;</span>&gt;</span>useImperativeHandel Demo: 請點擊這段文字<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">BaseInput</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>BaseInput</code> 元件封裝的是一個簡單的 <code>input</code> 元素，當點擊 <code>h1</code> 的文字內容時，會 focus 在這個 <code>BaseInput</code> 元件上。</p>
<p>接著我們看看 <code>BaseInput</code> 元件的設定:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef, useImperativeHandle, forwardRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">BaseInput</span> = (<span class="params">props, ref</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>();</span><br><span class="line">  <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">focus</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      inputRef.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;));</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">placeholder</span>=<span class="string">&quot;type text here...&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">forwardRef</span>(<span class="title class_">BaseInput</span>);</span><br></pre></td></tr></table></figure>
<p><code>forwardRef</code> <strong>用來建立一個新的 React component 並將 ref 屬性轉交到底下的另外一個 component。</strong></p>
<p>而這裡我們透過 <code>export default forwardRef(BaseInput)</code> 將 ref 屬性轉交給 input 元素。</p>
<p>接著透過 <code>useImperativeHandle</code> hook 在<strong>使用 ref 屬性時可以向父 component 暴露自定義的 instance 的值。</strong></p>
<p>而這裡則是暴露了 focus 這個方法。</p>
<h2 id="useLayoutEffect"><a class="header-anchor" href="#useLayoutEffect"></a>useLayoutEffect</h2>
<p>使用方式與 <code>useEffect</code> 一樣，只是差別在觸發的時間點是在<strong>所有 DOM 改變之後才會同步調用。</strong></p>
<p>但這個方式會阻礙瀏覽器的更新，所以在使用上應該先以 <code>useEffect</code> 為主，如果有問題才使用 <code>useLayoutEffect</code>。</p>
<h2 id="打造自己的-Hook"><a class="header-anchor" href="#打造自己的-Hook"></a>打造自己的 Hook</h2>
<p>除了 React 提供的 Hooks 之外，我們也可以打造自訂的 Hooks，乍聽之下可能覺得很抽象，但其實本質就像我們在撰寫 Javascript function 一樣，<strong>當我們有多個 function 中有共同邏輯時，這時候我們會將共同邏輯的部分抽成一個新的 function。</strong></p>
<p>而打造自己的 Hook 也是基於這個概念下撰寫，只是如果是自定義的 Hook 會是以 <strong>use 為開頭命名的 function，並且在這個 function 中可以呼叫其他的 Hooks</strong>。</p>
<p>雖然有了基本的概念，但這部分的運用則留在於實務開發時再來體會了。</p>
<h2 id="使用-Hook-時需要注意的幾個規則"><a class="header-anchor" href="#使用-Hook-時需要注意的幾個規則"></a>使用 Hook 時需要注意的幾個規則</h2>
<p>最後要看的是在使用 Hook 時需要知道的一些規則：</p>
<ol>
<li><strong>不要在迴圈、條件式或是巢狀的 function 內呼叫 Hook，確保在 component render 時 Hook 都可以是照著正確的順序呼叫。</strong></li>
<li><strong>只在 React Function 中呼叫 Hook，例如像是 React function component 或者自定義的 Hook</strong></li>
</ol>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://zh-hant.reactjs.org/docs/hooks-reference.html#useimperativehandle">useImperativeHandle</a></li>
<li><a href="https://zh-hant.reactjs.org/docs/hooks-reference.html#uselayouteffect">useLayoutEffect</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>認識 React Hooks 之二</title>
    <url>/2020/10/13/%E8%AA%8D%E8%AD%98-React-Hooks-%E4%B9%8B%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="認識-React-Hooks-之二"><a class="header-anchor" href="#認識-React-Hooks-之二"></a>認識 React Hooks 之二</h1>
<p>今天是延續昨天的 Hooks 探索，要學習的是 <code>useReducer</code> 、<code>useCallback</code>、<code>useMemo</code> 與 <code>useRef</code> 。</p>
<p>就讓我們來看看這些 Hooks 可以帶給我們怎麼樣更簡便的使用方式吧!</p>
<span id="more"></span>
<h2 id="useReducer"><a class="header-anchor" href="#useReducer"></a><code>useReducer</code></h2>
<p>在前面的天數我們學習到了 Redux 的使用，如果能夠理解的話，相信 <code>useReducer</code> 使用起來就不會那麼陌生。</p>
<p>因為 <code>useReducer</code> 會回傳一個 <code>state</code> 與 <code>dipatch</code> 的方法，然後就跟 Redux 一樣透過 <code>dispatch</code> 一個 action 來更新 <code>state</code> 中的狀態。</p>
<p>這裡我們來看看官方提供的範例程式碼:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;increment&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;decrement&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      Count: &#123;state.count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123;type: &#x27;decrement&#x27;&#125;)&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123;type: &#x27;increment&#x27;&#125;)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上方的程式碼是一個簡單的加減計數器，可以執行加一、減一的操作。</p>
<p>而基本上設定 <code>state</code>， <code>dipatch</code> 一個 action 到 <code>reducer</code> 更新 <code>state</code> 的狀態，根本和使用 Redux 沒什麼差異。</p>
<p>不過有一個小細節需要注意的部分是， <code>initialState</code> 原本在 Redux 中會作為 <code>reducer</code> 的預設值，而使用 <code>useReducer</code> 的話，則是將 <code>initialState</code> 當作<strong>第二個參數傳入</strong>。</p>
<h2 id="useCallback"><a class="header-anchor" href="#useCallback"></a><code>useCallback</code></h2>
<p><strong><code>useCallback</code> 會回傳傳入的 callback function 的 memoized 版本，讓這個 callback 只會在依賴改變時才會更新。</strong></p>
<p>而這麼做的原因在於要避免<strong>不必要的 render</strong>，優化效能。</p>
<p>這裡來看看官方提供的一個示意程式碼:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedCallback = <span class="title function_">useCallback</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">doSomething</span>(a, b);</span><br><span class="line">  &#125;,</span><br><span class="line">  [a, b],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>callback function 傳入一個 <code>doSomething</code> 方法，而這個方法<strong>會在當 <code>a</code>, <code>b</code> 發生改變時才會執行。</strong></p>
<h2 id="useMemo"><a class="header-anchor" href="#useMemo"></a><code>useMemo</code></h2>
<p><code>useMemo</code> 使用方式與 <code>useCallback</code> 類似，都是為了優化效能，但是其 <code>memoized</code> 的是一個值，而且需要注意的是 <code>useMemo</code> 的 function <strong>是在 render 期間執行</strong>，所以避免在 render 期間處理 side effect。</p>
<h2 id="useRef"><a class="header-anchor" href="#useRef"></a><code>useRef</code></h2>
<p>今天的最後要學習的是 <code>useRef</code>，如果還記得第十四天的<a href="https://ithelp.ithome.com.tw/articles/10246160">createRef 學起來，focus 元素不麻煩</a>，那這個部分也不會太難理解，因為 <code>useRef</code> 可以讓我們在 function component 中更簡單的 focus 元素。</p>
<p>直接來看看底下這個例子:</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/zealous-sea-6mq3w?file=/src/App.js:0-400">點擊前往</a>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> myRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">focusInputByUseRef</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    myRef.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;focusInputByUseRef&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        functional Componet: useRef - 點擊本段文字</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;myRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>useRef</code> 中傳初始值傳入 <code>null</code> 是告訴 React 目前在一開始時還沒有任何 ref 依附在 React element 中，而之後當我們在元素中設定 <code>ref</code> 時，此時就會拿到這個元素了。</p>
<p>今天學習了 React Hooks 中的 <code>useReducer</code>、<code>useCallback</code>、<code>useMemo</code> 以及 <code>useRef</code> 的基礎概念。</p>
<p>明天再繼續探索其他的 Hooks吧！</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://zh-hant.reactjs.org/docs/hooks-reference.html#usereducer">useReducer</a></li>
<li><a href="https://zh-hant.reactjs.org/docs/hooks-reference.html#usecallback">useCallback</a></li>
<li><a href="https://zh-hant.reactjs.org/docs/hooks-reference.html#usememo">useMemo</a></li>
<li><a href="https://zh-hant.reactjs.org/docs/hooks-reference.html#useref">useRef</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>認識 React Hooks 之一</title>
    <url>/2020/10/12/%E8%AA%8D%E8%AD%98-React-Hooks-%E4%B9%8B%E4%B8%80/</url>
    <content><![CDATA[<h1 id="認識-React-Hooks-之一"><a class="header-anchor" href="#認識-React-Hooks-之一"></a>認識 React Hooks 之一</h1>
<p>今天要學習的是 React 的新功能 <strong>Hook</strong>，而 Hook 是 React 在 16.8 版本中新加入的功能，以往只要是需要管理到 state 的話，都一定要使用 class-based component 的方式才可以，而 Hook 的出現可以讓我們也可以在 function component 中管理 state 以及使用 React 的功能。</p>
<span id="more"></span>
<p>而今天與明天的篇幅會學習關於使用 Hook 替代原本 class-based component 的寫法。</p>
<p>接著就趕緊今天的學習吧！</p>
<h2 id="使用-State-Hook"><a class="header-anchor" href="#使用-State-Hook"></a>使用 State Hook</h2>
<p>第一個要介紹的是 <code>useState</code>，<strong>這是一個能讓我們將 <code>state</code> 加到 function component 中的 Hook。</strong></p>
<p>相關測試範例，<a href="https://codesandbox.io/s/epic-dan-83f7n?file=/src/App.js">點擊前往</a>。</p>
<p>在測試範例中提供了兩種 component 的使用方式，這裡則擷取出使用 <code>useState</code> 的程式碼:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [text, setText] = <span class="title function_">useState</span>(<span class="string">&quot;Text from function component&#x27;s state&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeTextHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setText</span>(<span class="string">&quot;Text changed from function component&#x27;s useState method&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>function component 範例: 使用 useState<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeTextHandler&#125;</span>&gt;</span>變更文字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當我們使用 <code>useState</code> 時，我們需要提供一個<strong>初始的值作為參數傳入</strong>，而這也是 state 的初始值。</p>
<p>值得注意的是，比較 class-based component一定得傳入一個物件， <code>useState</code> 接受像是 String 或者 Number 這類的值作為初始值。</p>
<p>而 <code>useState</code> 提供的部分，我們可以取得這個<strong>初始值以及用來更新這個值的方法</strong></p>
<p>而命名上這裡的 <code>text</code> 與 <code>setText</code> 是自定義的名稱，只要記得順序第一個值，而第二個則是用來更新的方法即可。</p>
<p>此外還需要注意的部分是 <code>useState</code> 與 <code>this.setState</code> 更新時的差異</p>
<p>使用 <code>this.setState</code> 的時候，如果你只需要更新某一個值的時候，也許你會這麼寫:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Components</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;Text&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">num</span>: <span class="number">666</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果只需要更新 <code>num</code> 的時候，只需要把<strong>需要更新的寫入</strong>即可，React 會自己 merge 到 class-based component 中的 <code>state</code>。</p>
<p>但如果今天是透過 <code>useState</code> 的方式，那就需要這麼寫：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">     <span class="attr">num</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;Text&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setNum</span>(&#123;</span><br><span class="line">      ...state,</span><br><span class="line">      <span class="attr">num</span>: <span class="number">666</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由於 <code>useState</code> 在更新時並不會 merge 需要更新的部分到原本的 <code>state</code>，而是<strong>整個 <code>state</code> 替換</strong>，所以如果沒有將不需要更新的其他狀態一併寫入的話，就會造成<strong>狀態的遺失</strong>，這點需要注意。</p>
<h2 id="使用-Effect-Hook"><a class="header-anchor" href="#使用-Effect-Hook"></a>使用 Effect Hook</h2>
<p>接著要學習的是 <code>useEffect</code>，至於為什麼會用 Effect 這個詞呢？</p>
<p>原因在於<strong>像是 fetch 資料、訂閱事件與改變 DOM，這些被稱為是「side effect」的行為會影響其他 component 且在 render 期間無法完成的。</strong></p>
<p>而 <code>useEffect</code> 基本上就是整合了 class-based component 的 <strong><code>componentDidMount</code>、<code>componentDidUpdate</code> 與 <code>componentWillUnmount</code> 這三個生命週期，讓這個 API 也可以達到同樣的目的。</strong></p>
<p>這裡我們改寫一下上一個測試範例，這次不透過點擊切換 <code>text</code> 的值，而是在等同 class-based component 的生命週期 <code>componentDidMount</code> 的階段，我們將 <code>text</code> 更新。</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/relaxed-nightingale-9m072?file=/src/App.js">點擊前往</a>。</p>
<p>這裡一樣擷取出關於 <code>useEffect</code> 相關的測試程式碼:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [text, setText] = <span class="title function_">useState</span>(<span class="string">&quot;Text from function component&#x27;s state&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setText</span>(<span class="string">&quot;Text changed from function component&#x27;s useState method&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        function component 範例: 使用 useEffect 在相似於 componentDidMount</span></span><br><span class="line"><span class="language-xml">        的階段更新 state</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當我們使用 <code>useEffect</code> 的時候，這代表我們告訴 React 在 component render 之後需要做一些事情，<strong>而 React 會在 render 之後執行我們傳入的 function。</strong></p>
<p>而將 <code>useEffect</code> 寫在 component 的內部是因為這樣可以透過閉包(closure)的觀念取得 <code>state</code> 或者是 <code>props</code> 的狀態。</p>
<p>這裡需要注意的是目前的設定方式，預設會在<strong>每次 render 之後都一定會執行。</strong></p>
<p>那要怎麼樣才能在 <strong><code>text</code></strong> 的值有變化的時候才做執行就好呢？</p>
<p>這個時候我們就<strong>需要透過 <code>useEffect</code> 的第二個參數來達成</strong>。</p>
<p>這裡我們將上面的程式碼改寫一下:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [text, setText] = <span class="title function_">useState</span>(<span class="string">&quot;Text from function component&#x27;s state&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setText</span>(<span class="string">&quot;Text changed from function component&#x27;s useState method&quot;</span>);</span><br><span class="line">  &#125;, [text]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        function component 範例: 使用 useEffect 在相似於 componentDidMount</span></span><br><span class="line"><span class="language-xml">        的階段更新 state</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>每次 render 後就清除或執行 effect 可能會造成效能的問題</strong>，所以透過傳入 <code>useEffect</code> 的第二個參數 <code>[text]</code>， <strong>此時當重新 render 時， React 會比對該次的值是否與前一次的值，如果有不同才會執行 effect，否則就跳過這一次的更新</strong>。</p>
<p>那如果是<strong>只想要在 componet mount 的階段觸發一次就好呢</strong>?</p>
<p>這時候也很簡單，<strong>只要傳入一個空陣列 <code>[]</code></strong> 這樣就好囉！</p>
<p>所以上方的程式碼我們再改寫一下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [text, setText] = <span class="title function_">useState</span>(<span class="string">&quot;Text from function component&#x27;s state&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setText</span>(<span class="string">&quot;Text changed from function component&#x27;s useState method&quot;</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        function component 範例: 使用 useEffect 在相似於 componentDidMount</span></span><br><span class="line"><span class="language-xml">        的階段更新 state</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而當有時候我們<strong>可能會在 component 中訂閱一個事件，並且在這個元件被 unmount 的時候取消訂閱這個事件</strong>，這時候應該怎麼做才好呢?</p>
<p>這個時候我們可以透過 <strong><code>return</code> 一個 function 的方式達成這個目的</strong>。</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/determined-breeze-x48oj?file=/src/App.js">點擊前往</a>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [text, setText] = <span class="title function_">useState</span>(<span class="string">&quot;初始文字&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">test</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setText</span>(<span class="string">&quot;有發現我不一樣了嗎?&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;h2&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;mouseenter&quot;</span>, test);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;h2&quot;</span>).<span class="title function_">removeEventListener</span>(<span class="string">&quot;mouseenter&quot;</span>, test);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [text]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>function component 範例: 請將滑鼠移到這個標題上，觀察變化<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>透過 <strong><code>return</code> 一個 function 的方式</strong>可以讓我們像是在 class-based component 中於生命週期 <code>componentWillUnmount</code> 的階段時，取消對於事件的訂閱。</p>
<p>而最後要提的部分是關於<strong>瀏覽器更新螢幕的部分</strong>，這邊來看看文件是怎麼寫的：</p>
<blockquote>
<p>提示<br>
與 componentDidMount 或 componentDidUpdate 不同，使用 useEffect 安排的 effect 不會阻止瀏覽器更新螢幕。這使你的應用程式感覺起來響應更快。大多數 effect 不需要同步發生。在少見的需要同步發生的情況下（例如測量 layout），有另外一個 useLayoutEffect Hook，它的 API 與 useEffect 相同。</p>
</blockquote>
<h2 id="useContext"><a class="header-anchor" href="#useContext"></a><code>useContext</code></h2>
<p>在第十五天的時候，我們學習了關於 <a href="https://ithelp.ithome.com.tw/articles/10246793">Context API</a>的使用方式，而在 component 中如果我們想要使用我們透過 <code>Provider</code> 傳入的 <code>Context</code> 物件的時候，我們可以透過 <code>Consumer</code> 或 <code>static contextType = Context</code> 的方式來取得。</p>
<p>而 React Hooks 對此也提供了更簡便的方式讓我們存取這個 <code>Context</code> 物件: 透過 <code>useContext</code></p>
<p>這裡我們改寫第十五天的測試範例來看看怎麼使用 <code>useContext</code> 吧!</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/relaxed-voice-gwvy4?file=/src/App.js">點擊前往</a>。</p>
<p>首先，我們一樣需要建立一個 <code>Context</code> 物件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Context.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Context</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(&#123;</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">changeTextByContextAPI</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">  <span class="attr">changeTextByContextAPIInFuncComponent</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">  <span class="attr">changeTextByUseContextInFuncComponent</span>: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Context</span>;</span><br></pre></td></tr></table></figure>
<p>接著，我們一樣要透過 <code>Provider</code> 將 <code>Context</code> 物件提供給需要的 component:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Card2</span> <span class="keyword">from</span> <span class="string">&quot;./components/Card2&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Context</span> <span class="keyword">from</span> <span class="string">&quot;./components/Context&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setTextState] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">contextText</span>: <span class="string">&quot;Initial value&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeTextByContextAPI</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setTextState</span>(&#123;</span><br><span class="line">      ...state,</span><br><span class="line">      <span class="attr">contextText</span>: <span class="string">&quot;change text by Context Provider/Consumer&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>透過 Context.Provider 提供 Coontext 物件的值到 card 元件中<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>此為 Class-based component<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Context.Provider</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">...state</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">changeTextByContextAPI</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Card2</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>
<p>最後我們需要透過 <code>useContext</code> 來取得這個 <code>Context</code> 物件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Card4.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Context</span> <span class="keyword">from</span> <span class="string">&quot;../Context&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Card4</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> context = <span class="title function_">useContext</span>(<span class="title class_">Context</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&quot;card&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onClick</span>=<span class="string">&#123;context.changeTextByUseContextInFuncComponent&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;context.contextTextInFuncComponentByUseContext&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Card4</span></span><br></pre></td></tr></table></figure>
<p>沒意外的話，應該成功取得，並執行目前測試範例上提供的操作囉!</p>
<p>今天學習了 React Hooks 中的 <code>useState</code>、<code>useEffect</code> 以及 <code>useContext</code></p>
<p>明天繼續探索其他的 Hooks</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://zh-hant.reactjs.org/docs/hooks-intro.html">介紹 Hook</a></li>
<li><a href="https://zh-hant.reactjs.org/docs/hooks-effect.html">使用 Effect Hook</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>透過 CSS 列印(print) 設定網頁列印時的樣式</title>
    <url>/2020/12/10/%E9%80%8F%E9%81%8E-CSS-%E5%88%97%E5%8D%B0-print-%E8%A8%AD%E5%AE%9A%E7%B6%B2%E9%A0%81%E5%88%97%E5%8D%B0%E6%99%82%E7%9A%84%E6%A8%A3%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="透過-CSS-列印-print-設定網頁列印時的樣式"><a class="header-anchor" href="#透過-CSS-列印-print-設定網頁列印時的樣式"></a>透過 CSS 列印(print) 設定網頁列印時的樣式</h1>
<h2 id="情境描述"><a class="header-anchor" href="#情境描述"></a>情境描述</h2>
<p>在最近的專案中遇到一個需求，需要透過在網頁上點擊列印功能，列印網頁的特定區塊</p>
<span id="more"></span>
<p>雖然需求很簡單，只需要將使用者上傳的圖片於點擊列印時可以呈現並且提供列印就可以了</p>
<p>但趁著這次遇到這個需求，倒不如多深入了解一些關於  css print 的知識，並透過一個練習來驗證看看吧！</p>
<h2 id="文章大綱"><a class="header-anchor" href="#文章大綱"></a>文章大綱</h2>
<ul>
<li>透過一個練習範例並模擬一個列印需要的樣式
<ul>
<li>首先先來看看版面長什麼樣子</li>
<li>設定列印模式下要用的 media</li>
<li>處理 chrome 瀏覽器背景顏色顯示不正常的問題</li>
<li>配置一個列印要呈現的 DOM 架構</li>
<li>列印內容被裁切到啦！page breaks 該你出場</li>
<li>秀一波成果吧！</li>
<li>提高開發列印樣式需求的效率，以 Google Chrome Dev Tools 為例</li>
</ul>
</li>
</ul>
<h2 id="透過一個練習範例並模擬一個列印需要的樣式"><a class="header-anchor" href="#透過一個練習範例並模擬一個列印需要的樣式"></a>透過一個練習範例並模擬一個列印需要的樣式</h2>
<p>為了更加了解在設定列印模式時需要知道的眉眉角角，這邊特別手刻了一個簡單的版面並透過這個版面一步步的設定成我們需要在列印模式中呈現的樣式。</p>
<h3 id="首先先來看看版面長什麼樣子"><a class="header-anchor" href="#首先先來看看版面長什麼樣子"></a>首先先來看看版面長什麼樣子</h3>
<p><img src="https://i.imgur.com/lDTF2Sq.jpg" alt=""></p>
<p>為了更快速進入重點，這邊透過 <a href="https://element.eleme.io/#/zh-CN">Element UI</a> 這套 UI framework 搭配 vue 來快速建立一個版面。</p>
<p>而這個版面基本上很單純，就是三張 card 的元件再加上一個 table 元件，並且修改這些元件的一些樣式設定。</p>
<p>而元件樣式修改的部分在於:</p>
<ol>
<li>card 元件的介紹區塊(背景顏色: <code>#FAFAFA</code>)</li>
<li>table 元件的偶數列(背景顏色: <code>#67C23A</code>)</li>
</ol>
<p>在網頁上的呈現看起來沒有問題，接著我們開啟列印模式，來看看在  chrome 瀏覽器下會是怎麼呈現，這邊擷取部分的畫面：</p>
<p><img src="https://i.imgur.com/2grJmeE.png" alt=""></p>
<p>可以發現在 chrome 瀏覽器下，原本設定的顏色不見了， 取而代之的是白色的背景顏色</p>
<p>也許你會忍不住ＯＳ：「傻眼，到底發生什麼事情了？」</p>
<p>而這部分就是我們接下來要了解的重點了，準備跟上吧！</p>
<h3 id="設定列印模式下要用的-media-和頁面設定"><a class="header-anchor" href="#設定列印模式下要用的-media-和頁面設定"></a>設定列印模式下要用的 media 和頁面設定</h3>
<p>如果你迫不及待想處理剛剛的問題，那我得讓你小小失望一下了<br>
因為在處理之前，必須先了解如何設定列印模式需要的 css</p>
<p><mark>想要在列印模式中設定樣式，需要借助 <code>@media</code> 來達成</mark></p>
<p>如果有曾經設計過響應式網頁(Responsive Web Design)的讀者，對於下方這段程式碼應該不陌生:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">	<span class="selector-class">.container</span> &#123;</span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>借助 <code>@media</code> 讓我們可以在尺寸小於 <code>768px</code> 的時候，對於 <code>.container</code> 設定小於這個尺寸時的網頁版面以及樣式的調整</p>
<p>但 <code>@media</code> 其實不只是可以用於處理響應式網頁，也可以在列印模式做些設定，使用方式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">	<span class="selector-class">.container</span> &#123;</span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述這段簡易的程式碼指的是當 <mark>處於列印模式時， <code>container</code> 需要有怎麼樣的樣式調整</mark>。</p>
<p>此外，對於頁面尺寸以及列印的方式的設定也是我們會關注的部分，而設定的方式其實也很簡單:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">	<span class="selector-class">.container</span> &#123;</span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">@page</span> &#123;</span><br><span class="line">		size: A4 portrait;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>透過 <code>@page</code> 可以設定尺寸及方向，這邊設定的尺寸是 A4，直式列印方式</p>
<p>了解了如何設定列印模式的基礎後，接著要處理剛剛 chrome 瀏覽器背景顏色顯示不正常的問題囉！</p>
<h3 id="處理-chrome-瀏覽器背景顏色顯示不正常的問題"><a class="header-anchor" href="#處理-chrome-瀏覽器背景顏色顯示不正常的問題"></a>處理 chrome 瀏覽器背景顏色顯示不正常的問題</h3>
<p>關於<mark>為什麼在列印模式下 chrome 中元素的背景顏色會消失</mark>，可以參考這篇 stackoverflow 的文章： <a href="https://stackoverflow.com/questions/2392366/print-background-colours-in-chrome">Print Background colours in Chrome</a></p>
<p>而針對 chrome 的解法則透過如下設定就可以解決:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> print &#123; </span><br><span class="line">	<span class="selector-tag">body</span> &#123; </span><br><span class="line">		-webkit-print-<span class="attribute">color</span>-adjust: exact; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接著讓我們替剛剛那些無法正常顯示背景顏色的元件加上上述的設定之後，來看看在列印模式下的樣式變成怎麼樣吧！</p>
<p><img src="https://i.imgur.com/eyBXh3I.png" alt=""></p>
<p>沒意外的話，會發現這些元件的背景顏色都可以正常顯示囉！</p>
<p>但這只是剛開始而已，眼尖的讀者會發現表格的欄位好像跟網頁版的不太一樣，沒有正常顯示，所以接著要處理的當然就是這個問題囉</p>
<h3 id="配置一個在列印時要呈現的-DOM-架構"><a class="header-anchor" href="#配置一個在列印時要呈現的-DOM-架構"></a>配置一個在列印時要呈現的 DOM 架構</h3>
<p>這邊我們先假設一些列印情境方便後續的學習：</p>
<ol>
<li>這個區塊在列印模式時不要出現<br>
<img src="https://i.imgur.com/i07atXX.png" alt=""></li>
<li>card 元件的呈現方式在列印模式時圖片在左，敘述在右<br>
<img src="https://i.imgur.com/S3SLRy3.png" alt=""></li>
<li>table 元件在列印模式時要能完全呈現所有欄位<br>
<img src="https://i.imgur.com/YXrS5UM.png" alt=""></li>
</ol>
<p>因為上述的列印情境，所以這邊我們需要額外<mark>配置一塊用於列印模式需要的 dom 架構，並將不需要在列印模式下呈現的部分透過 <code>display: none</code> 隱藏。</mark></p>
<p>相關的程式碼區塊可以參考 <mark><a href="https://github.com/penghuachen/print-demo/blob/master/src/views/Home.vue">Home 元件</a></mark> 中的程式碼，重點在於透過 <code>print</code>, <code>no-print</code> 來切換列印模式下需要呈現的樣式，並針對元件在列印模式下需要的樣式進行修改</p>
<p>這邊將列印模式下的樣式擷取出來:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.print</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> print &#123; </span><br><span class="line">  <span class="keyword">@page</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0.5cm</span>;</span><br><span class="line">    size: A4 portrait;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.print</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.no-print</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">30px</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ::v-deep .el-col &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.custom-card</span> &#123;</span><br><span class="line">    ::v-deep .el-card__body &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="selector-tag">img</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.card-content</span> &#123;</span><br><span class="line">        <span class="attribute">text-align</span>: left;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.table-container</span>,<span class="selector-class">.card-content</span> &#123; </span><br><span class="line">	  -webkit-print-<span class="attribute">color</span>-adjust: exact; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>來看看表格再調整後的呈現吧！</p>
<p><img src="https://i.imgur.com/MtkFTYG.png" alt=""></p>
<p>看起來好像正常了…嗎？</p>
<p>眼尖的讀者應該有發現有一處怪怪的地方，那就是頁面與頁面之間，<mark>有表格的欄位被裁切到啦！！</mark></p>
<p>這樣列印出來的內容是不合格的，所以這邊我們需要再做最後的一些些調整：</p>
<h3 id="列印內容被裁切到啦！page-breaks-該你出場"><a class="header-anchor" href="#列印內容被裁切到啦！page-breaks-該你出場"></a>列印內容被裁切到啦！page-breaks 該你出場</h3>
<p>要解決表格中的列在列印時被裁切到的情況，可以透過設定 <code>page-break-inside: avoid;</code> <mark>調整表格的列(當前的元素內)在列印模式下該怎麼進行分頁</mark></p>
<p>而這個系列的語法有三種使用的方式，讀者可以依據需求選取需要的設定:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">page-break-inside</span>: avoid;</span><br><span class="line"><span class="attribute">page-break-before</span>: avoid;</span><br><span class="line"><span class="attribute">page-break-after</span>: avoid;</span><br></pre></td></tr></table></figure>
<h3 id="秀一波成果吧！"><a class="header-anchor" href="#秀一波成果吧！"></a>秀一波成果吧！</h3>
<p>來看看調整後的最後樣子吧！</p>
<p>總算是在列印模式下一樣可以有一個漂亮的輸出了，真的是非常感動！！</p>
<p><img src="https://i.imgur.com/eQ1INyD.gif" alt=""></p>
<p>如果讀者想要自己操作看看的話，可以前往 Github 的這個<a href="https://penghuachen.github.io/print-demo/">測試範例</a>，自己研究看看囉！</p>
<p>而文章的最後要提到的是如何在 chrome dev tools 中開啟列印模式，提高我們開發的效率</p>
<h2 id="提高開發列印樣式需求的效率，以-Google-Chrome-Dev-Tools-為例"><a class="header-anchor" href="#提高開發列印樣式需求的效率，以-Google-Chrome-Dev-Tools-為例"></a>提高開發列印樣式需求的效率，以 Google Chrome Dev Tools 為例</h2>
<p>如果在開發列印模式的樣式時覺得<mark>總是要不斷的透過 ctrl + p 或者是點按右鍵執行列印是一件很麻煩的事情的話</mark>，那你一定要知道 chrome dev tools 的這個功能。</p>
<p>這個功能可以在網頁上模擬列印模式下應該要有的樣子，對於修改樣式或調整 dom 架構時非常方便，而開啟的方式也非常簡單，可以參考 chrome dev tools 的 <a href="https://developers.google.com/web/tools/chrome-devtools/css/print-preview">Force Chrome DevTools Into Print Preview Mode (CSS Print Media Type)</a> 來打開</p>
<p>又或者透過下列的方式來打開也可以：</p>
<p>在 「more tools」 下選擇 「rendering」<br>
<img src="https://i.imgur.com/Sh9BYMq.png" alt=""></p>
<p>然後在「Emulate CSS media type」 中把選項設定成 print 就可以囉！<br>
<img src="https://i.imgur.com/t1rxnPl.png" alt=""></p>
<p>不過這邊需要注意的是這個功能<mark>只是讓我們可以較有效率的開發列印模式下要的網頁排版、樣式調整等等，但是否有符合紙張尺寸大小，還是需要透過  ctrl + p 或者是點按右鍵執行列印進行確認喔！</mark></p>
<h2 id="參考來源"><a class="header-anchor" href="#參考來源"></a>參考來源</h2>
<hr>
<ul>
<li><a href="https://kakadodo.github.io/2018/03/13/css-media-print-setting/">關於 @media print 的二三事</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/css/print-preview">Force Chrome DevTools Into Print Preview Mode (CSS Print Media Type)</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/page-break-inside">page-break-inside</a></li>
<li><a href="https://medium.com/unalai/%E5%8E%9F%E4%BE%86%E5%89%8D%E7%AB%AF%E7%B6%B2%E9%A0%81%E5%88%97%E5%8D%B0-%E4%B8%8D%E6%98%AF%E5%8F%AA%E8%A6%81-window-print-%E5%B0%B1%E5%A5%BD%E4%BA%86-7af44cacf43e">原來前端網頁列印，不是只要 window.print() 就好了</a></li>
</ul>
]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>透過 JavaScript 動態修改CSS 樣式、屬性 </title>
    <url>/2019/12/05/%E9%80%8F%E9%81%8E-JavaScript-%E5%8B%95%E6%85%8B%E4%BF%AE%E6%94%B9CSS-%E6%A8%A3%E5%BC%8F%E3%80%81%E5%B1%AC%E6%80%A7/</url>
    <content><![CDATA[<p>透過JS動態修改CSS樣式、屬性是很常有的事情，所以這個篇幅就來看些關於修改的方式吧!</p>
<h2 id="動態修改CSS樣式"><a class="header-anchor" href="#動態修改CSS樣式"></a>動態修改CSS樣式</h2>
<p>在修改CSS樣式的起手式不外乎常用的應該就是下列兩種方式:</p>
<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id).<span class="property">style</span>.<span class="property">property</span> = <span class="keyword">new</span> style;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(classname/id/...).<span class="property">style</span>.<span class="property">property</span> = <span class="keyword">new</span> style;</span><br><span class="line">... </span><br></pre></td></tr></table></figure>
<p>而上面的寫法與下面的寫法相同:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id).<span class="property">style</span> = <span class="attr">property</span>:<span class="keyword">new</span> style;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(classname/id/...).<span class="property">style</span> = <span class="attr">property</span>:<span class="keyword">new</span> style;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>接下來就來運用看看吧!</p>
<h3 id="修改背景顏色"><a class="header-anchor" href="#修改背景顏色"></a>修改背景顏色</h3>
<ul>
<li>HTML程式碼:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .box &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>JS程式碼:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line">  box.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;black&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>上下兩種寫法都可以正常執行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line">  box.<span class="property">style</span> = <span class="string">&quot;background-color:black&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>原本的css設定 <code>box</code> 元素背景色為黃色，但被動態修改背景色為黑色了。</p>
<h3 id="修改文字顏色"><a class="header-anchor" href="#修改文字顏色"></a>修改文字顏色</h3>
<ul>
<li>HTML程式碼:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .box &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">  .box p&#123;</span><br><span class="line">    color: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">  &lt;p&gt;This is test text.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>JS程式碼:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> paragraph = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box p&#x27;</span>);</span><br><span class="line">  paragraph.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>透過 <code>element.style.color</code> 將 <code>&lt;p&gt;</code> 的文字顏色從藍色修改為紅色了</p>
<h3 id="修改邊框-border"><a class="header-anchor" href="#修改邊框-border"></a>修改邊框(border)</h3>
<ul>
<li>HTML程式碼:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .box &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: yellow;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    outline : 1px solid #f00;</span><br><span class="line">  &#125;</span><br><span class="line">  .box p&#123;</span><br><span class="line">    color: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">  &lt;p&gt;This is test text.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>JS程式碼:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line">  box.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&quot;5px solid red&quot;</span>;</span><br><span class="line">  box.<span class="property">style</span>.<span class="property">outline</span> = <span class="string">&quot;3px solid blue&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>原本的 css設定， <code>box</code> 的 <code>border</code> 為灰色、寬度為 <code>1px</code>， <code>outline</code> 為紅色、寬度為 <code>1px</code></p>
<p>動態修改 <code>box</code> 的 <code>border</code> 變為紅色、寬度為 <code>5px</code>、<code>outline</code> 為藍色、寬度為 <code>3px</code></p>
<h3 id="修改-margin-、-padding"><a class="header-anchor" href="#修改-margin-、-padding"></a>修改 margin 、 padding</h3>
<ul>
<li>HTML程式碼:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background: yellow;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  outline : 1px solid #f00;</span><br><span class="line">&#125;</span><br><span class="line">.box p&#123;</span><br><span class="line">  color: blue;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin:15px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">  &lt;p&gt;This is test text.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>JS程式碼:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> paragraph = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box p&#x27;</span>);</span><br><span class="line">  paragraph.<span class="property">style</span>.<span class="property">padding</span> = <span class="string">&quot;5px&quot;</span>;</span><br><span class="line">  paragraph.<span class="property">style</span>.<span class="property">margin</span> = <span class="string">&quot;5px&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>透過瀏覽器開發工具，可以查看 <code>&lt;p&gt;</code> 的 <code>margin</code> 從原本的 <code>15px</code> 動態已經修改為 <code>5px</code>; <code>padding</code> 從原本的 <code>10px</code> 動態被修改為 <code>5px</code> 。</p>
<h2 id="隱藏溢出內容-overflow"><a class="header-anchor" href="#隱藏溢出內容-overflow"></a>隱藏溢出內容(overflow)</h2>
<ul>
<li>HTML程式碼:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background: yellow;</span><br><span class="line">&#125;</span><br><span class="line">.box p&#123;</span><br><span class="line">  color: blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">  &lt;p&gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. Obcaecati reiciendis impedit sequi adipisci dolores</span><br><span class="line">    libero quidem quod accusamus, possimus doloremque corrupti nostrum id dolorem autem quo architecto eos quasi ut?</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>JS程式碼:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> paragraph = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box p&#x27;</span>);</span><br><span class="line">  paragraph.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&quot;scroll&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>原本文字內容多餘 <code>box</code> 高度導致內容溢出，所以動態設定 <code>box</code> 的 <code>overflow</code> 特性，使多出來的元素內容可以以滾軸方式呈現。</p>
<h3 id="修改屬性的值"><a class="header-anchor" href="#修改屬性的值"></a>修改屬性的值</h3>
<ul>
<li>HTML程式碼:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;#&quot;&gt;This is a link&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>JS程式碼:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  link.<span class="title function_">setAttribute</span>(<span class="string">&#x27;href&#x27;</span>, <span class="string">&#x27;http://www.google.com&#x27;</span>);</span><br><span class="line">  link.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;link&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(link.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><code>setAttribute('attribute','value')</code>，透過這個語法可以動態<mark>修改 HTML 標籤中的屬性及新增屬性。</mark></p>
<p>如同測試例子中 <code>&lt;a&gt;</code> 的 <code>href</code> 屬性的值從原本的 <code>#</code> 被修改為 <code>http://www.google.com</code>;也同時新增了 <code>class=&quot;link&quot;</code> 給 <code>&lt;a&gt;</code> 標籤。</p>
<p>而 <code>getAttribute(propety)</code> ，則是<mark>可以從 HTML 標籤取得屬性(Attribute)的值。</mark></p>
<p>關於學習一些常用的 avaScript 動態修改CSS 樣式、屬性的方式就先到這裡囉</p>
<p>明天見~</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>透過 JavaScript 動態建立 HTML 元素的幾種方式</title>
    <url>/2019/11/22/%E9%80%8F%E9%81%8E-JavaScript-%E5%8B%95%E6%85%8B%E5%BB%BA%E7%AB%8B-HTML-%E5%85%83%E7%B4%A0%E7%9A%84%E5%B9%BE%E7%A8%AE%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="透過-JavaScript-動態建立-HTML-元素的幾種方式"><a class="header-anchor" href="#透過-JavaScript-動態建立-HTML-元素的幾種方式"></a>透過 JavaScript 動態建立 HTML 元素的幾種方式</h1>
<p>今天要來學習的是如何透過JS在網頁上建立一個 HTML 的元素。</p>
<span id="more"></span>
<p>如何使用 <code>Document.createElement()</code> 以及 <code>Element.innierHTML</code> 兩種方式達成目的</p>
<p>事不宜遲，趕緊往下看吧!</p>
<h2 id="Document-createElement-用途"><a class="header-anchor" href="#Document-createElement-用途"></a><code>Document.createElement()</code> 用途</h2>
<p>可以在 HTML 中透過 <code>Document.createElement()</code> 這個方法指定要在哪個 HTML 元素底下建立另一個 HTML 元素。</p>
<h2 id="如何使用-Document-createElement"><a class="header-anchor" href="#如何使用-Document-createElement"></a>如何使用 <code>Document.createElement()</code></h2>
<p>關於怎麼使用，就直接看看測試的例子吧！</p>
<ul>
<li>測試例子一: 在 <code>&lt;ul&gt;</code> 元素底下新增 <code>&lt;li&gt;</code> 元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul class=&quot;list&quot;&gt;&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;LI&#x27;</span>);</span><br><span class="line">  li.<span class="property">textContent</span> = <span class="string">`這是第<span class="subst">$&#123;i&#125;</span>個 LI 元素`</span>;</span><br><span class="line">  list.<span class="title function_">appendChild</span>(li);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>透過 <code>textContent</code> 將文字內容新增到 <code>&lt;li&gt;</code> 元素中</p>
<p><mark>而 <code>appendChild() </code> 用於將一個節點新增到指定父節點的子節點中</mark></p>
<p>執行後可以得到5個在 <code>&lt;ul&gt;</code> 裡面新建立的 <code>&lt;li&gt;</code> 元素</p>
<p><img src="https://i.imgur.com/11nU3q3.png" alt="Day21-2"></p>
<ul>
<li>測試例子二: 在 <code>div</code> 元素底下新增 <code>&lt;p&gt;</code> 、 <code>&lt;a&gt;</code> 元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> paragraph = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;P&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line"></span><br><span class="line">paragraph.<span class="property">textContent</span> = <span class="string">&#x27;Lorem ipsum dolor sit amet.&#x27;</span>;</span><br><span class="line">paragraph.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;text&#x27;</span>);</span><br><span class="line">container.<span class="title function_">appendChild</span>(paragraph);</span><br><span class="line"></span><br><span class="line">link.<span class="property">textContent</span> = <span class="string">&#x27;This is a link&#x27;</span>;</span><br><span class="line">link.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;link&#x27;</span>);</span><br><span class="line">link.<span class="title function_">setAttribute</span>(<span class="string">&#x27;href&#x27;</span>, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">container.<span class="title function_">appendChild</span>(link);</span><br></pre></td></tr></table></figure>
<p>這裡在 <code>div</code> 底下新增了 <code>&lt;p&gt;</code> 、 <code>&lt;a&gt;</code> 兩個元素</p>
<p>並透過 <code>setAttribute()</code> 在這兩個元素上新增屬性，如下圖:</p>
<p><img src="https://i.imgur.com/p3tg2s0.png" alt="Day21-1"></p>
<h2 id="Element-innerHTML-用途"><a class="header-anchor" href="#Element-innerHTML-用途"></a><code>Element.innerHTML</code> 用途</h2>
<p>透過字串的格式，將自定義的 HTML 格式渲染在 HTML 頁面上。</p>
<p>但這個作法會讓原本 HTML 上的元素都被刪除並以自定義的格式取代。</p>
<h2 id="如何使用-Element-innerHTML"><a class="header-anchor" href="#如何使用-Element-innerHTML"></a>如何使用 <code>Element.innerHTML</code></h2>
<p>關於怎麼使用，就直接看看測試的例子吧！</p>
<ul>
<li>測試例子一: 在 <code>&lt;ul&gt;</code> 元素底下新增 <code>&lt;li&gt;</code> 元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">  &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> content = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> domString = <span class="string">`&lt;li&gt;這是第<span class="subst">$&#123;i&#125;</span>個 LI 元素&lt;/li&gt;`</span>;</span><br><span class="line">  content += domString;</span><br><span class="line">&#125;</span><br><span class="line">list.<span class="property">innerHTML</span> = content;</span><br></pre></td></tr></table></figure>
<p>從程式碼中可以知道原本 <code>&lt;ul&gt;</code> 裡面有三個 <code>&lt;li&gt;</code> 元素，但建立了5個 <code>&lt;li&gt;</code> 元素並使用 <code>Element.innierHTML</code> 渲染到頁面上後，可以看到原本的會被新建立的取代。</p>
<p><img src="https://i.imgur.com/11nU3q3.png" alt="Day21-2"></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day01 - CSSBattle 介紹</title>
    <url>/2019/05/28/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day01%20-%20CSSBattle%E4%BB%8B%E7%B4%B9/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/Jnap0FK.png" alt="CSSBattle"></p>
<p>最近發現了這一個網站：<strong><a href="https://cssbattle.dev/">CSSBattle</a></strong> ，這是 2019 年才剛出沒多久的新網站，裡面有很多關於 css 的題目可以挑戰，而且每一關都可以看到自己和別人的分數比較，個人覺得還蠻有趣也很好玩，所以決定每天嘗試並記錄下撰寫的思維。</p>
<br>
<h2 id="如何登入"><a class="header-anchor" href="#如何登入"></a>如何登入</h2>
<p><img src="https://imgur.com/7ifHAAG.png" alt="CSSBattle login"></p>
<p>而且這個網站可以透過四種方式登入，而對於我們來說，可以使用 github 帳號做登入真的挺方便的～(ps.last used 是因為我最後一次登入是使用 github 登入的緣故)</p>
<span id="more"></span>
<br>
<h2 id="關卡的重要資訊"><a class="header-anchor" href="#關卡的重要資訊"></a>關卡的重要資訊</h2>
<p><img src="https://imgur.com/qXPbFgI.png" alt="CSSBattle login"></p>
<ol>
<li>上面的 OUTPUT 是自己在左方撰寫 css 後呈現的樣子，而 TARGET 則是這個關卡要求要達到的結果。<br>
而 Slide &amp; Compare 可以在撰寫時將鼠標移入 OUTPUT 中查看和最後結果的差別。</li>
<li>當撰寫完之後點擊 SUBMIT 提交後，會得到所獲得的分數以及符合程度的％，基本上要 100%分數才能有一定程度的高分</li>
<li>LeaderBoard 可以查看前 100 名的分數是多少，不過分數真的都很高，真心覺得有夠強的，我絞盡腦汁都達不到他們的分數啊～</li>
</ol>
<p>小提醒，關卡的分數和撰寫的程式碼字數有關聯，所以要盡量用最少的程式碼和空格才能獲得比較高的分數哦！還有記得要將提示文字刪除，不然判定的時候也會列入計算而影響分數的～</p>
<p>基本上對於這個網站的介紹就到此結束囉，剩下的就請大家試著把玩看看，可以的話也可以回饋一些資訊給我哦！非常感謝 :D</p>
<p>第一天的挑戰到此結束，明天繼續 keep moving!!</p>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>
]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>CSSBattle</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day02 - #1 Simply Square</title>
    <url>/2019/05/29/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day02-1-Simply-Square/</url>
    <content><![CDATA[<h1 id="Target-1-Simply-Square"><a class="header-anchor" href="#Target-1-Simply-Square"></a>Target #1 - Simply Square</h1>
<p><img src="https://i.imgur.com/lBp952X.png" alt="CSSBattle"></p>
<h2 id="撰寫思維"><a class="header-anchor" href="#撰寫思維"></a>撰寫思維</h2>
<ul>
<li>需要考慮到瀏覽器自身的預設樣式(ex: margin)會造成的影響，必須消除。</li>
<li>在成功寫出後嘗試優化程式碼</li>
</ul>
<span id="more"></span>
<h2 id="最後結果"><a class="header-anchor" href="#最後結果"></a>最後結果</h2>
<p><img src="https://i.imgur.com/Fldc4mX.png" alt="Simply Square 完成"></p>
<p>附上 codepen(CSSBattle 目前無法透過附上連結看到別人所寫的程式碼，所以我另外寫在 codepen 方便點擊。可直接複製貼上即可查看結果)</p>
<p><a href="https://codepen.io/kids5346/pen/JqaZzj">#1 Simply Square</a></p>
<p>第一關老實說沒有難度，只要注意到瀏覽器有自身預設的樣式(例如 margin 等等的設定)，記得清除應該就沒有問題了。<br>
但是看了一下第一名所用的字數真的很厲害，我想半天都沒辦法達到，看來程度還是差好大一截需要好好努力才行啊！</p>
<p>第一關算是很輕鬆的過關了 XD，明天繼續迎接新的一關!! Keep Moving</p>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>
]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>CSSBattle</tag>
      </tags>
  </entry>
  <entry>
    <title>透過 React Router config 統一管理路由</title>
    <url>/2020/10/05/%E9%80%8F%E9%81%8E-React-Router-config-%E7%B5%B1%E4%B8%80%E7%AE%A1%E7%90%86%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h1 id="透過-React-Router-config-統一管理路由"><a class="header-anchor" href="#透過-React-Router-config-統一管理路由"></a>透過 React Router config 統一管理路由</h1>
<p>前幾天我們學習到了如何在元件中使用 Router 來導航，而今天要學習的部分則是如何透過<strong>集中管理所有路由的方式實現導航到各個頁面的方式</strong>。</p>
<span id="more"></span>
<p>而這個方式就是在配置一個 router 的 config 檔案。</p>
<p>今天會透過兩個範例來理解這個部分:</p>
<ol>
<li>只有一層路由的 Router 配置</li>
<li>具有巢狀路由的 Router 配置</li>
</ol>
<p>接著就趕緊今天的進度吧!</p>
<h2 id="基礎-Router-config-配置"><a class="header-anchor" href="#基礎-Router-config-配置"></a>基礎 Router config 配置</h2>
<p>首先要學習的部分是配置只有一層路由的頁面切換，相信大家都已經有基本的概念了，所以這邊就直接來看看如何透過集中管理路由的方式達成:</p>
<p>相關測試範例，<a href="https://codesandbox.io/s/blissful-dubinsky-q9lr7?file=/src/App.js">點擊前往</a>。</p>
<p>首先先建立一個用來管理路由的檔案:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重點觀察位置</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/car&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;../components/Car&quot;</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/airplane&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;../components/Airplane&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes;</span><br></pre></td></tr></table></figure>
<p>這邊有幾個重點:</p>
<ol>
<li>將畫面上需要的路由統一設定於此，而這邊設定了 <code>/car</code>, <code>/airplane</code> 兩個元件的路由</li>
<li>另外透過懶加載(lazy load)的方式引入元件。</li>
<li>將 routes 匯出提供其他元件可以使用。</li>
</ol>
<p>基本上上述的配置就已經完成了集中路由管理的設定，接著我們到元件中配置路由。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="comment">// 重點觀察位置</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Suspense</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavLink</span>, <span class="title class_">Route</span>, <span class="title class_">Switch</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>基礎 Router config 配置<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/car&quot;</span>&gt;</span>Car<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;/airplane&quot;</span>&gt;</span>Airplne<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 重點觀察位置 */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;routes.map((route, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          // console.log(route);</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          return (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">key</span>=<span class="string">&#123;index&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">path</span>=<span class="string">&#123;route.path&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                // 重點觀察位置</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">render</span>=<span class="string">&#123;(props)</span> =&gt;</span> <span class="tag">&lt;<span class="name">route.component</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">              /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          );</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>路由的配置基本上與前幾天提到的相差不遠，但這裡透過 <code>map</code> 方法依據 <code>routes</code> 中的元素進行 <code>Route</code> 的建立。</p>
<p>此外需要注意的是，由於在 router 中使用了懶加載的方式，所以在 App.js 中需要將 dom 內容放置於 <code>&lt;Suspense</code> 元件之中，才可以正常運作。</p>
<p>這部分熟悉之後，接著我們再多些變化，配置具有巢狀路由的 Router 配置。</p>
<h2 id="在-Router-config-中配置巢狀路由"><a class="header-anchor" href="#在-Router-config-中配置巢狀路由"></a>在 Router config  中配置巢狀路由</h2>
<p>接著我們透過上面的<a href="https://codesandbox.io/s/blissful-dubinsky-q9lr7?file=/src/App.js">測試範例</a>，額外新增一個具有巢狀路由需求的配置到範例中。</p>
<p>首先是集中管理路由 router 檔案:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重點觀察位置</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/car&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;../components/Car&quot;</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/airplane&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;../components/Airplane&quot;</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/nested&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;../components/Nested&quot;</span>)),</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/cmp-1&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;../components/CmpOne&quot;</span>))</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/cmp-2&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;../components/CmpTwo&quot;</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes;</span><br></pre></td></tr></table></figure>
<p>這邊可以看到新增了一個新的 Nested 元件路徑以及在這個元件中的子元件路徑。</p>
<p>接著為了讓 Nested 元件中可以取得 routes 的內容，所以這邊我們還需要在 App.js 中將 routes 傳入:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line">&lt;<span class="title class_">Switch</span>&gt;</span><br><span class="line">  &#123;routes.<span class="title function_">map</span>(<span class="function">(<span class="params">route, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(route);</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">key</span>=<span class="string">&#123;index&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">path</span>=<span class="string">&#123;route.path&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        // 重點觀察位置</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">render</span>=<span class="string">&#123;(props)</span> =&gt;</span> (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">route.component</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">routes</span>=<span class="string">&#123;route.routes&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;)&#125;</span><br><span class="line">&lt;/<span class="title class_">Switch</span>&gt;</span><br></pre></td></tr></table></figure>
<p>這邊的 <code>route.routes</code> 就是將子元件的資訊傳入至 Nested 中，接著我們就可以在 Nested 元件中配置路由囉！</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Nested.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavLink</span>, <span class="title class_">Route</span>, <span class="title class_">Switch</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Nested</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(this.props);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Nested Component<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#123;this.props.match.url</span> + &quot;/<span class="attr">cmp-1</span>&quot;&#125;&gt;</span>cmp-1<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#123;this.props.match.url</span> + &quot;/<span class="attr">cmp-2</span>&quot;&#125;&gt;</span>cmp-2<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 重點觀察位置 */&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;this.props.routes.map((route, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            return (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">key</span>=<span class="string">&#123;index&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">path</span>=<span class="string">&#123;this.props.match.url</span> + <span class="attr">route.path</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">render</span>=<span class="string">&#123;(props)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                  // console.log(this.props.match.url + route.path);</span></span><br><span class="line"><span class="language-xml">                  return <span class="tag">&lt;<span class="name">route.component</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">                &#125;&#125;</span></span><br><span class="line"><span class="language-xml">              /&gt;</span></span><br><span class="line"><span class="language-xml">            );</span></span><br><span class="line"><span class="language-xml">          &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Nested 元件中，可以看到我們一樣透過 map 將傳入的 <code>routes</code> 內容迭代後建立 <code>&lt;Route&gt;</code> 元件，而路徑的配置則於前面的篇幅已經提過，透過 <code>this.props.match.url</code> 的方式取得後再於該巢狀元件的路徑組合，這樣就可以成功匹配巢狀元件的內容。</p>
<p>鐵人賽文章與程式碼同步發佈於:</p>
<ul>
<li><a href="https://github.com/penghuachen/React_30">Github</a></li>
</ul>
<h2 id="資源"><a class="header-anchor" href="#資源"></a>資源</h2>
<ul>
<li><a href="https://reactrouter.com/web/example/route-config">Router config</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>第十二屆 iT邦幫忙鐵人賽</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>第十二屆 iT邦幫忙鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day03 - #2 - Carrom</title>
    <url>/2019/05/30/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day03-2-Carrom/</url>
    <content><![CDATA[<h1 id="Target-2-Carrom"><a class="header-anchor" href="#Target-2-Carrom"></a>Target #2 - Carrom</h1>
<p><img src="https://i.imgur.com/370nm4y.png" alt="CSSBattle"></p>
<h2 id="撰寫思維"><a class="header-anchor" href="#撰寫思維"></a>撰寫思維</h2>
<ol>
<li>
<p>設定四個 div 的區塊並使用 flex 語法調整到需求的位置</p>
<ul>
<li>flex-wrap:wrap 此語法可以讓 flex-item(指的是 div)在容器寬度不夠時換行</li>
<li>justify-content:space-between 此語法可以讓 flex-item 在主軸的方向<strong>分配在容器中彈性元素之間及其周圍的空間。</strong></li>
</ul>
</li>
<li>
<p>透過 css selector 的 <strong>nth-child</strong> 和 <strong>~</strong> 這兩個選取器對於<strong>第二個 div 之後的所有 div 都做 margin-top:58px 的設定</strong></p>
</li>
</ol>
<span id="more"></span>
<h2 id="最後結果"><a class="header-anchor" href="#最後結果"></a>最後結果</h2>
<p><img src="https://i.imgur.com/miHWuXg.png" alt="Carrom"></p>
<p>附上 codepen(CSSBattle 目前無法透過附上連結看到別人所寫的程式碼，所以我另外寫在 codepen 方便點擊。可直接複製貼上即可查看結果)</p>
<p><a href="https://codepen.io/kids5346/pen/zQmyJd">#2 Carrom</a></p>
<p>第二關使用 flex 的語法完成，對於排版上會比較容易且方便，但 flex 的觀念需要好好的理解，在使用上才不會覺得搞不清楚。而 flex 學好的話，個人覺得 Bootstrap4 就蠻好上手且修改的，因為該框架的核心觀念就是以 flex 為基底開發的。</p>
<p>個人覺得學習 flex 分為兩個部分:</p>
<ul>
<li>了解主軸 (main axis)、次軸(cross axis)是什麼，怎麼判斷以及相關的語法使用的位置是在容器或者是在元素上</li>
<li>進階一點的部分則是 flex-basis/flex-shrink/flex-basis 的用意以及運算</li>
</ul>
<p>基本上如果這邊都理解了，對於 flex 的運用也大概可以有一定的程度了～</p>
<p>在此附上 flex 的一些學習連結，之後找機會整理成一篇筆記</p>
<ol>
<li><a href="https://www.w3schools.com/cssref/css3_pr_flex.asp">w3school</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes">MDN</a></li>
<li><a href="https://www.w3.org/TR/css-flexbox-1/">w3.org</a></li>
</ol>
<p>第二關也不算太難，也許之後回頭看會有更好的寫法，但目前就先這樣子囉 XD</p>
<p>明天繼續迎接新的一關!! Keep Moving</p>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>
]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>CSSBattle</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day04 - #3-Push Button</title>
    <url>/2019/05/31/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day04-3-Push-Button/</url>
    <content><![CDATA[<h1 id="Target-3-Push-Button"><a class="header-anchor" href="#Target-3-Push-Button"></a>Target #3 - Push Button</h1>
<p><img src="https://i.imgur.com/wfsKMGr.png" alt="CSSBattle"></p>
<h2 id="撰寫思維"><a class="header-anchor" href="#撰寫思維"></a>撰寫思維</h2>
<ol>
<li>
<p>撰寫的區塊分為下方完成圖中的 4 個部分。</p>
</li>
<li>
<p>對於方塊以及圓形部分的垂直置中，都是透過 flex 語法調整到需求的位置(垂直置中的需求)</p>
<ul>
<li>justify-content:center 此語法可以讓 flex-item 在<strong>主軸</strong>的方向<strong>使彈性元素置中於容器中間。</strong></li>
<li>align-items:center 此語法可以讓 flex-item 在<strong>次軸</strong>的方向<strong>使彈性元素置中於容器中間。</strong></li>
</ul>
</li>
</ol>
<span id="more"></span>
<h2 id="最後結果"><a class="header-anchor" href="#最後結果"></a>最後結果</h2>
<p><img src="https://i.imgur.com/WTzk0rM.png" alt="Push Button"></p>
<p>附上 codepen(CSSBattle 目前無法透過附上連結看到別人所寫的程式碼，所以我另外寫在 codepen 方便點擊。可直接複製貼上即可查看結果)</p>
<p><a href="https://codepen.io/kids5346/pen/oRQmQO">#3 Push Button</a></p>
<p>第三關也是使用 flex 的語法完成，基本上此次的挑戰都會用 flex 做排版，而比起上一篇 <a href="https://penghuachen.github.io/2019/05/30/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day03-2-Carrom/">連續記錄挑戰 Day03 - #2 - Carrom</a>，此次除了使用 justify-content 這個語法之外，另外還使用了 aligin-items。aligin-items 就是用來讓我們在次軸做設定時使用，而設定上和 justify-content 無異，差別只在於 justify-content 用在主軸，而 aligin-items 用在次軸罷了。</p>
<p>比起以往許多垂直置中的方法，flex 真的是非常的好用！也是排版的聖品啊～，而在 flex 目前已經支援度頗高的情況下，這幾乎已經是必學的排版技巧了。在此附上 flex 的支援度： <a href="https://caniuse.com/#search=flex">can i use - flex</a></p>
<p>除了 IE9 之前的版本之外，基本上都可以使用了，真的很棒！</p>
<p>第三關不算太難，重點在於如何看待這個圖案。目前自己是用了一個長方形+三個圓型完成，也許之後會有更好的寫法，但目前就先這樣子囉 XD</p>
<p>明天繼續迎接新的一關!! Keep Moving</p>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>
]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>CSSBattle</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day05 - #4-Ups n Downs</title>
    <url>/2019/06/01/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day05-4-Ups-n-Downs/</url>
    <content><![CDATA[<h1 id="Target-4-Ups-n-Downs"><a class="header-anchor" href="#Target-4-Ups-n-Downs"></a>Target #4 - Ups n Downs</h1>
<p><img src="https://i.imgur.com/n9mMaOo.png" alt="CSSBattle"></p>
<h2 id="撰寫思維"><a class="header-anchor" href="#撰寫思維"></a>撰寫思維</h2>
<ol>
<li>
<p>撰寫的區塊使用三個 div 區塊並加上 border-radius 語法撰寫圓角效果。</p>
</li>
<li>
<p>使用偽元素::after 寫出方形區塊並透過絕對定位的方式讓每一個方形區塊可以蓋住不要呈現的部分，如下方示意圖中的編號 1/2/3 的部分。</p>
</li>
</ol>
<p><img src="https://i.imgur.com/O6avfov.png" alt="Ups n Downs"></p>
<ol start="3">
<li>使用 flex 語法將區塊垂直及水平置中於容器正中間。</li>
</ol>
<span id="more"></span>
<h2 id="最後結果"><a class="header-anchor" href="#最後結果"></a>最後結果</h2>
<p><img src="https://i.imgur.com/lOrSMUj.png" alt="Ups n Downs"></p>
<p>附上 codepen(CSSBattle 目前無法透過附上連結看到別人所寫的程式碼，所以我另外寫在 codepen 方便點擊。可直接複製貼上即可查看結果)</p>
<p><a href="https://codepen.io/kids5346/pen/joXwNw">#4 Ups n Downs</a></p>
<p>第四關有使用到偽元素(pseudo element) ::after，要特別說明一下特性：</p>
<ul>
<li>偽元素目前總共有: **::first-line / ::first-letter / ::selection / ::before / ::after **</li>
<li>是元素之一，會出現在 DOM 的結構之中</li>
<li>使用偽元素::before / ::after 時需要注意的部分是一定要設定 <strong>content</strong> 這個屬性，可以是空值，也可以在裡面塞入要顯示的字串。(但是如果是需要透過 js 等語言操作的字串資料的話，則應該要避免將字串透過偽元素的語法呈現。)</li>
<li>具有 inline 的特性</li>
</ul>
<blockquote>
<p>REF : <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::after">MDN</a><br>
REF : <a href="https://www.w3schools.com/css/css_pseudo_elements.asp">W3School</a></p>
</blockquote>
<p>偽元素可以應用的地方很多，如果會運用的話可以大大的減少使用區塊/行內元素的次數！</p>
<p>明天繼續迎接新的一關!! Keep Moving</p>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>
]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>CSSBattle</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day06- margin collapse由來與BFC原理</title>
    <url>/2019/06/02/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day06-margin-collapse%E7%94%B1%E4%BE%86%E8%88%87BFC%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="這次要記錄的是為什麼會有margin-collpase的情況，和BFC又有什麼關係。"><a class="header-anchor" href="#這次要記錄的是為什麼會有margin-collpase的情況，和BFC又有什麼關係。"></a>這次要記錄的是為什麼會有margin collpase的情況，和BFC又有什麼關係。</h1>
<br>
記錄的順序依序為:
1. 什麼情況會遇到margin collpase？
2. 為什麼BFC會和margin collapse有關？
3. 如何避免這樣的狀況？
<p>對於自己來說，<strong>先是遇到了什麼問題，然後查了相關的原理，最後得到了處理該問題的方法</strong>這樣子的順序會比較好記憶。</p>
<span id="more"></span>
<h2 id="什麼情況會遇到margin-collpase？"><a class="header-anchor" href="#什麼情況會遇到margin-collpase？"></a>什麼情況會遇到margin collpase？</h2>
<p>情境題：</p>
<p>小明今天在撰寫HTML時，寫了一個 h1 tag 以及一個 p tag，如圖所示：</p>
<p><img src="https://i.imgur.com/oFqfrig.png" alt=""></p>
<p>而且小明想要讓<strong>h1 tag 以及 p tag 的margin-top、margin-bottom都各自設定20px，心想這樣的話，h1 tag 以及 p tag 之間的距離就會是20px+20px = 40px了吧！但沒想到卻發現實際的結果竟然還是20px</strong>如下圖所示(為方便呈現重疊情形，有後製圖片)。</p>
<p><img src="https://i.imgur.com/cZGtXNj.png" alt=""></p>
<p>這裡小明就是遇到了margin collpase的情況，<strong>margin collpase會導致元素之間的margin-top、margin-bottom重疊</strong>。</p>
<h2 id="什麼是BFC-Block-Formattimg-Context，和-margin-collpase-有什麼關係"><a class="header-anchor" href="#什麼是BFC-Block-Formattimg-Context，和-margin-collpase-有什麼關係"></a>什麼是BFC(Block Formattimg Context，和 margin collpase 有什麼關係?</h2>
<ol>
<li>BFC定義：
<ul>
<li>大概意思是在<strong>BFC中元素的排列方式是一個接著一個垂直的排列下去，且元素之間的距離是由margin特性決定。而相鄰的兩元素會有collpase的情形。</strong> (這也是為什麼會有margin collapse的情形發生)</li>
</ul>
</li>
</ol>
<blockquote>
<p><img src="https://i.imgur.com/XHFdeoa.png" alt=""></p>
</blockquote>
<ol start="2">
<li>以下幾種狀況可以建立新的BFC：
<ul>
<li>float</li>
<li>position absolute / fixed</li>
<li>overflow (except visiable attribute)</li>
<li>inline-block</li>
<li>table-cells</li>
<li>table-captions</li>
</ul>
</li>
</ol>
<blockquote>
<p><img src="https://i.imgur.com/YiwQc1j.png" alt=""></p>
</blockquote>
<h2 id="如何避免這樣的狀況？"><a class="header-anchor" href="#如何避免這樣的狀況？"></a>如何避免這樣的狀況？</h2>
<p>規範文件中有提到下列情況會發生margin collpase，所以反過來思考與設定就可以避免此問題。<br>
最常見的方式就是<strong>使用padding-top取代margin-top推移元素之間的距離</strong>（圖片中第二行有提到）。<br>
而這只是其中一種方式，其他的方式可以參考文件並反思即可。</p>
<blockquote>
<p><img src="https://i.imgur.com/u3J7w9A.png" alt=""></p>
</blockquote>
<br>
<p>原來 margin collaspe是因為這麼深層的原理而造成的，真的是收穫良多啊！！</p>
<p>以前只知道會有這種情形，所以改用padding-top處理就好，但為什麼會有這種情況卻一直沒有深入探究，幸好這次有研究了一番，覺得值得！！</p>
<p>今天就到這裡為止～ 明天繼續，keep moving！！</p>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>]]></content>
      <categories>
        <category>把玩Css</category>
        <category>前端面試題</category>
      </categories>
      <tags>
        <tag>HTML/CSS</tag>
        <tag>前端面試題</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day07-#5-Acid-Rain</title>
    <url>/2019/06/03/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day07-5-Acid-Rain/</url>
    <content><![CDATA[<h1 id="Target-5-Acid-Rain"><a class="header-anchor" href="#Target-5-Acid-Rain"></a>Target #5 - Acid Rain</h1>
<p><img src="https://i.imgur.com/Rce6P72.png" alt="CSSBattle"></p>
<h2 id="撰寫思維"><a class="header-anchor" href="#撰寫思維"></a>撰寫思維</h2>
<ol>
<li>
<p>水平以及垂直置中方式和前面幾關的方式相同，都是使用flex語法完成。</p>
</li>
<li>
<p>使用border-radius語法對於元素的三個角(左上、右下、左下)做設定，而右上則不設定。</p>
</li>
<li>
<p>將容器(此指的是程式碼中的wrap)旋轉45度。</p>
</li>
</ol>
<span id="more"></span>
<h2 id="最後結果"><a class="header-anchor" href="#最後結果"></a>最後結果</h2>
<p><img src="https://i.imgur.com/ncibv76.png" alt="Acid Rain"></p>
<p>附上 codepen(CSSBattle 目前無法透過附上連結看到別人所寫的程式碼，所以我另外寫在 codepen 方便點擊。可直接複製貼上即可查看結果)</p>
<p><a href="https://codepen.io/kids5346/pen/vwbzRZ">#5 Acid Rain</a></p>
<p>關於border-radius，除了可以直接在此語法對四個角做設定之外，也可以透過下列的語法達成。</p>
<ul>
<li>border-top-left-radius 針對左上做圓角的設定</li>
<li>border-top-right-radius 針對右上做圓角的設定</li>
<li>border-bottom-left-radius 針對左下做圓角的設定</li>
<li>border-bottom-right-radius 針對右下做圓角的設定</li>
</ul>
<blockquote>
<p>REF : <a href="https://www.w3schools.com/cssref/css3_pr_border-radius.asp">w3schools</a></p>
</blockquote>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>
]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>CSSBattle</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day08-calc()原理與應用</title>
    <url>/2019/06/04/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day08-calc-%E5%8E%9F%E7%90%86%E8%88%87%E6%87%89%E7%94%A8/</url>
    <content><![CDATA[<h1 id="這次要記錄的是如何應用calc-。"><a class="header-anchor" href="#這次要記錄的是如何應用calc-。"></a>這次要記錄的是如何應用calc()。</h1>
<br>
記錄的順序依序為:
1. 怎麼使用？
2. 需要注意的細節？
3. 支援度？
<span id="more"></span>
<h2 id="怎麼使用-calc"><a class="header-anchor" href="#怎麼使用-calc"></a>怎麼使用 calc()?</h2>
<p>calc() 這個語法可以幫我們自動計算出數值，真的是很棒，而使用的方式也很簡單，在要設定的樣式裡將需要計算數值的部分改由calc()計算即可。</p>
<p>ex: width:calc(100% - 50px);</p>
<p>width會得到一個值 = <strong>瀏覽器自動計算得到的值 - 50px</strong>。</p>
<p>這個語法可以使用的範圍也很廣：</p>
<ul>
<li>length</li>
<li>frequency</li>
<li>angle</li>
<li>time</li>
<li>number</li>
<li>integer</li>
</ul>
<h2 id="需要注意的細節？"><a class="header-anchor" href="#需要注意的細節？"></a>需要注意的細節？</h2>
<ul>
<li>可以使用不同單位混合計算，如上面提到的舉例。但是像是 calc(100% - 45deg)這類的計算會是無效的。</li>
<li>使用時在<strong>運算符號兩側需要空格</strong>，否則會出錯。</li>
</ul>
<h2 id="支援度？"><a class="header-anchor" href="#支援度？"></a>支援度？</h2>
<p>只要版本大於 ie 9 / ie edge 12 / firefox 4 / chrome 19 / safari 6 以上皆有支援</p>
<blockquote>
<p>REF : <a href="https://caniuse.com/#search=calc">can i use</a></p>
</blockquote>
<blockquote>
<p>REF : <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/calc">MDN</a></p>
</blockquote>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>HTML/CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day09-#6 Missing Slice</title>
    <url>/2019/06/05/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day09-6-Missing-Slice/</url>
    <content><![CDATA[<h1 id="Target-6-Missing-Slice"><a class="header-anchor" href="#Target-6-Missing-Slice"></a>Target #6 - Missing Slice</h1>
<p><img src="https://i.imgur.com/iFSOY1W.png" alt="CSSBattle"></p>
<h2 id="撰寫思維"><a class="header-anchor" href="#撰寫思維"></a>撰寫思維</h2>
<ul>
<li>水平及垂直置中方式一樣採用flex的語法達成。</li>
<li>而圖形的組合則是看成<strong>半圓＋四分之一的圓</strong>即可。</li>
</ul>
<span id="more"></span>
<h2 id="最後結果"><a class="header-anchor" href="#最後結果"></a>最後結果</h2>
<p><img src="https://i.imgur.com/D19l0aB.png" alt="Missing Slice"></p>
<p>附上 codepen(CSSBattle 目前無法透過附上連結看到別人所寫的程式碼，所以我另外寫在 codepen 方便點擊。可直接複製貼上即可查看結果)</p>
<p><a href="https://codepen.io/kids5346/pen/QRPzXx">#6 Missing Slice</a></p>
<p>圓角的設定同前一篇記錄的分享 <a href="https://penghuachen.github.io/2019/06/03/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day07-5-Acid-Rain/">連續記錄挑戰Day07-5-Acid-Rain</a>，可以針對四個角做出特定的設定。而四分之一圓的設定步驟有兩個：</p>
<ul>
<li>
<p>假設有一個圓形寬度及高度為200px，則<strong>四分之一圓形須將寬度及高度設定為圓形的一半</strong></p>
</li>
<li>
<p>依照需求設定圓角的部分。</p>
</li>
</ul>
<p>做到這關發現開始有些技巧都在重複運用了，剛好藉此機會可以更加了解及活用！</p>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>
]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>CSSBattle</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day11-8-Forking Crazy</title>
    <url>/2019/06/07/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day11-8-Forking-Crazy/</url>
    <content><![CDATA[<h1 id="Target-8-Forking-Crazy"><a class="header-anchor" href="#Target-8-Forking-Crazy"></a>Target #8- Forking Crazy</h1>
<p><img src="https://i.imgur.com/SWnyaPp.png" alt="CSSBattle"></p>
<h2 id="撰寫思維"><a class="header-anchor" href="#撰寫思維"></a>撰寫思維</h2>
<ul>
<li>
<p>這個圖形的的對齊方式是：<strong>水平置中 ＋ 垂直靠下</strong></p>
</li>
<li>
<p>圖形組合的思考則參考示意圖，如下圖。</p>
</li>
</ul>
<span id="more"></span>
<p><img src="https://i.imgur.com/TaWbAmm.png" alt="CSSBattle"></p>
<h2 id="最後結果"><a class="header-anchor" href="#最後結果"></a>最後結果</h2>
<p><img src="https://i.imgur.com/KwcWvrx.png" alt="Forking Crazy"></p>
<p>附上 codepen(CSSBattle 目前無法透過附上連結看到別人所寫的程式碼，所以我另外寫在 codepen 方便點擊。可直接複製貼上即可查看結果)</p>
<p><a href="https://codepen.io/kids5346/pen/eawPbw">#8 Forking Crazy</a></p>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>CSSBattle</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day10-7-Leafy Trail</title>
    <url>/2019/06/06/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day10-7-Leafy-Trail/</url>
    <content><![CDATA[<h1 id="Target-7-Leafy-Trail"><a class="header-anchor" href="#Target-7-Leafy-Trail"></a>Target #7- Leafy Trail</h1>
<p><img src="https://i.imgur.com/A4n4r1s.png" alt="CSSBattle"></p>
<h2 id="撰寫思維"><a class="header-anchor" href="#撰寫思維"></a>撰寫思維</h2>
<ul>
<li>
<p>水平及垂直置中方式一樣採用flex的語法達成。</p>
</li>
<li>
<p>圖形組合的思考則是將三個正方形的 <strong>左上及右下</strong>做border-radius圓角的設定，並透過 <strong>margin設定負值</strong>讓元素可以置於需求位置。</p>
</li>
</ul>
<span id="more"></span>
<h2 id="最後結果"><a class="header-anchor" href="#最後結果"></a>最後結果</h2>
<p><img src="https://i.imgur.com/SOKxiKK.png" alt="Leafy Trail"></p>
<p>附上 codepen(CSSBattle 目前無法透過附上連結看到別人所寫的程式碼，所以我另外寫在 codepen 方便點擊。可直接複製貼上即可查看結果)</p>
<p><a href="https://codepen.io/kids5346/pen/MddRao">#7 Leafy Trail</a></p>
<p>這一關有使用到margin設定負值達成需求，而margin其實是可以設定負值的，但是**padding、border不行。**這一個部分在規範文件中有提到：</p>
<p><img src="https://i.imgur.com/4H4EDvP.png" alt=""><br>
<img src="https://i.imgur.com/YTDHdjv.png" alt=""></p>
<blockquote>
<p><a href="https://www.w3.org/TR/CSS2/box.html">8.4 Padding properties</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.w3.org/TR/CSS2/box.html">8.5 Border properties</a></p>
</blockquote>
<p>關於margin設定負值的測試會另篇記錄，之後在將連結補上。</p>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>
]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>CSSBattle</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day12-9-Tesseract</title>
    <url>/2019/06/08/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day12-9-Tesseract/</url>
    <content><![CDATA[<h1 id="Target-9-Tesseract"><a class="header-anchor" href="#Target-9-Tesseract"></a>Target #9- Tesseract</h1>
<p><img src="https://i.imgur.com/7UIDFfw.png" alt="CSSBattle"></p>
<h2 id="撰寫思維"><a class="header-anchor" href="#撰寫思維"></a>撰寫思維</h2>
<ul>
<li>
<p>圖形組合的思考參考示意圖，如下:</p>
<ul>
<li>由外往內為長方形 -&gt; 正方形 -&gt; 正方形 -&gt; 圓形</li>
</ul>
</li>
<li>
<p>使用flex語法做區塊的水平及垂直置中:</p>
<ul>
<li>a:垂直置中</li>
<li>b、c、d做水平及垂直置中</li>
</ul>
</li>
</ul>
<span id="more"></span>
<p><img src="https://i.imgur.com/88ABbQJ.png" alt="Tesseract"></p>
<h2 id="最後結果"><a class="header-anchor" href="#最後結果"></a>最後結果</h2>
<p><img src="https://i.imgur.com/ReI9nhG.png" alt="Tesseract"></p>
<p>附上 codepen(CSSBattle 目前無法透過附上連結看到別人所寫的程式碼，所以我另外寫在 codepen 方便點擊。可直接複製貼上即可查看結果)</p>
<p><a href="https://codepen.io/kids5346/pen/dExNeV">#9 Tesseract</a></p>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>CSSBattle</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day13-純CSS手刻三角形</title>
    <url>/2019/06/09/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day13-%E7%B4%94CSS%E6%89%8B%E5%88%BB%E4%B8%89%E8%A7%92%E5%BD%A2/</url>
    <content><![CDATA[<h1 id="純CSS手刻三角形"><a class="header-anchor" href="#純CSS手刻三角形"></a>純CSS手刻三角形</h1>
<p>對於手刻三角形之前一直都搞不清楚，也常常為了特定方向的三角形而弄了半天，所以剛好趁著連續記錄這個挑戰順便記錄一番。</p>
<p>而這篇記錄文章會依照下列順序記錄：</p>
<ol>
<li>關於盒模型 (Box model)</li>
<li>比較1 : border-width不同</li>
<li>比較2 : 保留比較1的border-width設定，將<strong>內容區寬度及高度變成50px並為四邊border設定不同顏色</strong></li>
<li>比較3 : 保留比較1的border-width設定，將<strong>寬度及高度變成0px並為四邊border設定不同顏色</strong></li>
</ol>
<span id="more"></span>
<h2 id="關於盒模型-box-model"><a class="header-anchor" href="#關於盒模型-box-model"></a>關於盒模型(box model)</h2>
<p><img src="https://i.imgur.com/YOlDrTp.png" alt=""></p>
<h2 id="比較1：border-width不同"><a class="header-anchor" href="#比較1：border-width不同"></a>比較1：border-width不同</h2>
<ul>
<li>
<p><img src="https://i.imgur.com/AsgWbZn.png" alt=""></p>
</li>
<li>
<p><img src="https://i.imgur.com/oFrU3M2.png" alt=""></p>
</li>
</ul>
<h2 id="比較2-保留比較1的border-width設定，將內容區寬度及高度變成50px並為四邊border設定不同顏色："><a class="header-anchor" href="#比較2-保留比較1的border-width設定，將內容區寬度及高度變成50px並為四邊border設定不同顏色："></a>比較2:保留比較1的border-width設定，將<strong>內容區寬度及高度變成50px並為四邊border設定不同顏色</strong>：</h2>
<ul>
<li>
<p><img src="https://i.imgur.com/ictROBx.png" alt=""></p>
</li>
<li>
<p><img src="https://i.imgur.com/3vf3kxw.png" alt=""></p>
</li>
</ul>
<h2 id="比較3-保留比較1的border-width設定，將寬度及高度變成0px並為四邊border設定不同顏色："><a class="header-anchor" href="#比較3-保留比較1的border-width設定，將寬度及高度變成0px並為四邊border設定不同顏色："></a>比較3:保留比較1的border-width設定，將<strong>寬度及高度變成0px並為四邊border設定不同顏色</strong>：</h2>
<ul>
<li>
<p>顏色設定：border-color: #aad #ada #dda #dad;</p>
</li>
<li>
<p><img src="https://i.imgur.com/DBYgMSi.png" alt=""></p>
</li>
</ul>
<h2 id="活用："><a class="header-anchor" href="#活用："></a>活用：</h2>
<p>示意圖：<img src="https://i.imgur.com/0G74DVN.png" alt=""></p>
<ol>
<li>狀況ㄧ：只顯示d區塊 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    width:0px;</span><br><span class="line">    height:0px;</span><br><span class="line">    border-style:solid;</span><br><span class="line">    border-color: transparent transparent transparent #dad;</span><br><span class="line">    border-width:80px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<ol start="2">
<li>狀況二：顯示b+c區塊 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">        width:0px;</span><br><span class="line">        height:0px;</span><br><span class="line">        border-style:solid;</span><br><span class="line">        border-color: transparent #ada #dda transparent;</span><br><span class="line">        border-width:80px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>Ref : <a href="https://www.wibibi.com/info.php?tid=CSS_box_model_%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B">Wibibi Box model</a></p>
</blockquote>
]]></content>
      <categories>
        <category>把玩Css</category>
        <category>前端面試題</category>
      </categories>
      <tags>
        <tag>HTML/CSS</tag>
        <tag>前端面試題</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day14-10-Cloaked Spirits</title>
    <url>/2019/06/10/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day14-10-Cloaked-Spirits/</url>
    <content><![CDATA[<h1 id="Target-10-Cloaked-Spirits"><a class="header-anchor" href="#Target-10-Cloaked-Spirits"></a>Target #10- Cloaked Spirits</h1>
<p><img src="https://i.imgur.com/T2lgoD5.png" alt="CSSBattle"></p>
<h2 id="撰寫思維"><a class="header-anchor" href="#撰寫思維"></a>撰寫思維</h2>
<ul>
<li>
<p>圖形組合的思考參考示意圖，如下:</p>
<p>區分為1、2、3的區塊 ＋ a、b、c 三個圓形的部分</p>
</li>
<li>
<p>使用flex語法做區塊的水平置中及垂直方向置底</p>
</li>
<li>
<p>設定border-radius滿足1、2、3區塊的圓角設定</p>
</li>
<li>
<p>設定a、b、c 三個圓形的部分</p>
</li>
</ul>
<span id="more"></span>
<p><img src="https://i.imgur.com/YaWlKLU.png" alt="Cloaked Spirits"></p>
<h2 id="最後結果"><a class="header-anchor" href="#最後結果"></a>最後結果</h2>
<p><img src="https://i.imgur.com/BLLHXqS.png" alt="Cloaked Spirits"></p>
<p>附上 codepen(CSSBattle 目前無法透過附上連結看到別人所寫的程式碼，所以我另外寫在 codepen 方便點擊。可直接複製貼上即可查看結果)</p>
<p><a href="https://codepen.io/kids5346/pen/PrYOde?editors=1000">#10 Cloaked Spirits</a></p>
<p>這一關嘗試使用了 nth-of-type的語法做設定，但在闖關的過程中因為觀念的不清楚，所以和 nth-child的語法有搞混，於是決定要寫一篇關於上述語法差異性的筆記。</p>
<p>待記錄完後，在將該筆記連結補充至此。</p>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>
]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>CSSBattle</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day15-11-Eye of Sauron</title>
    <url>/2019/06/11/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day15-11-Eye-of-Sauron/</url>
    <content><![CDATA[<h1 id="Target-11-Eye-of-Sauron"><a class="header-anchor" href="#Target-11-Eye-of-Sauron"></a>Target #11- Eye of Sauron</h1>
<p><img src="https://i.imgur.com/RANwPBS.png" alt="CSSBattle"></p>
<h2 id="撰寫思維"><a class="header-anchor" href="#撰寫思維"></a>撰寫思維</h2>
<ul>
<li>
<p>圖形組合的思考參考示意圖，如下:<br>
分為A、B、C 三個部分 (由左至右：半圓 ＋ 圓形 ＋半圓)</p>
</li>
<li>
<p>使用flex語法做區塊的水平及垂直方向置中</p>
</li>
<li>
<p>border-width設定黃色部份的邊框</p>
</li>
</ul>
<span id="more"></span>
<p><img src="https://i.imgur.com/qXvLcec.png" alt="Eye of Sauron"></p>
<h2 id="最後結果"><a class="header-anchor" href="#最後結果"></a>最後結果</h2>
<p><img src="https://i.imgur.com/QAkNQTC.png" alt="Eye of Sauron"></p>
<p>附上 codepen(CSSBattle 目前無法透過附上連結看到別人所寫的程式碼，所以我另外寫在 codepen 方便點擊。可直接複製貼上即可查看結果)</p>
<p><a href="https://codepen.io/kids5346/pen/jjOWNR">#11 Eye of Sauron</a></p>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>
]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>CSSBattle</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day16-#12-Wiggly Moustache</title>
    <url>/2019/06/12/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day16-12-Wiggly-Moustache/</url>
    <content><![CDATA[<h1 id="Target-12-Wiggly-Moustache"><a class="header-anchor" href="#Target-12-Wiggly-Moustache"></a>Target #12- Wiggly Moustache</h1>
<p><img src="https://i.imgur.com/QMmT3Kx.png" alt="CSSBattle"></p>
<h2 id="撰寫思維"><a class="header-anchor" href="#撰寫思維"></a>撰寫思維</h2>
<ul>
<li>
<p>圖形組合的思考參考示意圖，如下:<br>
分為A、B、C 三個部分 ＋箭頭所指的兩個半圓(小)</p>
</li>
<li>
<p>使用flex語法做區塊的水平及垂直方向置中</p>
</li>
<li>
<p>border-width設定橘色部份的邊框</p>
</li>
</ul>
<span id="more"></span>
<p><img src="https://i.imgur.com/hjze63t.png" alt="Wiggly Moustache"></p>
<h2 id="最後結果"><a class="header-anchor" href="#最後結果"></a>最後結果</h2>
<p><img src="https://i.imgur.com/r7eCn2o.png" alt="Wiggly Moustache"></p>
<p>附上 codepen(CSSBattle 目前無法透過附上連結看到別人所寫的程式碼，所以我另外寫在 codepen 方便點擊。可直接複製貼上即可查看結果)</p>
<p><a href="https://codepen.io/kids5346/pen/ydyQoj">#12 Wiggly Moustache</a></p>
<p>沒想到竟然能將CSSBattle這個網站的一個階段性目標達成，也透過這陣子的練習，讓自己對於圖形的組合又有更深的理解！</p>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>
]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>CSSBattle</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day17-transform初探- part1</title>
    <url>/2019/06/13/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day17-transform%E5%88%9D%E6%8E%A2-part1/</url>
    <content><![CDATA[<h1 id="css-大全-transform-初探-part1"><a class="header-anchor" href="#css-大全-transform-初探-part1"></a>css 大全 - transform 初探 -part1</h1>
<h2 id="轉換-transform-會使用到的兩種系統："><a class="header-anchor" href="#轉換-transform-會使用到的兩種系統："></a>轉換(transform)會使用到的兩種系統：</h2>
<ul>
<li>笛卡爾座標系統：也稱為x/y/z座標系統
<ul>
<li>水平方向的x軸</li>
<li>垂直方向的Y軸</li>
<li>代表深度的Z軸｀</li>
</ul>
</li>
</ul>
<span id="more"></span>
<ul>
<li>球面系統：描述3D空間中的角度</li>
</ul>
<p>而：</p>
<ul>
<li>2D平面的旋轉實際上是描述對於Ｚ軸旋轉
<ul>
<li>rotate(45deg) = rotateZ(45deg)</li>
</ul>
</li>
<li>相對於X軸旋轉會讓元素接近或遠離使用者</li>
<li>相對於Y軸旋轉則會讓元素左右翻轉</li>
</ul>
<h2 id="轉換-transform-語法與觀念"><a class="header-anchor" href="#轉換-transform-語法與觀念"></a>轉換(transform)語法與觀念</h2>
<ul>
<li>transform可以設定的語法：</li>
</ul>
<table>
<thead>
<tr>
<th>none(Default)</th>
<th>translate()</th>
<th>scale()</th>
<th>rotate()</th>
<th>skew()</th>
<th>martrix()</th>
<th>perspective()</th>
</tr>
</thead>
<tbody>
<tr>
<td>-</td>
<td>translate3d()</td>
<td>scale3d()</td>
<td>rotate3d()</td>
<td>skewX()</td>
<td>martrix3d()</td>
<td>-</td>
</tr>
<tr>
<td>-</td>
<td>translateX()</td>
<td>scaleX()</td>
<td>rotateX()</td>
<td>skewY()</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>-</td>
<td>translateY()</td>
<td>scaleY()</td>
<td>rotateY()</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>-</td>
<td>translateZ()</td>
<td>scaleZ()</td>
<td>rotateZ()</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
<ul>
<li>其他設定：</li>
</ul>
<table>
<thead>
<tr>
<th>transform-origin</th>
<th>transform-style</th>
<th>perspective</th>
<th>perspective-origin</th>
<th>backface-visibility</th>
</tr>
</thead>
<tbody>
<tr>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>適用於：區塊元素、設定為inline-block的元素以及 <strong>部分行內元素</strong></p>
<ul>
<li>部分行內元素目前測試可以使用而且常見的有：
<ul>
<li>img</li>
<li>form表單的input、textarea<br>
其餘如 span、 em等這類的行內元素則不能使用。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>以bounding box尺寸為基準<br>
bounding box: 指的是邊框方框，也就是元素邊框的最外緣。<br>
而 svg 的bounding box 則會是 svg定義的 object bounding box。</p>
</li>
<li>
<p>元素在透過轉換後可能會變大或者變小，但在頁面上所佔據的空間一樣不會變。</p>
</li>
<li>
<p>transform-list<br>
可以同時在transform設定多個語法，<strong>且排序的順序不同，呈現的效果也完全不同</strong><br>
Ex:</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">transform:translateX(45deg) rotate(45deg);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>轉換的效果不會疊加，如果需要有多個效果時，需要重複設定。</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#ex01&#123;</span><br><span class="line">    transform: rotate(30deg) skewX(-25deg);</span><br><span class="line">&#125;</span><br><span class="line">//此時想要再加上一個效果: scaleY(2)，因為效果不會疊加，所以需要重複設定</span><br><span class="line">#ex01&#123;</span><br><span class="line">    transform: rotate(30deg) skewX(-25deg) scaleY(2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>但有一種情形為例外：動畫轉換。轉換的效果會疊加，有以下幾種狀況會遇到：</strong>
<ul>
<li>transition (轉場)</li>
<li>動畫(animation)</li>
<li>:hover 等偽類元素的效果雖然不是透過transition觸發，但也屬於轉換的類型</li>
</ul>
</li>
</ul>
</li>
<li>
<p>transform也可以用在偽元素上</p>
</li>
</ul>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>HTML/CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day19-transform初探- part3</title>
    <url>/2019/06/15/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day19-transform%E5%88%9D%E6%8E%A2-part3/</url>
    <content><![CDATA[<h3 id="transform-origin-可以改變元素原點的位置，預設值為元素的中心點-transform-origin-50-50-。"><a class="header-anchor" href="#transform-origin-可以改變元素原點的位置，預設值為元素的中心點-transform-origin-50-50-。"></a>transform origin : 可以改變元素原點的位置，預設值為元素的中心點(transform-origin(50%,50%))。</h3>
<table>
<thead>
<tr>
<th>語法</th>
<th>允許值</th>
</tr>
</thead>
<tbody>
<tr>
<td>transform origin</td>
<td>[left、right、center、top、bottom、percentage(%)、length] 、 [left、right、center、top、bottom、percentage(%)、length] 、 [length]</td>
</tr>
</tbody>
</table>
<ul>
<li>備註： 最後一個length為Z軸設定長度的參數</li>
</ul>
<span id="more"></span>
<h3 id="transform-style-設定後可以看到元素如同處在3D的空間的樣貌。"><a class="header-anchor" href="#transform-style-設定後可以看到元素如同處在3D的空間的樣貌。"></a>transform-style : 設定後可以看到元素如同處在3D的空間的樣貌。</h3>
<table>
<thead>
<tr>
<th>語法</th>
<th>允許值</th>
</tr>
</thead>
<tbody>
<tr>
<td>transform-style</td>
<td>[flat]、[preserve-3d]</td>
</tr>
</tbody>
</table>
<p>下列屬性為設定transform:preserve-3d時屬性的預設值，所以當3d轉換突然變為2d平面時，很可能是下列任一屬性有被修改：</p>
<ul>
<li>over-flow:visible</li>
<li>filter:none</li>
<li>clip:auto</li>
<li>clip-path:none</li>
<li>mask-image:none</li>
<li>mask-border-source:none</li>
<li>mix-blend-mode:normal</li>
</ul>
<h3 id="perspective-與perspective-函式不同之處在於："><a class="header-anchor" href="#perspective-與perspective-函式不同之處在於："></a>perspective: 與perspective()函式不同之處在於：</h3>
<table>
<thead>
<tr>
<th>語法</th>
<th>差別</th>
</tr>
</thead>
<tbody>
<tr>
<td>perspective</td>
<td><strong>會讓元素共享同一個3d空間，且效果會套用到所有元素上</strong></td>
</tr>
<tr>
<td>perspective()</td>
<td><strong>會讓元素有各自的3d空間，且效果只會套用在指定的元素上</strong></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>語法</th>
<th>允許值</th>
</tr>
</thead>
<tbody>
<tr>
<td>perspective</td>
<td>[none]、[length]</td>
</tr>
</tbody>
</table>
<h3 id="perspective-origin-在允許元素呈現的3D效果的前提下，可以針對透視的原點-也稱為消失點-，改變其位置-預設perspective-origin-50-50-。"><a class="header-anchor" href="#perspective-origin-在允許元素呈現的3D效果的前提下，可以針對透視的原點-也稱為消失點-，改變其位置-預設perspective-origin-50-50-。"></a>perspective-origin:在允許元素呈現的3D效果的前提下，可以針對透視的原點(也稱為消失點)，改變其位置(預設perspective-origin: 50% 50%)。</h3>
<table>
<thead>
<tr>
<th>語法</th>
<th>允許值</th>
</tr>
</thead>
<tbody>
<tr>
<td>perspective origin</td>
<td>[left、right、center、top、bottom、percentage(%)、length] 、 [left、right、center、top、bottom、percentage(%)、length] 、 [length]</td>
</tr>
</tbody>
</table>
<ul>
<li>備註： 最後一個length為Z軸設定長度的參數</li>
</ul>
<p>比較： transform-origin 、 perspective-origin差別</p>
<table>
<thead>
<tr>
<th>語法</th>
<th>差別</th>
</tr>
</thead>
<tbody>
<tr>
<td>transform-origin</td>
<td>元素中心點的變換</td>
</tr>
<tr>
<td>perspective origin</td>
<td>視線收斂的點</td>
</tr>
</tbody>
</table>
<h3 id="backface-visibility：設定後可以渲染元素背面的內容給使用者看到，"><a class="header-anchor" href="#backface-visibility：設定後可以渲染元素背面的內容給使用者看到，"></a>backface-visibility：設定後可以渲染元素背面的內容給使用者看到，</h3>
<table>
<thead>
<tr>
<th>語法</th>
<th>差別</th>
</tr>
</thead>
<tbody>
<tr>
<td>backface-visibility</td>
<td>[visible]、[hidden]</td>
</tr>
</tbody>
</table>
<p>總算是將這一個章節記錄到一個段落了，於是決定給自己一個練習：手刻一個3D正方體，練習連結如下：</p>
<p><a href="https://codepen.io/kids5346/pen/EBVEMO">使用tranform語法寫出正方體</a></p>
  <div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>HTML/CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day20-float和清除浮動的方法</title>
    <url>/2019/06/16/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day20-float%E5%92%8C%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8B%95%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="為什麽會出現浮動和什麽時候需要清除浮動？清除浮動的方式"><a class="header-anchor" href="#為什麽會出現浮動和什麽時候需要清除浮動？清除浮動的方式"></a>為什麽會出現浮動和什麽時候需要清除浮動？清除浮動的方式?</h1>
<h2 id="起源："><a class="header-anchor" href="#起源："></a>起源：</h2>
<p>原本是因應<strong>文繞圖</strong>的需求被創造出來，但在還沒有flex/grid時，被發現用於排版上相較table的方式好，所以被拿來運用在排版上，但必須要知道這是誤用，每個語法都有自己被開發出來的意義。</p>
<span id="more"></span>
<p><img src="https://i.imgur.com/fsP9aJf.png" alt=""></p>
<h2 id="特性："><a class="header-anchor" href="#特性："></a>特性：</h2>
<p>當元素設定為float時，元素會脫離normal flow而浮動起來，此時的容器會因此而高度變成0</p>
<p>示意圖如下：</p>
<p><img src="https://i.imgur.com/BtHuOOm.png" alt=""></p>
<p>上述狀況會造成的影響：</p>
<ul>
<li>容器沒有高度</li>
<li>在排版時導致跑版，元素無法放置在需求位置。</li>
</ul>
<h2 id="清除浮動所造成的影響"><a class="header-anchor" href="#清除浮動所造成的影響"></a>清除浮動所造成的影響</h2>
<ul>
<li>給容器一個高度：但固定高度不是一個好作法，當文字等內容過多時，會造成內容溢出。</li>
<li>給一個div，並對於這個div設定clear語法，藉此達到清除浮動的效果。
<ul>
<li>缺點：必須額外設定div清除浮動，有些多餘。</li>
<li>tips: 需設定在浮動元素之後</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.clearfix&#123;</span><br><span class="line">    clear:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>借助:after 偽元素：在容器上設定class=“clearfix”，並透過偽元素:after將清除浮動的語法設定在此，藉此達到清除浮動的效果。
<ul>
<li>tips:
<ul>
<li>偽元素是行內元素，所以需要設定display:block，讓其變為區塊元素。</li>
<li>一定要有content:''語法，偽元素才會有作用</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap clearfix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.clearfix:after&#123;</span><br><span class="line">    content:&#x27;&#x27;;</span><br><span class="line">    display:block;</span><br><span class="line">    clear:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>overflow:hidden : 原理：透過overflow來閉合浮動，會建立一個新的BFC，且計算高度時會考慮該BFC包含的所有元素，所以會連同被設定為float元素的高度也一併得到，進而達到清除float的效果
<ul>
<li>閉合浮動和清除浮動的概念不一樣。</li>
</ul>
</li>
</ul>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>]]></content>
      <categories>
        <category>把玩Css</category>
        <category>前端面試題</category>
      </categories>
      <tags>
        <tag>HTML/CSS</tag>
        <tag>前端面試題</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day23-CSS3 的 Flexbox 以及適用場景？</title>
    <url>/2019/06/19/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day23-CSS3-%E7%9A%84-Flexbox-%E4%BB%A5%E5%8F%8A%E9%81%A9%E7%94%A8%E5%A0%B4%E6%99%AF%EF%BC%9F/</url>
    <content><![CDATA[<p>藉由這題面試的機會，剛好將目前學習到的flex知識做個整理一同放上來。</p>
<h1 id="請解釋一下-CSS3-的-Flexbox-以及適用場景？"><a class="header-anchor" href="#請解釋一下-CSS3-的-Flexbox-以及適用場景？"></a>請解釋一下 CSS3 的 Flexbox 以及適用場景？</h1>
<h2 id="What-is-flex-什麼是flex"><a class="header-anchor" href="#What-is-flex-什麼是flex"></a>What is flex? 什麼是flex?</h2>
<ul>
<li>是一種全新的佈局方式，建立了有別於IFC及BFC的佈局方式：FFC(Flex Formatting Context)，在FFC的佈局中當<strong>容器</strong>設定為flex時，其<strong>下一層的元素</strong>會變為彈性項目(flex item)。</li>
<li>彈性項目(flex item)會依照設定的語法平均獲得容器的空間剩餘量(flex-grow)，或者縮小自己以適應容器的大小(flex-shrink)。</li>
<li>flex讓元素在二維空間的排序上(<strong>如水平排列或者困擾許久的垂直排列</strong>)變得簡單許多。</li>
</ul>
<span id="more"></span>
<h2 id="What-is-flex-properties-關於flex的特性"><a class="header-anchor" href="#What-is-flex-properties-關於flex的特性"></a>What is flex properties? 關於flex的特性?</h2>
<ul>
<li>FFC 中有些原本用於BFC中的屬性會是無效的:
<ul>
<li>clear / float</li>
<li>vertical align</li>
<li>:first-line / :first-letter</li>
<li>column</li>
<li>設定為flex的容器不會有margin-collapse</li>
</ul>
</li>
</ul>
<h2 id="How-to-use-flex-如何使用flex語法？"><a class="header-anchor" href="#How-to-use-flex-如何使用flex語法？"></a>How to use flex ? 如何使用flex語法？</h2>
<ul>
<li>
<p>主軸(main axis)  &amp; 次軸 (cross axis):<br>
<strong>前提</strong>：那就是預設書寫模式是由左至右(LTR)，由上至下的方式(也就是設定 writing-mode:horizontal-tb)</p>
<ul>
<li><img src="https://i.imgur.com/jVmW4TZ.png" alt=""></li>
</ul>
</li>
<li>
<p>在容器設定的語法：</p>
<ul>
<li>
<p>display: flex / inline-flex</p>
</li>
<li>
<p>flex-wrap</p>
<ul>
<li>wrap / wrap-reverse / nowrap / initial / inherit</li>
</ul>
</li>
<li>
<p>flex-direction</p>
<ul>
<li>row / row-reverse / column / column-reverse / initial / inherit</li>
</ul>
</li>
<li>
<p>justify-content</p>
<ul>
<li>flex-start / flex-end / center / space-around / space-between / initial / inherit</li>
</ul>
</li>
<li>
<p>align-items</p>
<ul>
<li>flex-start / flex-end / center / space-around / space-between / <strong>stretch</strong> / <strong>baseline</strong> / initial / inherit</li>
</ul>
</li>
<li>
<p>align-content</p>
<ul>
<li>flex-start / flex-end / center / space-around / space-between /  <strong>stretch</strong> / initial / inherit</li>
</ul>
<p>p.s  粗體字為特定語法才有的設定</p>
</li>
</ul>
</li>
<li>
<p>在元素設定的語法：</p>
<ul>
<li>
<p>align-self</p>
<ul>
<li>flex-start / flex-end / center / space-around / space-between / <strong>stretch</strong> / <strong>baseline</strong> / <strong>auto(Default)</strong> / initial / inherit</li>
</ul>
</li>
<li>
<p>flex</p>
<ul>
<li>flex-basis
<ul>
<li>決定設定值為寬/高的依據： <strong>主軸是誰</strong></li>
<li>主軸row: 寬</li>
<li>主軸column: 高</li>
<li>優先性： flex-basis &gt; width;</li>
<li>flex-basis:auto 則大小為元素本身大小</li>
<li>
<div style="color:red;">如果有設定 min/max-width的話，則還是會依照min/max-width設定值去跑。</div>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>flex-shrink (寫個例子)</p>
<ul>
<li><strong>當子層寬度總和大於父層時，且不允許折行的情況下</strong>，會依照比例的縮小，符合父層空間</li>
<li>計算方式
<ul>
<li>當寬度值為固定時，並且有給shrink的值時：
<ul>
<li>先得到總共超出多少空間</li>
<li>超出空間 * 各區塊shrink後的權重總和</li>
<li>( 超出空間 * 各區塊shrink ／  超出空間 * 各區塊shrink後的權重總和 ) * 超出寬度</li>
<li>用原本item的寬度 - 每個區塊應被扣除的寬度＝等於實際寬度</li>
<li>Ex :</li>
</ul>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">    width:500px;</span><br><span class="line">    background:#ccc;</span><br><span class="line">    display:flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box&#123;</span><br><span class="line">    width:300px;</span><br><span class="line">    height:50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box1&#123;</span><br><span class="line">    background:#ada;</span><br><span class="line">    flex-shrink:2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box2&#123;</span><br><span class="line">    background:#aad;</span><br><span class="line">    flex-shrink:1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">    套入上述計算方式：</span><br><span class="line">    1. 先得到總共超出多少空間</span><br><span class="line">        300*2 - 500 = 100(px)</span><br><span class="line">    2. 超出空間 * 各區塊shrink後的權重總和 = 100*2 + 100*1 = 300</span><br><span class="line">    3. 得到box1 = 300 - 200 / 300 * 100 = 233.33(px)</span><br><span class="line">    4. 得到box2  = 300 - 100 / 300 * 100 = 266.66(px)</span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>flex-grow</p>
<ul>
<li>依照比例獲得相對的空間大小(<strong>當子層空間總和不超過父層時</strong>)</li>
<li>row:分配寬</li>
<li>column:分配高</li>
<li>計算方式：
<ul>
<li>實際寬度 + 多出空間 * 各元素flex-grow值/flex-grow值總和</li>
<li><strong>若是flex-grow值總和 &lt; 1，則不會將多出的空間完全分配給各元素</strong></li>
<li>
<div style="color:red;"> 會受到max-width影響，如果超過max-width的寬度，則以max-width優先</div>
</li>
<li>Ex :  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">      .container&#123;</span><br><span class="line">          width:500px;</span><br><span class="line">          background:#ccc;</span><br><span class="line">          display:flex;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      .box&#123;</span><br><span class="line">          width:200px;</span><br><span class="line">          height:50px;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      .box1&#123;</span><br><span class="line">          background:#ada;</span><br><span class="line">          flex-grow:2;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      .box2&#123;</span><br><span class="line">          background:#aad;</span><br><span class="line">          flex-grow:1;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      /*</span><br><span class="line">          套入上述計算方式：</span><br><span class="line">box1 = 200 + 100 * 2 / 3 = 266.66(px)</span><br><span class="line">box2 = 200 + 100 * 1 / 3 = 233.33(px)</span><br><span class="line">      </span><br><span class="line">      */</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>auto (same as 0 1 auto)</p>
</li>
<li>
<p>initial (Same as 0 1 auto)</p>
</li>
<li>
<p>none(Same as 0 0 auto)</p>
</li>
<li>
<p>inherit</p>
</li>
<li>
<p>order</p>
</li>
<li>
<p>數值越小，排序越前面</p>
</li>
<li>
<p>0(default)</p>
</li>
</ul>
</li>
</ul>
<h2 id="The-relationship-between-flex-and-writing-mode-flex和書寫模式的之間的關係？"><a class="header-anchor" href="#The-relationship-between-flex-and-writing-mode-flex和書寫模式的之間的關係？"></a>The relationship between flex and writing-mode? flex和書寫模式的之間的關係？</h2>
<h3 id="總結：書寫方向的設定會影響flex-direction的方向"><a class="header-anchor" href="#總結：書寫方向的設定會影響flex-direction的方向"></a>總結：書寫方向的設定會影響flex-direction的方向</h3>
<h3 id="用來設定書寫方向的語法有-writing-mode-direction-text-orientation-html-dir-attribute"><a class="header-anchor" href="#用來設定書寫方向的語法有-writing-mode-direction-text-orientation-html-dir-attribute"></a>用來設定書寫方向的語法有 writing-mode / direction / text-orientation / html dir attribute</h3>
<ul>
<li>writing-mode
<ul>
<li><img src="https://i.imgur.com/AObp1MH.png" alt=""></li>
</ul>
</li>
<li>direction
<ul>
<li><img src="https://i.imgur.com/2JuM9yQ.png" alt=""></li>
<li><img src="https://i.imgur.com/HgJepCH.png" alt=""></li>
</ul>
</li>
<li>text-orientation</li>
<li>html dir</li>
</ul>
<h4 id="比較1-flex-的主-次軸方向"><a class="header-anchor" href="#比較1-flex-的主-次軸方向"></a>比較1  : flex 的主/次軸方向</h4>
<p><img src="https://i.imgur.com/jVmW4TZ.png" alt=""></p>
<p>可以透過 row / row-reverse / column / column-reverse更改flex-item的排序方向</p>
<p>但這張圖有一個前提：那就是預設書寫模式是由左至右(LTR)，由上至下的方式(也就是設定 writing-mode:horizontal-tb)</p>
<h4 id="比較2-英文與日文的書寫"><a class="header-anchor" href="#比較2-英文與日文的書寫"></a>比較2  : 英文與日文的書寫</h4>
<p><img src="https://i.imgur.com/C3FVs8G.png" alt=""></p>
<p>從這張圖可以看出即使同樣設定 flex-flow : row wrap 的狀況下，各國文字書寫方向習慣的不同，透過設定writing-mode的語法，就會導致 flex-item的排序方向改變</p>
<h4 id="比較3-margin-collpase在-writing-mode設定變更時的差別"><a class="header-anchor" href="#比較3-margin-collpase在-writing-mode設定變更時的差別"></a>比較3  : margin-collpase在 writing-mode設定變更時的差別</h4>
<p>書寫方向為水平時，依照區塊元素正常排序的方式，會有margin collpase的情況，會導致margin top/bottom 有重疊的情形。</p>
<p>但是當書寫方向改為垂直時，會使 margin collpase的情況變成是left / right的部分會重疊</p>
<p><img src="https://i.imgur.com/Eg56b7z.png" alt=""></p>
<p>所以書寫方向的語法會顛覆原本網頁排序的方向</p>
<blockquote>
<p><a href="https://www.w3.org/TR/css-flexbox-1/">w3.org-writing mode</a></p>
</blockquote>
]]></content>
      <categories>
        <category>把玩Css</category>
        <category>前端面試題</category>
      </categories>
      <tags>
        <tag>HTML/CSS</tag>
        <tag>前端面試題</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day21-transition-初探-part1</title>
    <url>/2019/06/17/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day21-transition-%E5%88%9D%E6%8E%A2-part1/</url>
    <content><![CDATA[<h1 id="css-大全-transition-轉場-初探-part1"><a class="header-anchor" href="#css-大全-transition-轉場-初探-part1"></a>css 大全 -transition(轉場) 初探 part1</h1>
<h2 id="用途-讓元素狀態改變時使屬性值的數值逐步的變化"><a class="header-anchor" href="#用途-讓元素狀態改變時使屬性值的數值逐步的變化"></a>用途 : <strong>讓元素狀態改變時使屬性值的數值逐步的變化</strong></h2>
<p>能讓css屬性在數值變化時有&quot;活起來&quot;的效果(使用程式改變ID、class時亦是。)通常用在和使用者的互動上。</p>
<span id="more"></span>
<h2 id="轉場屬性："><a class="header-anchor" href="#轉場屬性："></a>轉場屬性：</h2>
<h3 id="transition-property-可以指定特定的css屬性名稱才能有轉場的效果，亦可以同時指定css屬性名稱使用"><a class="header-anchor" href="#transition-property-可以指定特定的css屬性名稱才能有轉場的效果，亦可以同時指定css屬性名稱使用"></a>transition-property:可以指定特定的css屬性名稱才能有轉場的效果，亦可以同時指定css屬性名稱使用</h3>
<table>
<thead>
<tr>
<th>語法</th>
<th>數值</th>
<th>適用於</th>
</tr>
</thead>
<tbody>
<tr>
<td>transition-property</td>
<td>none、all、property-name</td>
<td>所有元素以及<br>:before、:after偽元素</td>
</tr>
</tbody>
</table>
<p>問題:如何確定有使用到轉場效果的css屬性名稱?</p>
<p>答案:透過js監聽事件的方法，可以獲得相關的資訊，程式碼如下：</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//使用監聽事件查看使用transition時有變動的css屬性(搭配console查看)</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#ccc</span>;</span><br><span class="line">  //設定 <span class="attribute">width</span>,<span class="attribute">height</span>,<span class="attribute">background</span>,<span class="attribute">padding</span>皆有變化，且時間為<span class="number">0.5s</span></span><br><span class="line">  <span class="attribute">transition-property</span>:width,height,background,padding;</span><br><span class="line">  <span class="attribute">transition-duration</span>:<span class="number">0.5s</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#ada</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// transitionend event:用於監聽有使用到transition時。</span></span><br><span class="line"><span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>);</span><br><span class="line">el.<span class="title function_">addEventListener</span>(<span class="string">&quot;transitionend&quot;</span>,test,<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">propertyName</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>附上測試連結： <a href="https://codepen.io/kids5346/pen/VJerGR">測試範例ㄧ</a></p>
<h3 id="transition-duration：轉場時所需要花費的時間，設定值是由逗號隔開的數值串列，代表了時間長度。"><a class="header-anchor" href="#transition-duration：轉場時所需要花費的時間，設定值是由逗號隔開的數值串列，代表了時間長度。"></a>transition-duration：轉場時所需要花費的時間，設定值是由逗號隔開的數值串列，代表了時間長度。</h3>
<table>
<thead>
<tr>
<th>語法</th>
<th>數值</th>
<th>適用於</th>
</tr>
</thead>
<tbody>
<tr>
<td>transition-duration</td>
<td>s(秒)、ms(毫秒)</td>
<td>所有元素以及<br>:before、:after偽元素</td>
</tr>
</tbody>
</table>
<p><strong>當transition-duration沒有被設定(或者數值沒有大於0)且transition-delay亦沒有設定正值，則transition-property會被視為沒有宣告</strong></p>
<p>備註：關於多個屬性個數以及多個週期個數設定值:</p>
<ol>
<li>屬性個數與宣告的週期個數不符：瀏覽器會有額外的規則處理不符合的情況</li>
<li>屬性個數 &gt; 週期個數: 重複宣告的週期</li>
<li>週期個數 &gt; 屬性個數: 忽略額外的週期個數</li>
</ol>
<p>附上第2點的測試程式碼：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//測試二：transition-duration:屬性個數 &gt; 週期個數時</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*屬性個數被設定的秒數依序為 :width(.2s),height(1s),background(.2s),padding(1s)*/</span></span><br><span class="line">  <span class="attribute">transition-property</span>:width,height,background,padding;</span><br><span class="line">  <span class="attribute">transition-duration</span>:.<span class="number">2s</span>,<span class="number">1s</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ada</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>附上測試連結： <a href="https://codepen.io/kids5346/pen/VJerGR">測試範例二</a></p>
]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>HTML/CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day25- 透過label + checkbox實現純css手刻RWD選單</title>
    <url>/2019/06/21/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day25-%E9%80%8F%E9%81%8Elabel-checkbox%E5%AF%A6%E7%8F%BE%E7%B4%94css%E6%89%8B%E5%88%BBRWD%E9%81%B8%E5%96%AE/</url>
    <content><![CDATA[<h1 id="透過label-checkbox實現RWD選單"><a class="header-anchor" href="#透過label-checkbox實現RWD選單"></a>透過label + checkbox實現RWD選單</h1>
<h2 id="關於label-標籤"><a class="header-anchor" href="#關於label-標籤"></a>關於label (標籤)</h2>
<ul>
<li>可以提升用戶體驗，透過label中的for屬性設定以及和其對應的id名稱，當用戶點擊label時，可以切換到對應的元素</li>
<li>定義給 button, input, meter, output, progress, select, or textarea元素做使用</li>
<li>Ex:</li>
</ul>
<span id="more"></span>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//for 屬性設定與id需要相同</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;text&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="關於-checkbox-複選框"><a class="header-anchor" href="#關於-checkbox-複選框"></a>關於 checkbox (複選框)</h2>
<ul>
<li>用於當選項需要可以重複勾選時使用</li>
<li>透過checked屬性可以設定複選框預設值，checked=&quot;checked&quot;意即預設為已經勾選複選框</li>
<li>Ex:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>請勾選：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="小測試：關於label-checkbox的簡單運用"><a class="header-anchor" href="#小測試：關於label-checkbox的簡單運用"></a>小測試：關於label + checkbox的簡單運用</h2>
<ul>
<li>Ex:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//透過點擊勾選框，點擊到label中的textarea</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>請勾選checkbox<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;text&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">label&#123;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br><span class="line">input[type=&quot;checkbox&quot;]:checked ~ label textarea&#123;</span><br><span class="line">    background:#dda;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="測試範例：-撰寫純css-RWD選單"><a class="header-anchor" href="#測試範例：-撰寫純css-RWD選單"></a>測試範例： 撰寫純css RWD選單</h2>
<p><a href="https://codepen.io/kids5346/pen/pXRMVv">測試範例</a></p>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>HTML/CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day18-transform初探- part2</title>
    <url>/2019/06/14/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day18-transform%E5%88%9D%E6%8E%A2-part2/</url>
    <content><![CDATA[<h1 id="css-大全-transform-初探-part2"><a class="header-anchor" href="#css-大全-transform-初探-part2"></a>css 大全 - transform 初探 -part2</h1>
<h2 id="函式用途與設定"><a class="header-anchor" href="#函式用途與設定"></a>函式用途與設定</h2>
<p>附上練習時的連結： <a href="https://codepen.io/kids5346/pen/NZqzQx">transform 語法練習</a>，詳細tranform語法介紹如下：</p>
<span id="more"></span>
<h3 id="translate-使元素隨著座標軸移動，而translateX-、translateY-也被稱為2D平移函式，原點為左上角。"><a class="header-anchor" href="#translate-使元素隨著座標軸移動，而translateX-、translateY-也被稱為2D平移函式，原點為左上角。"></a>translate():使<strong>元素隨著座標軸移動</strong>，而translateX()、translateY()也被稱為2D平移函式，原點為左上角。</h3>
<table>
<thead>
<tr>
<th>函式</th>
<th>允許值</th>
</tr>
</thead>
<tbody>
<tr>
<td>translateX().translateY()</td>
<td>[length、percentage]</td>
</tr>
<tr>
<td>translateZ()</td>
<td>[length]</td>
</tr>
<tr>
<td>translate3d()</td>
<td>[length、percentage] [length、percentage] [length]</td>
</tr>
</tbody>
</table>
<ul>
<li>此處percentage的<strong>實際長度會依照元素本身的尺寸</strong>為基準計算</li>
</ul>
<h3 id="scale-能讓元素依據指定的數值變大或變小，負值可以使元素產生顛倒的效果"><a class="header-anchor" href="#scale-能讓元素依據指定的數值變大或變小，負值可以使元素產生顛倒的效果"></a>scale():<strong>能讓元素依據指定的數值變大或變小，負值可以使元素產生顛倒的效果</strong></h3>
<table>
<thead>
<tr>
<th>函式</th>
<th>允許值</th>
</tr>
</thead>
<tbody>
<tr>
<td>scaleX().scaleY().scaleZ()</td>
<td>[number]</td>
</tr>
<tr>
<td>scale3d()</td>
<td>[number、number、number]</td>
</tr>
</tbody>
</table>
<h3 id="rotate-能讓元素朝某個軸或3D空間的任何向量旋轉"><a class="header-anchor" href="#rotate-能讓元素朝某個軸或3D空間的任何向量旋轉"></a>rotate():<strong>能讓元素朝某個軸或3D空間的任何向量旋轉</strong></h3>
<table>
<thead>
<tr>
<th>函式</th>
<th>允許值</th>
</tr>
</thead>
<tbody>
<tr>
<td>rotateX().rotateY().rotateZ()</td>
<td>[angle]</td>
</tr>
<tr>
<td>rotate3d()</td>
<td>[number、number、number、angle]</td>
</tr>
</tbody>
</table>
<ul>
<li>rotate3d():前三個數值為空間向量的x.y.z的值，最後一個是角度的旋轉量
<ul>
<li>Ex: rotate3d(0,0,1,45deg) = rotate(45deg) = rotateZ(45deg)</li>
<li><strong>Ex:rotate(1,1,0,45deg) 不等於 rotateX(45deg) rotateY(45deg) rotateZ(0deg)</strong></li>
</ul>
</li>
</ul>
<h3 id="skew-能讓元素沿著x或者y軸傾斜，但沒有Z軸的傾斜"><a class="header-anchor" href="#skew-能讓元素沿著x或者y軸傾斜，但沒有Z軸的傾斜"></a>skew():<strong>能讓元素沿著x或者y軸傾斜，但沒有Z軸的傾斜</strong></h3>
<table>
<thead>
<tr>
<th>函式</th>
<th>允許值</th>
</tr>
</thead>
<tbody>
<tr>
<td>skewX().skewY()</td>
<td>[angle]</td>
</tr>
</tbody>
</table>
<ul>
<li>skew(a,b)的行為是透過矩陣運算而達成，所以也不能等於是skew(a) + skew(b)</li>
</ul>
<h3 id="perspective-能讓元素在3D空間中，藉由改變透視，看到由前到後深度的外觀。"><a class="header-anchor" href="#perspective-能讓元素在3D空間中，藉由改變透視，看到由前到後深度的外觀。"></a>perspective():<strong>能讓元素在3D空間中，藉由改變透視，看到由前到後深度的外觀。</strong></h3>
<table>
<thead>
<tr>
<th>函式</th>
<th>允許值</th>
</tr>
</thead>
<tbody>
<tr>
<td>perspective()</td>
<td>[length(正且非零的值)]</td>
</tr>
</tbody>
</table>
  <div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>HTML/CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day26-寫給自己的關於切版時需要注意的細節提醒</title>
    <url>/2019/06/22/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day26-%E5%AF%AB%E7%B5%A6%E8%87%AA%E5%B7%B1%E7%9A%84%E9%97%9C%E6%96%BC%E5%88%87%E7%89%88%E6%99%82%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%B4%B0%E7%AF%80%E6%8F%90%E9%86%92/</url>
    <content><![CDATA[<h1 id="切版的自我檢查清單"><a class="header-anchor" href="#切版的自我檢查清單"></a>切版的自我檢查清單</h1>
<p>這陣子在<a href="https://goodideas-studio.com">好想工作室</a>的環境中學習，讓自己在切版的觀念上又有更扎實的觀念，也在這段過程中整理了一些關於應該要注意的細節，當作一份檢查清單使用。 而這份清單會伴隨自己的學習而不斷更新。</p>
<span id="more"></span>
<ul>
<li>記住<strong>容器和元素</strong>之間的關係：</li>
<li><strong>元素和元素</strong>之間的關係
<ul>
<li>決定使用的是padding or margin</li>
</ul>
</li>
<li>任何引入到html的檔案順序
<ul>
<li>ex: css引入順序會決定css的權重問題</li>
<li>ex2:js的引入順序會決定js的程式執行問題</li>
</ul>
</li>
<li>對於經過再次修改的區塊
<ul>
<li>必須要確認和設計稿是否能有高程度的符合</li>
</ul>
</li>
<li>撰寫時思考所使用的技巧維護性是否夠彈性</li>
<li>如果沒有設計稿(手機/電腦)，也要先思考過版面的配置在撰寫，避免回過頭需要花費太多時間重構架構
<ul>
<li>寧願在思考上多花點時間，也不要在重構上花費太多時間</li>
<li>需要做確認的部分就花時間做確認</li>
</ul>
</li>
<li>RWD 響應式網頁
<ul>
<li>網頁重點在於網頁內容的資訊在於較小的裝置上能否<strong>有效的呈現</strong>，且<strong>使用者體驗是流暢、舒服的</strong></li>
<li>版面配置切換時，盡量保持斷點在切換時版面配置是有一致性，避免某個斷點有過於突兀的版面切換，視覺上比較流暢</li>
<li>RWD不能只檢查直立時的頁面是否有問題，也要檢查水平的時候是否也是正常</li>
<li>因為可讀性，所以將@media設定的程式碼放在對應的原程式碼底下，在修改及維護上會更加直觀、快速</li>
</ul>
</li>
<li>字與字、行與行、元素與元素之間的距離，站在使用者的角度考量</li>
<li>替程式碼命名
<ul>
<li>詞性很重要，可以幫助命名能力的提升</li>
<li>命名就是一個短註解，設定上要能讓開發者快速了解用意</li>
</ul>
</li>
<li>相較起來最遵從規範開發的瀏覽器
<ul>
<li>firebox</li>
</ul>
</li>
<li>以模組化的概念切版，讓每個區塊都可以獨自正常運作。(在程式上這個觀念更為重要)</li>
<li>若是遇到不懂的部分，找尋相關規範的相關定義了解原理並記錄起來，以免日後為了重複問題又耗費過多時間。</li>
</ul>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>
]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>HTML/CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day27-style 標籤寫在 body 後與 body 前有什麽區別</title>
    <url>/2019/06/23/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day27-style-%E6%A8%99%E7%B1%A4%E5%AF%AB%E5%9C%A8-body-%E5%BE%8C%E8%88%87-body-%E5%89%8D%E6%9C%89%E4%BB%80%E9%BA%BD%E5%8D%80%E5%88%A5/</url>
    <content><![CDATA[<h1 id="style-標籤寫在-body-後與-body-前有什麽區別？"><a class="header-anchor" href="#style-標籤寫在-body-後與-body-前有什麽區別？"></a>style 標籤寫在 body 後與 body 前有什麽區別？</h1>
<h2 id="將style標籤-span-style-color-f00-寫於body之前-span-："><a class="header-anchor" href="#將style標籤-span-style-color-f00-寫於body之前-span-："></a>將style標籤<span style="color:#f00;">寫於body之前</span>：</h2>
<p>也就是寫在 head 標籤中，瀏覽器會依照其渲染流程。</p>
<span id="more"></span>
<h2 id="將style標籤-span-style-color-f00-寫於body中-span-："><a class="header-anchor" href="#將style標籤-span-style-color-f00-寫於body中-span-："></a>將style標籤<span style="color:#f00;">寫於body中</span>：</h2>
<p>會導致<strong>當樣式的加載晚於HTML加載時，造成頁面停止渲染直到樣式被加載後重新渲染頁面</strong>，而這樣子的狀況就會導致FOUC(flash of unstyled content)，造成頁面會有閃爍狀況。</p>
<h2 id="將style標籤-span-style-color-f00-寫於body之後-span-："><a class="header-anchor" href="#將style標籤-span-style-color-f00-寫於body之後-span-："></a>將style標籤<span style="color:#f00;">寫於body之後</span>：</h2>
<p>導致<strong>瀏覽器會等到css也加載完之後在開始渲染</strong>，而這樣子的狀況就會導致頁面會有一小段時間呈現白屏情形</p>
<h2 id="結論："><a class="header-anchor" href="#結論："></a>結論：</h2>
<p>將css樣式放入 head 標籤中使瀏覽器可以在此階段就完成DOM Tree和CSS rule Tree的生成，並透過 render tree將其繪製後渲染到螢幕上是最好的方法。</p>
<blockquote>
<p><a href="http://xbhong.top/2018/04/14/FOUC/">FOUC(無樣式內容閃爍)</a></p>
</blockquote>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>]]></content>
      <categories>
        <category>把玩Css</category>
        <category>前端面試題</category>
      </categories>
      <tags>
        <tag>HTML/CSS</tag>
        <tag>前端面試題</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day24-css counter</title>
    <url>/2019/06/20/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day24-css-counter/</url>
    <content><![CDATA[<h1 id="counter"><a class="header-anchor" href="#counter"></a>counter</h1>
<h2 id="What-is-counter"><a class="header-anchor" href="#What-is-counter"></a>What is counter ?</h2>
<p><img src="https://i.imgur.com/CuHNMP8.png" alt=""></p>
<p>counters是由css所維護的&quot;變量&quot;，而且可以透過css規則增量並追蹤被使用的次數。counters也允許我們調整內容的外觀。</p>
<span id="more"></span>
<h2 id="How-to-use-counter"><a class="header-anchor" href="#How-to-use-counter"></a>How to use counter?</h2>
<ul>
<li>counter-reset : 啟動或者重置一個計數器
<ul>
<li>Ex :</li>
</ul>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">    counter-reset:num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>counter-increment ： 設定該計數器所要的增量，<strong>設定在子層的偽元素裡</strong>
<ul>
<li>Ex :</li>
</ul>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> /* value 可以設定每次要增量的數值，這裡的num和容器中counter-reset的名稱相同 */</span><br><span class="line"></span><br><span class="line">h2:after&#123;</span><br><span class="line">    counter-increment : num value;</span><br><span class="line">    content: &quot;num &quot; counter(num) &quot;: &quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>counter() : 透過此函式將變量帶入到content</li>
<li>content : 寫入counter產生的變量以及所需要的文字內容
<ul>
<li>Ex :  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> /* value 可以設定每次要增量的數值，這裡的num和容器counter-reset的名稱相同 */</span><br><span class="line"></span><br><span class="line">h2&#123;</span><br><span class="line">    counter-increment : num value;</span><br><span class="line">    content: &quot;num &quot; counter(num) &quot;: &quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>引用： <a href="https://www.w3schools.com/css/css_counters.asp">w3school</a></p>
</blockquote>
<h2 id="Demo"><a class="header-anchor" href="#Demo"></a>Demo</h2>
<p>透過counter自訂清單編號的樣式</p>
<p><a href="https://codepen.io/kids5346/pen/oVmaxa">Demo</a></p>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>HTML/CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day29-純css手刻Tab頁籤</title>
    <url>/2019/06/25/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day29-%E7%B4%94css%E6%89%8B%E5%88%BBTab%E9%A0%81%E7%B1%A4/</url>
    <content><![CDATA[<h1 id="純css手刻Tab頁籤"><a class="header-anchor" href="#純css手刻Tab頁籤"></a>純css手刻Tab頁籤</h1>
<p>今天有個版面需要做出簡單的Tab頁籤切換，而爬資料的時候發現可以透過純css手刻出來，所以就運用了這個技巧，也順道將學習的重點摘錄上來。</p>
<span id="more"></span>
<h2 id="重點觀念："><a class="header-anchor" href="#重點觀念："></a>重點觀念：</h2>
<p>CSS selctor target : 透過 a 標籤的錨點與元素的id做對應，當使用 :target selector時，可以針對元素作樣式的改變。</p>
<p>Ex: css :target 的運用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>css target selector<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#test&quot;</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#test2&quot;</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*當點擊到 id=&quot;test&quot; 的元素時，因為使用了:target selector，所以可以藉此改變該元素的樣式*/</span></span><br><span class="line"><span class="selector-id">#test</span><span class="selector-pseudo">:target</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#test2</span><span class="selector-pseudo">:target</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#00f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="手刻Tab頁籤的思維："><a class="header-anchor" href="#手刻Tab頁籤的思維："></a>手刻Tab頁籤的思維：</h2>
<p>1.css target selector：透過id與a link 中href的值對應，當選取到時，可以將樣式套用在對象上。</p>
<p>2.透過 ~ 選取器 + :not選取器以及將內容的順序調整為-&gt;內容2-&gt;內容3-&gt;內容1，這樣才能實現當點擊tab2/tab3時，tab1因為沒有被點擊到而隱藏。</p>
<p>3.當點擊到Tab2或Tab3時，顯示對應的區塊</p>
<p><a href="https://codepen.io/kids5346/pen/vqZaXP">練習</a></p>
<blockquote>
<p><a href="https://www.w3schools.com/cssref/sel_target.asp">:target selector</a></p>
</blockquote>
]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>HTML/CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day30-CSS3有什麼新特性？</title>
    <url>/2019/06/26/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day30-CSS3%E6%9C%89%E4%BB%80%E9%BA%BC%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9F/</url>
    <content><![CDATA[<p>在爬面試題目找關於css3的新增的部分時，找到了 <a href="https://www.tutorialrepublic.com/">TutorialRepublic</a>這個網站，對於css3的新特性整理的很詳細、易懂，於是我就摘錄了關於新增特性的部分並另外彙整支援度(CanIUse)w3.org的定義以及w3school的範例Demo。</p>
<span id="more"></span>
<h1 id="CSS3-有哪些新特性？"><a class="header-anchor" href="#CSS3-有哪些新特性？"></a>CSS3 有哪些新特性？</h1>
<p>僅列舉新增的特性。</p>
<h2 id="Animation"><a class="header-anchor" href="#Animation"></a>Animation</h2>
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>animation</td>
<td>Specifies the keyframe-based animations.</td>
</tr>
<tr>
<td>animation-delay</td>
<td>Specifies when the animation will start.</td>
</tr>
<tr>
<td>animation-direction</td>
<td>Specifies whether the animation should play in reverse on alternate cycles or not.</td>
</tr>
<tr>
<td>animation-duration</td>
<td>Specifies the number of seconds or milliseconds an animation should take to complete one cycle.</td>
</tr>
<tr>
<td>animation-fill-mode</td>
<td>Specifies how a CSS animation should apply styles to its target before and after it is executing.</td>
</tr>
<tr>
<td>animation-iteration-count</td>
<td>Specifies the number of times an animation cycle should be played before stopping.</td>
</tr>
<tr>
<td>animation-name (@keyframes)</td>
<td>Specifies the name of @keyframes defined animations that should be applied to the selected element.</td>
</tr>
<tr>
<td>animation-play-state</td>
<td>Specifies whether the animation is running or paused.</td>
</tr>
<tr>
<td>animation-timing-function</td>
<td>Specifies how a CSS animation should progress over the duration of each cycle.</td>
</tr>
</tbody>
</table>
<p>支援度：<a href="https://caniuse.com/#feat=css-animation">caniuse</a></p>
<blockquote>
<p><a href="https://www.tutorialrepublic.com/css-reference/css3-animation-property.php">TutorialRepublic</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.w3schools.com/css/css3_animations.asp">w3schools</a></p>
</blockquote>
<h2 id="Background"><a class="header-anchor" href="#Background"></a>Background</h2>
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>background-clip</td>
<td>Specifies the painting area of the background.</td>
</tr>
<tr>
<td>background-origin</td>
<td>Specifies the positioning area of the background images.</td>
</tr>
<tr>
<td>background-size</td>
<td>Specifies the size of the background images.</td>
</tr>
</tbody>
</table>
<p>支援度：<a href="https://caniuse.com/#feat=multibackgrounds">caniuse</a></p>
<blockquote>
<p><a href="https://www.tutorialrepublic.com/css-reference/css-background-property.php">TutorialRepublic</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.w3schools.com/css/css3_backgrounds.asp">w3schools</a></p>
</blockquote>
<h2 id="Border"><a class="header-anchor" href="#Border"></a>Border</h2>
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>border-bottom-left-radius</td>
<td>Defines the shape of the bottom-left border corner of an element.</td>
</tr>
<tr>
<td>border-bottom-right-radius</td>
<td>Defines the shape of the bottom-right border corner of an element.</td>
</tr>
<tr>
<td>border-top-left-radius</td>
<td>Defines the shape of the top-left border corner of an element.</td>
</tr>
<tr>
<td>border-top-right-radius</td>
<td>Defines the shape of the top-right border corner of an element.</td>
</tr>
<tr>
<td>border-image</td>
<td>Specifies how an image is to be used in place of the border styles.</td>
</tr>
<tr>
<td>border-image-outset</td>
<td>Specifies the amount by which the border image area extends beyond the border box.</td>
</tr>
<tr>
<td>border-image-repeat</td>
<td>Specifies whether the image-border should be repeated, rounded or stretched.</td>
</tr>
<tr>
<td>border-image-slice</td>
<td>Specifies the inward offsets of the image-border.</td>
</tr>
<tr>
<td>border-image-source</td>
<td>Specifies the location of the image to be used as a border.</td>
</tr>
<tr>
<td>border-image-width</td>
<td>Specifies the width of the image-border.</td>
</tr>
<tr>
<td>border-radius</td>
<td>Defines the shape of the border corners of an element.</td>
</tr>
</tbody>
</table>
<p>支援度：<a href="https://caniuse.com/#search=Border">caniuse</a></p>
<blockquote>
<p><a href="https://www.tutorialrepublic.com/css-reference/css-border-property.php">TutorialRepublic</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.w3schools.com/css/css3_border_images.asp">w3schools</a></p>
</blockquote>
<h2 id="Color"><a class="header-anchor" href="#Color"></a>Color</h2>
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>opacity</td>
<td>Specifies the transparency of an element.</td>
</tr>
</tbody>
</table>
<p>支援度：<a href="https://caniuse.com/#search=opacity">caniuse</a></p>
<blockquote>
<p><a href="https://www.tutorialrepublic.com/css-reference/css-color-property.php">TutorialRepublic</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.w3schools.com/css/css3_colors.asp">w3schools</a></p>
</blockquote>
<h2 id="Flexible-Box"><a class="header-anchor" href="#Flexible-Box"></a>Flexible Box</h2>
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>flex</td>
<td>Specifies the components of a flexible length.</td>
</tr>
<tr>
<td>flex-basis</td>
<td>Specifies the initial main size of the flex item.</td>
</tr>
<tr>
<td>flex-direction</td>
<td>Specifies the direction of the flexible items.</td>
</tr>
<tr>
<td>flex-flow</td>
<td>A shorthand property for the flex-direction and the flex-wrap properties.</td>
</tr>
<tr>
<td>flex-grow</td>
<td>Specifies how the flex item will grow relative to the other items inside the flex container.</td>
</tr>
<tr>
<td>flex-shrink</td>
<td>Specifies how the flex item will shrink relative to the other items inside the flex container.</td>
</tr>
<tr>
<td>flex-wrap</td>
<td>Specifies the transparency of an element.</td>
</tr>
<tr>
<td>align-content</td>
<td>Specifies the alignment of flexible container’s items within the flex container.</td>
</tr>
<tr>
<td>align-items</td>
<td>Specifies the default alignment for items within the flex container.</td>
</tr>
<tr>
<td>align-self</td>
<td>Specifies the alignment for selected items within the flex container.</td>
</tr>
<tr>
<td>justify-content</td>
<td>Specifies how flex items are aligned along the main axis of the flex container after any flexible lengths and auto margins have been resolved.</td>
</tr>
<tr>
<td>order</td>
<td>Specifies the order in which a flex items are displayed and laid out within a flex container.</td>
</tr>
</tbody>
</table>
<p>支援度：<a href="https://caniuse.com/#feat=flexbox">caniuse</a></p>
<blockquote>
<p><a href="https://www.tutorialrepublic.com/css-reference/css3-flex-property.php">TutorialRepublic</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.w3schools.com/css/css3_flexbox.asp">w3schools</a></p>
</blockquote>
<h2 id="Font-Properties"><a class="header-anchor" href="#Font-Properties"></a>Font Properties</h2>
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>font-size-adjust</td>
<td>Preserves the readability of text when font fallback occurs.</td>
</tr>
<tr>
<td>font-stretch</td>
<td>Selects a normal, condensed, or expanded face from a font.</td>
</tr>
</tbody>
</table>
<p>支援度：</p>
<p><a href="https://caniuse.com/#search=font-size-adjust">font-size-adjust</a></p>
<p><a href="https://caniuse.com/#search=font-stretch">font-stretch</a></p>
<blockquote>
<p><a href="https://www.tutorialrepublic.com/css-reference/css-color-property.php">TutorialRepublic</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.w3schools.com/css/css3_colors.asp">w3schools</a></p>
</blockquote>
<h2 id="Multi-column-Layout-Properties"><a class="header-anchor" href="#Multi-column-Layout-Properties"></a>Multi-column Layout Properties</h2>
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>columns</td>
<td>A shorthand property for setting column-width and column-count properties.</td>
</tr>
<tr>
<td>column-count</td>
<td>Specifies the number of columns in a multi-column element.</td>
</tr>
<tr>
<td>column-fill</td>
<td>Specifies how columns will be filled.</td>
</tr>
<tr>
<td>column-gap</td>
<td>Specifies the gap between the columns in a multi-column element.</td>
</tr>
<tr>
<td>column-rule</td>
<td>Specifies a straight line, or “rule”, to be drawn between each column in a multi-column element.</td>
</tr>
<tr>
<td>column-rule-color</td>
<td>Specifies the color of the rules drawn between columns in a multi-column layout.</td>
</tr>
<tr>
<td>column-rule-style</td>
<td>Specifies the style of the rule drawn between the columns in a multi-column layout.</td>
</tr>
<tr>
<td>column-rule-width</td>
<td>Specifies the width of the rule drawn between the columns in a multi-column layout.</td>
</tr>
<tr>
<td>column-span</td>
<td>Specifies how many columns an element spans across in a multi-column layout.</td>
</tr>
<tr>
<td>column-width</td>
<td>Specifies the optimal width of the columns in a multi-column element.</td>
</tr>
</tbody>
</table>
<p>支援度：</p>
<p><a href="https://caniuse.com/#search=column">caniuse</a></p>
<blockquote>
<p><a href="https://www.tutorialrepublic.com/css-reference/css3-columns-property.php">TutorialRepublic</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.w3schools.com/css/css3_multiple_columns.asp">w3schools</a></p>
</blockquote>
<h2 id="Outline-Properties"><a class="header-anchor" href="#Outline-Properties"></a>Outline Properties</h2>
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>outline-offset</td>
<td>Set the space between an outline and the border edge of an element.</td>
</tr>
</tbody>
</table>
<p>支援度：<a href="https://caniuse.com/#search=outline-offset">caniuse</a></p>
<blockquote>
<p><a href="https://www.tutorialrepublic.com/css-reference/css-outline-property.php">TutorialRepublic</a></p>
</blockquote>
<blockquote>
<p><a href="ss/css_outline.asp">w3schools</a></p>
</blockquote>
<h2 id="Text-Properties"><a class="header-anchor" href="#Text-Properties"></a>Text Properties</h2>
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>tab-size</td>
<td>Specifies the length of the tab character.</td>
</tr>
<tr>
<td>text-align-last</td>
<td>Specifies how the last line of a block or a line right before a forced line break is aligned when text-align is justify.</td>
</tr>
<tr>
<td>text-decoration-color</td>
<td>Specifies the color of the text-decoration-line.</td>
</tr>
<tr>
<td>text-decoration-line</td>
<td>Specifies what kind of line decorations are added to the element.</td>
</tr>
<tr>
<td>text-decoration-style</td>
<td>Specifies the style of the lines specified by the text-decoration-line property</td>
</tr>
<tr>
<td>text-justify</td>
<td>Specifies the justification method to use when the text-align property is set to justify.</td>
</tr>
<tr>
<td>text-overflow</td>
<td>Specifies how the text content will be displayed, when it overflows the block containers.</td>
</tr>
<tr>
<td>text-shadow</td>
<td>Applies one or more shadows to the text content of an element.</td>
</tr>
<tr>
<td>word-break</td>
<td>Specifies how to break lines within words.</td>
</tr>
<tr>
<td>word-wrap</td>
<td>Specifies whether to break words when the content overflows the boundaries of its container.</td>
</tr>
</tbody>
</table>
<p>支援度：<br>
<a href="https://caniuse.com/#search=tab-size">tab-size</a><br>
<a href="https://caniuse.com/#search=text-align-last">text-align-last</a><br>
<a href="https://caniuse.com/#search=text-decoration-color">text-decoration-color</a><br>
<a href="https://caniuse.com/#search=text-decoration-line"> text-decoration-line </a><br>
<a href="https://caniuse.com/#search=text-decoration-style">text-decoration-style </a><br>
<a href="https://caniuse.com/#search=text-justify">text-justify</a><br>
<a href="https://caniuse.com/#search=text-overflow">text-overflow </a><br>
<a href="https://caniuse.com/#search=text-shadow">text-shadow</a><br>
<a href="https://caniuse.com/#search=word-break">word-break </a><br>
<a href="https://caniuse.com/#search=word-wrap">word-wrap</a></p>
<blockquote>
<p><a href="https://www.tutorialrepublic.com/css-reference/css3-properties.php">TutorialRepublic</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.w3schools.com/css/css3_text_effects.asp">w3schools</a></p>
</blockquote>
<h2 id="Transform"><a class="header-anchor" href="#Transform"></a>Transform</h2>
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>transform</td>
<td>Applies a 2D or 3D transformation to an element.</td>
</tr>
<tr>
<td>transform-origin</td>
<td>Defines the origin of transformation for an element.</td>
</tr>
<tr>
<td>transform-style</td>
<td>Specifies how nested elements are rendered in 3D space.</td>
</tr>
<tr>
<td>perspective-origin</td>
<td>Defines the origin (the vanishing point for the 3D space) for the perspective property.</td>
</tr>
<tr>
<td>perspective</td>
<td>Defines the perspective from which all child elements of the object are viewed.</td>
</tr>
<tr>
<td>backface-visibility</td>
<td>Specifies whether or not the “back” side of a transformed element is visible when facing the user.</td>
</tr>
</tbody>
</table>
<p>支援度：<a href="https://caniuse.com/#search=Transform">caniuse</a></p>
<blockquote>
<p><a href="https://www.tutorialrepublic.com/css-reference/css3-transform-property.php">TutorialRepublic</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.w3schools.com/css/css3_3dtransforms.asp">w3schools</a></p>
</blockquote>
<h2 id="Transitions"><a class="header-anchor" href="#Transitions"></a>Transitions</h2>
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>transition</td>
<td>Defines the transition between two states of an element.</td>
</tr>
<tr>
<td>transition-delay</td>
<td>Specifies when the transition effect will start.</td>
</tr>
<tr>
<td>transition-duration</td>
<td>Specifies the number of seconds or milliseconds a transition effect should take to complete.</td>
</tr>
<tr>
<td>transition-property</td>
<td>Specifies the names of the CSS properties to which a transition effect should be applied.</td>
</tr>
<tr>
<td>transition-timing-function</td>
<td>Specifies the speed curve of the transition effect.</td>
</tr>
</tbody>
</table>
<p>支援度：<a href="https://caniuse.com/#search=Transitions">caniuse</a></p>
<blockquote>
<p><a href="https://www.tutorialrepublic.com/css-reference/css3-transition-property.php">TutorialRepublic</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.w3schools.com/css/css3_transitions.asp">w3schools</a></p>
</blockquote>
<h2 id="Visual-formatting-Properties"><a class="header-anchor" href="#Visual-formatting-Properties"></a>Visual formatting Properties</h2>
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>overflow-x</td>
<td>Specifies how to manage the content when it overflows the width of the element’s content area.</td>
</tr>
<tr>
<td>overflow-y</td>
<td>Specifies how to manage the content when it overflows the height of the element’s content area.</td>
</tr>
<tr>
<td>resize</td>
<td>Specifies whether or not an element is resizable by the user.</td>
</tr>
<tr>
<td>box-shadow</td>
<td>Applies one or more drop-shadows to the element’s box.</td>
</tr>
<tr>
<td>box-sizing</td>
<td>Alter the default CSS box model.</td>
</tr>
</tbody>
</table>
<p>支援度：<br>
<a href="https://caniuse.com/#search=overflow-x">overflow-x  </a><br>
<a href="https://caniuse.com/#search=overflow-y">overflow-y </a><br>
<a href="https://caniuse.com/#search=resize">resize </a><br>
<a href="https://caniuse.com/#search=box-shadow">box-shadow</a><br>
<a href="https://caniuse.com/#search=box-sizing">box-sizing</a></p>
<blockquote>
<p><a href="https://www.tutorialrepublic.com/css-reference/css3-overflow-x-property.php">TutorialRepublic</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.w3schools.com/css/css_overflow.asp">w3schools</a></p>
</blockquote>
<h1 id="CSS3-有哪些新的-selectors？"><a class="header-anchor" href="#CSS3-有哪些新的-selectors？"></a>CSS3 有哪些新的 selectors？</h1>
<table>
<thead>
<tr>
<th>Pattern</th>
<th>Represents</th>
</tr>
</thead>
<tbody>
<tr>
<td>E[foo^=“bar”]</td>
<td>an E element whose “foo” attribute value begins exactly with the string “bar”</td>
</tr>
<tr>
<td>E[foo＄=“bar”]</td>
<td>an E element whose “foo” attribute value ends exactly with the string “bar”</td>
</tr>
<tr>
<td>E[foo*=“bar”]</td>
<td>an E element whose “foo” attribute value contains the substring “bar”</td>
</tr>
<tr>
<td>E:root</td>
<td>an E element, root of the document</td>
</tr>
<tr>
<td>E:nth-child(n)</td>
<td>an E element, the n-th child of its parent</td>
</tr>
<tr>
<td>E:nth-last-child(n)</td>
<td>an E element, the n-th child of its parent, counting from the last one</td>
</tr>
<tr>
<td>E:nth-of-type(n)</td>
<td>an E element, the n-th sibling of its type</td>
</tr>
<tr>
<td>E:nth-last-of-type(n)</td>
<td>an E element, the n-th sibling of its type, counting from the last one</td>
</tr>
<tr>
<td>E:last-child</td>
<td>an E element, last child of its parent</td>
</tr>
<tr>
<td>E:first-of-type</td>
<td>an E element, first sibling of its type</td>
</tr>
<tr>
<td>E:last-of-type</td>
<td>an E element, last sibling of its type</td>
</tr>
<tr>
<td>E:only-child</td>
<td>an E element, only child of its parent</td>
</tr>
<tr>
<td>E:only-of-type</td>
<td>an E element, only sibling of its type</td>
</tr>
<tr>
<td>E:empty</td>
<td>an E element that has no children (including text nodes)</td>
</tr>
<tr>
<td>E:target</td>
<td>an E element being the target of the referring URI</td>
</tr>
<tr>
<td>E:enabled</td>
<td>a user interface element E which is enabled or disabled</td>
</tr>
<tr>
<td>E:disabled</td>
<td>a user interface element E which is enabled or disabled</td>
</tr>
<tr>
<td>E:checked</td>
<td>a user interface element E which is checked (for instance a radio-button or checkbox)</td>
</tr>
<tr>
<td>E:not(s)</td>
<td>an E element that does not match simple selector s</td>
</tr>
<tr>
<td>E ~ F</td>
<td>an F element preceded by an E element</td>
</tr>
</tbody>
</table>
<p>引用來源：</p>
<blockquote>
<p><a href="https://www.tutorialrepublic.com/">TutorialRepublic</a><br>
<a href="https://www.w3schools.com">w3schools</a><br>
<a href="https://www.w3.org/TR/selectors-3/">w3.org - Selectors</a></p>
</blockquote>
]]></content>
      <categories>
        <category>把玩Css</category>
        <category>前端面試題</category>
      </categories>
      <tags>
        <tag>HTML/CSS</tag>
        <tag>前端面試題</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day31-初探Boostrap4</title>
    <url>/2019/06/27/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day31-%E5%88%9D%E6%8E%A2Boostrap4/</url>
    <content><![CDATA[<h1 id="初探Boostrap4"><a class="header-anchor" href="#初探Boostrap4"></a>初探Boostrap4</h1>
<p>關於學習Boostrap4的過程中，我覺得最重要的是要了解：</p>
<span id="more"></span>
<ul>
<li>什麼是Boostrap4？</li>
<li>為什麼要套用Boostrap4?是因為什麼目的？</li>
<li>Boostrap4是基於什麼觀念被開發出來？</li>
<li>Boostrap4在版面配置上有著什麼特別的設定？</li>
<li>Boostrap4元件的HTML架構、CSS是如何被撰寫？</li>
<li>當需要額外的客製化css設定時，應該怎麼做比較好？</li>
<li>Boostrap4的class命名有什麼規則？</li>
<li>Boostrap4預設了哪些響應式斷點？</li>
<li>Boostrap4在字體部分變更了什麼？</li>
</ul>
<p>框架可以幫助我們更快的生成一些常用的元件及版型，例如導覽列(Navbar)等。</p>
<p>但要提醒的一點是，如果不了解HTML/CSS的話，當遇到需要修改時可能會束手無策，所以不能完全依賴框架，也要具備HTML/CSS的相關基本知識才行。</p>
<p>但要如何改動框架中的設定，我覺得必須從官方提供的 <a href="https://github.com/twbs/bootstrap/blob/master/dist/css/bootstrap.css">Source Code</a>著手。</p>
<p>因為無論是元件或者版型等等的設定都可以透過Source Code了解其來龍去脈，所以閱讀官方程式碼是需要的！</p>
<h2 id="什麼是Boostrap4？"><a class="header-anchor" href="#什麼是Boostrap4？"></a>什麼是Boostrap4？</h2>
<ul>
<li>使用框架提供的元件及已經設定好的 class，就可以快速架構出一個網站的雛形。</li>
<li>是一套行動優先的框架，且已經預設五個尺寸的響應式斷點</li>
</ul>
<h2 id="為什麼要套用Boostrap4-是因為什麼目的？"><a class="header-anchor" href="#為什麼要套用Boostrap4-是因為什麼目的？"></a>為什麼要套用Boostrap4?是因為什麼目的？</h2>
<p>對於一個前端工程師來說，什麼時候該用Boostrap4，什麼時候需要自己手刻，我覺得這是一個需要好好思考的問題，因為這牽扯到關於自己在撰寫程式碼時的考量。</p>
<p><strong>一個對於我來說很重要的參考依據，在於需求是不是有許多客製化的部分</strong>。如果需求是資料層面的功能要完整，而視覺方面沒有過多要求也可能沒有設計稿的狀況下，那套用Boostrap4也許是一個很好的選擇。</p>
<p>然而如果是有設計稿，且客製化需求也很多時，則會採用元件使用Boostrap4的，而其餘部分則是透過scss等手刻完成需求。</p>
<p>小結論：需求決定一切。</p>
<h2 id="Boostrap4是用基於什麼觀念被開發出來？"><a class="header-anchor" href="#Boostrap4是用基於什麼觀念被開發出來？"></a>Boostrap4是用基於什麼觀念被開發出來？</h2>
<p>需要修改框架的一些設定時，必須要先了解關於Boostrap4運用了什麼觀念開發，才有辦法正確的修改。</p>
<ul>
<li>Boostrap4是flex為核心觀念所開發的框架</li>
<li>grid網格觀念</li>
</ul>
<p>跟Boostrap3的差別很大，所以如果不知道Boostrap4是透過flex的概念開發的話，在修改上勢必會有些困難;而grid網格觀念則是在版面設定上提供了一個規則，只要了解了在修改上就不會太難。</p>
<h2 id="Boostrap4在版面配置上有著什麼特別的設定？"><a class="header-anchor" href="#Boostrap4在版面配置上有著什麼特別的設定？"></a>Boostrap4在版面配置上有著什麼特別的設定？</h2>
<p>Bootstrap4運用了網格概念，其中</p>
<ul>
<li>.row 左右兩邊設定了以下設定
<ul>
<li>margin-left:-15px</li>
<li>margin-right:-15px</li>
</ul>
</li>
</ul>
<blockquote>
<p>在 .row 上使用<strong>負值margin</strong>方法確保你的內容在左側之下正確對齊。<br>
<a href="https://bootstrap.hexschool.com/docs/4.2/layout/grid/">參考資料</a></p>
</blockquote>
<ul>
<li>.col 左右兩邊設定了以下設定
<ul>
<li>padding-left: 15px</li>
<li>padding-right: 15px</li>
</ul>
</li>
</ul>
<blockquote>
<p>欄包含水平的 padding，以產生單個欄之間的溝槽(gutter)<br>
<a href="https://bootstrap.hexschool.com/docs/4.2/layout/grid/">參考資料</a></p>
</blockquote>
<ul>
<li>
<p>Bootstrap4 Grid System<br>
<img src="https://i.ytimg.com/vi/tX_4HTQ6Pgc/maxresdefault.jpg" alt="Bootstrap4 grid system"></p>
</li>
<li>
<p>透過col排版時的配置<br>
<img src="https://cdn-images-1.medium.com/max/1600/1*6frm0pq5VjPcc71EqH7cKw.png" alt="col排版呈現"></p>
</li>
</ul>
<h2 id="Boostrap4元件的HTML架構、CSS是如何被撰寫？"><a class="header-anchor" href="#Boostrap4元件的HTML架構、CSS是如何被撰寫？"></a>Boostrap4元件的HTML架構、CSS是如何被撰寫？</h2>
<p>透過底下這兩個連結，可以看出一個元件的架構以及css的撰寫思維，降低修改所需要的時間。<br>
<a href="https://getbootstrap.com/docs/4.3/components/alerts/">Bootstrap4 元件連結</a><br>
<a href="https://github.com/twbs/bootstrap/blob/master/dist/css/bootstrap.css">Bootstrap4 Source Code</a></p>
<h2 id="當需要額外的客製化css設定時，應該怎麼做比較好？"><a class="header-anchor" href="#當需要額外的客製化css設定時，應該怎麼做比較好？"></a>當需要額外的客製化css設定時，應該怎麼做比較好？</h2>
<p>難免會有遇到需要客製化的時候，此時的class命名就會是一件很頭痛的事情，因為框架已經用掉了許多命名方式。</p>
<p>這裡提供我的一些目前的想法:</p>
<ul>
<li>在客製化的class加入自訂的字樣，Ex: my-carousel 、 my-navbar，如果是需要透過js控制的部分可以撰寫成 js-carousel等</li>
<li>將客製化的class放在所有class的最前方，在維護上可以加快得知該部分是否有客製化的設定。</li>
</ul>
<h2 id="Boostrap4的class命名有什麼規則？"><a class="header-anchor" href="#Boostrap4的class命名有什麼規則？"></a>Boostrap4的class命名有什麼規則？</h2>
<ul>
<li>元件使用的標籤
<ul>
<li>ex: navbar</li>
</ul>
</li>
<li>樣式設定的標籤
<ul>
<li>ex: mx-auto</li>
<li>ex: bg-light</li>
</ul>
</li>
</ul>
<h2 id="Boostrap4預設了哪些響應式斷點？"><a class="header-anchor" href="#Boostrap4預設了哪些響應式斷點？"></a>Boostrap4預設了哪些響應式斷點？</h2>
<ul>
<li>xs &lt;= 575.98px</li>
<li>sm : 576px ~ 767.98px</li>
<li>md : 768px ~ 991.98px</li>
<li>lg : 992px ~1199.98px</li>
<li>xl &gt;= 1200px</li>
</ul>
<h2 id="Boostrap4在字體部分變更了什麼？"><a class="header-anchor" href="#Boostrap4在字體部分變更了什麼？"></a>Boostrap4在字體部分變更了什麼？</h2>
<p>BS4放棄使用預設字體，採用隨系統預設字體而呈現字型的方式</p>
<ul>
<li>mac/ios : apple-system -&gt; Ping Fang</li>
<li>windows : 無預設;
<ul>
<li>英：Segoe UI ／ 中：Ｍicrosoft Jhenghei</li>
</ul>
</li>
<li>android : 無預設;
<ul>
<li>英：Roboto ／ 中：droidsansfallback</li>
</ul>
</li>
</ul>
<p>目前對於這套框架的理解大概如此，待實務經驗更加豐富且有新的理解時會在不斷更新！</p>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>]]></content>
      <categories>
        <category>Boostrap4</category>
      </categories>
      <tags>
        <tag>Boostrap4</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day32-Git 初探系列 #1</title>
    <url>/2019/06/28/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day32-Git-%E5%88%9D%E6%8E%A2%E7%B3%BB%E5%88%97-1/</url>
    <content><![CDATA[<h1 id="Git-初探系列-1"><a class="header-anchor" href="#Git-初探系列-1"></a>Git 初探系列 #1</h1>
<p>關於Git，雖然不是前端的技術之一，但卻是和他人協作中不可或缺的重要工具之一。協作專案時會遇到的困難點很多都可以透過Git作為溝通的橋樑，也可以記錄每一次修改的記錄(如果你願意的話)。</p>
<span id="more"></span>
<p>當然，最重要的一點：可以保護自己(誤)。</p>
<p>好工具，不學嗎？</p>
<p>Outline:</p>
<ul>
<li>Git 是什麼？</li>
<li>使用Git的前置作業
<ul>
<li>第一次接觸Git應該要有的基本了解-Https與SSH優點及缺點</li>
<li>設定SSH金鑰方式</li>
<li>設定使用者名稱與帳號</li>
</ul>
</li>
<li>Git在本地端與遠端的運作關係圖(個人認為的基礎關係圖)
<ul>
<li>Git在本地端與遠端的基本運作關係(上傳)</li>
<li>Git在本地端與遠端的基本運作關係(下載)</li>
</ul>
</li>
</ul>
<h2 id="Git-是什麼？"><a class="header-anchor" href="#Git-是什麼？"></a>Git 是什麼？</h2>
<p>淺談幾種版本控制的方式：</p>
<ul>
<li>
<p>關於version control(版本控制)<br>
可以記錄檔案在某一段時間裡的變化，例如新增、刪除、修改等。亦可以從中找回先前的某一個版本的記錄。</p>
</li>
<li>
<p>Local Version Control Systems(本地端版本控制)<br>
透過複製檔案到其他目錄的方式執行版本控制但這個方法很容易出錯，也不易查詢。<br>
<img src="https://i.imgur.com/vxRLRqp.png" alt=""></p>
</li>
<li>
<p>Centralized Version Control System(CVCSs 集中化版本控制系統)<br>
將檔案全部集中於單一伺服器進行控管。<br>
但當伺服器產生問題時，就會造成很大的問題。</p>
</li>
</ul>
<p><img src="https://i.imgur.com/nTkCaO8.png" alt=""></p>
<ul>
<li>Distributed Version Control Systems(DVCS  分散式版本控制)<br>
檔案不只是在遠端才有，每個用戶端都可以有獨立的一份檔案可以各自運作，且當遠端伺服器產生問題時，可以透過任一個用戶端的檔案還原。
<ul>
<li><strong>Git、Mercurial、Bazaar 和 Darcs）屬於此類</strong><br>
<img src="https://i.imgur.com/adS7w4j.png" alt=""></li>
</ul>
</li>
</ul>
<h2 id="使用Git的前置作業"><a class="header-anchor" href="#使用Git的前置作業"></a>使用Git的前置作業</h2>
<h3 id="1-創建帳號及安裝"><a class="header-anchor" href="#1-創建帳號及安裝"></a>1. 創建帳號及安裝</h3>
<ul>
<li>Git官網<a href="https://git-scm.com/">安裝Git</a></li>
<li>創建一個<a href="https://github.com/">Github</a>/<a href="https://about.gitlab.com/">Gitlab</a>的帳號</li>
</ul>
<h3 id="2-設定使用者名稱與帳號"><a class="header-anchor" href="#2-設定使用者名稱與帳號"></a>2. 設定使用者名稱與帳號</h3>
<ul>
<li>
<p><strong>git config --global <a href="http://user.name">user.name</a>  ‘你的名字’</strong></p>
</li>
<li>
<p><strong>git config --global user.email ‘你的信箱’</strong></p>
</li>
</ul>
<h3 id="3-第一次接觸Git應該要有的基本了解-HTTPS與SSH"><a class="header-anchor" href="#3-第一次接觸Git應該要有的基本了解-HTTPS與SSH"></a>3. 第一次接觸Git應該要有的基本了解-HTTPS與SSH</h3>
<p>與遠端讀/取檔案的方法主要有底下這兩種方式：</p>
<ul>
<li>
<p>HTTPS -&gt; 在每次上傳時都需要輸入帳號密碼，除非已經將帳號密碼儲存在電腦中</p>
</li>
<li>
<p>SSH -&gt; 在電腦與遠端伺服器中各設定了一組相互對應的金鑰序號，並透過此金鑰達成。</p>
</li>
</ul>
<p>目前得到的小結論: SSH安全性高於HTTPS</p>
<h3 id="4-設定SSH金鑰方式"><a class="header-anchor" href="#4-設定SSH金鑰方式"></a>4. 設定SSH金鑰方式</h3>
<p>以Mac為例</p>
<ul>
<li>
<p>檢查自己的電腦是否已經有設定</p>
<ul>
<li><strong>cd ~/.ssh</strong></li>
<li><strong>ls</strong></li>
</ul>
</li>
<li>
<p>產生金鑰</p>
<ul>
<li><strong>ssh-keygen</strong> : 會產出一個是id_rsa和id_rsa.pub兩個檔案<br>
此時再執行檢查一次應該就會看到底下這個畫面。<br>
<img src="https://i.imgur.com/BcbvDoE.png" alt=""></li>
</ul>
</li>
<li>
<p>獲得公共金鑰中的資訊：</p>
<ul>
<li>cat ~/.ssh/id_rsa.pub**</li>
</ul>
</li>
<li>
<p>將公鑰放到遠端的github / gitlab中，流程如下：</p>
<ol>
<li>從github中的右上角的使用者找到setting</li>
<li>點擊 SSH and GPG keys中的 New SSH key，將公鑰中的資訊貼入並儲存即可<br>
<img src="https://i.imgur.com/OgpsqSi.png" alt=""></li>
</ol>
</li>
</ul>
<h2 id="對於Git在本地端與遠端的基本運作關係圖-個人認為的基礎關係圖"><a class="header-anchor" href="#對於Git在本地端與遠端的基本運作關係圖-個人認為的基礎關係圖"></a>對於Git在本地端與遠端的基本運作關係圖(個人認為的基礎關係圖)</h2>
<p>先有個概念：</p>
<p>在學習後整理了一張關於上傳及下載檔案的簡單流程圖，方便自己記憶。</p>
<p><img src="https://i.imgur.com/hJM8UuK.png" alt="自製流程圖"></p>
<h3 id="Git在本地端與遠端的基本運作關係-上傳"><a class="header-anchor" href="#Git在本地端與遠端的基本運作關係-上傳"></a>Git在本地端與遠端的基本運作關係(上傳)</h3>
<ol>
<li>初始化.git 資料夾
<ul>
<li><strong>git init</strong></li>
</ul>
</li>
<li>將檔案加入到git資料夾中進行追蹤
<ul>
<li><strong>git add .</strong> -&gt; 將所有檔案都加入</li>
<li><strong>git add ‘檔案名稱’</strong> -&gt; 將指定的檔案名稱加入</li>
</ul>
</li>
<li>將檔案存入版本儲存區，建立版本編號
<ul>
<li><strong>git commit</strong> -&gt; 需要較長的註解時使用
<ul>
<li>搭配vim的指令使用(註解編輯完後離開)：
<ul>
<li>w: write</li>
<li>q: quit</li>
</ul>
</li>
</ul>
</li>
<li><strong>git commit</strong>  -m ‘短註解’ -&gt; 用於註解較短時</li>
</ul>
</li>
<li>將檔案上傳至遠端儲存庫
<ul>
<li>在github / gitlab點擊New Repository創建一個專案，此時可以看到底下畫面<br>
<img src="https://i.imgur.com/vpnaixm.png" alt=""></li>
<li>**git remote add origin <a href="mailto:git@github.com">git@github.com</a>:penghuachen/test.git **-&gt; 將等等要放到github中test的位置加入</li>
<li><strong>git push origin master</strong> -&gt;將檔案推到github
<ul>
<li>origin 儲存庫默認的名字，這裡指的是test</li>
<li>master 指的是遠端test的其中一支分支叫做master</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="Git在本地端與遠端的基本運作關係-下載"><a class="header-anchor" href="#Git在本地端與遠端的基本運作關係-下載"></a>Git在本地端與遠端的基本運作關係(下載)</h3>
<ol>
<li>完整下載github上的專案：
<ul>
<li>
<p>在github中找到圖中字樣 <code>Clone or download</code><br>
<img src="https://i.imgur.com/lU9SknP.png" alt=""></p>
</li>
<li>
<p>選擇HTTPS or SSH Keys的方式，並複製提供的連結<br>
<img src="https://i.imgur.com/4WYTRwJ.png" alt=""></p>
</li>
<li>
<p><strong>git clone 剛剛複製的連結</strong> ，即可將檔案下載下來</p>
</li>
</ul>
</li>
</ol>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day28-如何使用 jQuery ui ? - 以range slider為例</title>
    <url>/2019/06/24/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day28-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-jQuery-ui-%E4%BB%A5range-slider%E7%82%BA%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="如何使用-jQuery-ui-以slider為例"><a class="header-anchor" href="#如何使用-jQuery-ui-以slider為例"></a>如何使用 jQuery ui ? - 以slider為例</h1>
<h2 id="jQuery-來源"><a class="header-anchor" href="#jQuery-來源"></a>jQuery 來源</h2>
<p>使用方式有兩種:</p>
<span id="more"></span>
<p><span style="color:#f00;">引入順序需要先引入<strong>jQuery的js檔案</strong>後才引入<strong>jQuery-ui的js檔案</strong>，否則會報錯</span></p>
<ul>
<li>
<p>透過cdn引入 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://code.jquery.com/jquery-3.4.1.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://code.jquery.com/ui/1.12.1/jquery-ui.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>透過將jQuery source code下載後儲存，並在專案中引入使用</p>
</li>
</ul>
<h2 id="使用-jQuery的-range-slider"><a class="header-anchor" href="#使用-jQuery的-range-slider"></a>使用 jQuery的 range slider</h2>
<p>將 range slider 程式碼複製一份到專案需求位置，就可以看到雛形結構。之後再依照需求調整css樣式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jQuery官網提供之程式碼--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery UI Slider - Range slider<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--   引入jQuery source code and css  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/resources/demos/style.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-1.12.4.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/ui/1.12.1/jquery-ui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--  slider設定相關數值的程式部分  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $( <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    $( <span class="string">&quot;#slider-range&quot;</span> ).<span class="title function_">slider</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">range</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">min</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">max</span>: <span class="number">500</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">values</span>: [ <span class="number">75</span>, <span class="number">300</span> ],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">slide</span>: <span class="keyword">function</span>(<span class="params"> event, ui </span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $( <span class="string">&quot;#amount&quot;</span> ).<span class="title function_">val</span>( <span class="string">&quot;$&quot;</span> + ui.<span class="property">values</span>[ <span class="number">0</span> ] + <span class="string">&quot; - $&quot;</span> + ui.<span class="property">values</span>[ <span class="number">1</span> ] );</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    $( <span class="string">&quot;#amount&quot;</span> ).<span class="title function_">val</span>( <span class="string">&quot;$&quot;</span> + $( <span class="string">&quot;#slider-range&quot;</span> ).<span class="title function_">slider</span>( <span class="string">&quot;values&quot;</span>, <span class="number">0</span> ) +</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot; - $&quot;</span> + $( <span class="string">&quot;#slider-range&quot;</span> ).<span class="title function_">slider</span>( <span class="string">&quot;values&quot;</span>, <span class="number">1</span> ) );</span></span><br><span class="line"><span class="language-javascript">  &#125; );</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;amount&quot;</span>&gt;</span>Price range:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;amount&quot;</span> <span class="attr">readonly</span> <span class="attr">style</span>=<span class="string">&quot;border:0; color:#f6931f; font-weight:bold;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;slider-range&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://jqueryui.com/slider/#range">jQuery UI slider</a></p>
</blockquote>
]]></content>
      <categories>
        <category>把玩jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day33-Float 浮動</title>
    <url>/2019/06/29/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day33-Float%20%E6%B5%AE%E5%8B%95/</url>
    <content><![CDATA[<h1 id="Float-浮動"><a class="header-anchor" href="#Float-浮動"></a>Float 浮動</h1>
<p>前言：</p>
<p>浮動元素一直被用於當作網頁排版的技巧，但<strong>浮動元素從來就不是為了排版而生</strong>，所以必須要知道雖然可以這麼用，卻是誤用。</p>
<span id="more"></span>
<p>關於 float 的一些特性，趁著有空的時候做個整理並且記錄放上來，也順帶和前面的 <a href="https://penghuachen.github.io/2019/06/16/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day20-float%E5%92%8C%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8B%95%E7%9A%84%E6%96%B9%E6%B3%95/">連續記錄挑戰Day20-float和清除浮動的方法</a> 做個呼應。</p>
<p>Outline</p>
<ul>
<li>什麼是浮動 Float?</li>
<li>浮動的語法怎麼設定？</li>
<li>浮動的相關規則
<ul>
<li>當元素設定為浮動時，其他內容會圍繞四周</li>
<li>浮動元素左/右的最外邊緣不能是容器左/右的最內邊緣</li>
<li>浮動元素的左外側邊界必須要在前一個已經設定浮動元素的右邊界，反之亦然。</li>
<li>浮動元素的上邊緣不能比容器高，且當浮動元素若位於兩個重疊邊界的範圍間，則浮動元素的放置位置會如同設定 display:block的效果。</li>
<li>浮動元素的上邊緣不能高於前一個浮動元素或區塊元素的上邊緣，且元素寬度加總大於容器寬度時，次排序的浮動元素會自動往下一排放置。</li>
<li>浮動元素若放置於行方框(例如p段落)中最前面時，浮動位置為該行方框的上緣，與行方框切齊，而並不會浮動到最上方。</li>
<li>浮動元素與margin負值:可以讓浮動元素移動到容器之外</li>
<li>浮動元素在行內方框(例如span)及區塊元素時的邊框、背景、內容的重疊情形</li>
</ul>
</li>
<li>什麼是clear?</li>
<li>clear語法怎麼設定？</li>
</ul>
<h2 id="什麼是浮動-Float"><a class="header-anchor" href="#什麼是浮動-Float"></a>什麼是浮動 Float?</h2>
<p><strong>可以使元素脫離原本的文檔流向，使得容器高度會因為沒有元素無法撐開(高度=0)，但要記住依然會影響排版的結果。</strong></p>
<h2 id="浮動的語法怎麼設定？"><a class="header-anchor" href="#浮動的語法怎麼設定？"></a>浮動的語法怎麼設定？</h2>
<table>
<thead>
<tr>
<th>語法</th>
<th>數值</th>
</tr>
</thead>
<tbody>
<tr>
<td>float</td>
<td>left / right / none</td>
</tr>
</tbody>
</table>
<h2 id="浮動元素的相關放置規則"><a class="header-anchor" href="#浮動元素的相關放置規則"></a>浮動元素的相關放置規則</h2>
<ol>
<li>
<p>當元素設定為浮動時，其他內容會圍繞四周。<br>
<a href="https://codepen.io/kids5346/pen/GbyzBr?editors=1100">測試範例一</a><br>
而且<strong>不會發生 margin collpase 的情形</strong>。而這必須討論關於BFC的建立與margin collpase之間的關係。詳細可以看此篇 <a href="https://penghuachen.github.io/2019/06/02/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day06-margin-collapse%E7%94%B1%E4%BE%86%E8%88%87BFC%E5%8E%9F%E7%90%86/">margin collapse由來與BFC原理</a><br>
<img src="https://i.imgur.com/s4WfTBR.png" alt=""></p>
</li>
<li>
<p>浮動元素左/右的<strong>最外邊緣</strong>不能是容器左/右的<strong>最內邊緣</strong><br>
<a href="https://codepen.io/kids5346/pen/GbyzBr?editors=1100">測試範例二</a><br>
意思是浮動元素的最外邊緣最多就只到容器的最內邊緣而已<br>
<img src="https://i.imgur.com/MJEuVyZ.png" alt=""></p>
</li>
<li>
<p>浮動元素的<strong>左外側邊界必須要在前一個已經設定浮動元素的右邊界</strong>，反之亦然。<br>
<a href="https://codepen.io/kids5346/pen/GbyzBr?editors=1100">測試範例三</a><br>
為了避免浮動元素相互覆蓋，所以會讓次序後面的浮動元素緊貼著前一個。<br>
<img src="https://i.imgur.com/Ghvq8JR.png" alt=""></p>
</li>
<li>
<p>浮動元素的上邊緣不能比容器高，且當浮動元素若位於兩個重疊邊界的範圍間，則浮動元素的放置位置會如同設定 display:block的效果。<br>
<a href="https://codepen.io/kids5346/pen/GbyzBr?editors=1100">測試範例四</a><br>
<img src="https://i.imgur.com/Hnpxhh6.png" alt=""></p>
</li>
<li>
<p>浮動元素的上邊緣不能高於前一個浮動元素或區塊元素的上邊緣，且元素寬度加總大於容器寬度時，次排序的浮動元素會自動往下一排放置。<br>
<a href="https://codepen.io/kids5346/pen/GbyzBr?editors=1100">測試範例五</a><br>
<img src="https://i.imgur.com/ufhPWED.png" alt=""></p>
</li>
<li>
<p>浮動元素若放置於行方框(例如p段落)中最前面時，浮動位置為該行方框的上緣，與行方框切齊，而並不會浮動到最上方。<br>
<a href="https://codepen.io/kids5346/pen/GbyzBr?editors=1100">測試範例六</a><br>
<img src="https://i.imgur.com/x3u7rgR.png" alt=""></p>
</li>
<li>
<p>浮動元素與margin負值:可以讓浮動元素移動到容器之外<br>
<a href="https://codepen.io/kids5346/pen/GbyzBr?editors=1100">測試範例七</a><br>
瀏覽器為了找到浮動元素上方的內側邊界，所以會做此計算： 100px + (-15px) + 0padding = 85px<br>
所以浮動元素的內側邊界會是在85px的位置，且沒有違反規則。是一個很有趣的特性<br>
<img src="https://i.imgur.com/hDiopOh.png" alt=""></p>
</li>
<li>
<p>浮動元素在行內方框(例如span)及區塊元素時的<strong>邊框、背景、內容</strong>的重疊情形</p>
<ul>
<li>行內方框：邊框、背景、內容都會在浮動元素<strong>之上</strong></li>
<li>區塊元素：邊框、背景會在浮動元素<strong>之下</strong>，但內容會在浮動元素<strong>之上</strong>。</li>
</ul>
<p><a href="https://codepen.io/kids5346/pen/GbyzBr?editors=1100">測試範例八</a><br>
<img src="https://i.imgur.com/fKjRMBs.png" alt=""></p>
</li>
</ol>
<h2 id="什麼是clear"><a class="header-anchor" href="#什麼是clear"></a>什麼是clear?</h2>
<p><strong>用於清除浮動的語法</strong>，在css2.1中引入了clearance，用來在上邊界加入空間並藉此將元素往下推超過浮動元素，達到清除浮動所造成的影響</p>
<h2 id="clear語法怎麼設定？"><a class="header-anchor" href="#clear語法怎麼設定？"></a>clear語法怎麼設定？</h2>
<table>
<thead>
<tr>
<th>語法</th>
<th>數值</th>
</tr>
</thead>
<tbody>
<tr>
<td>clear</td>
<td>left / right / none</td>
</tr>
</tbody>
</table>
<p>關於清除浮動的幾種方式，可參考這一篇 <a href="https://penghuachen.github.io/2019/06/16/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day20-float%E5%92%8C%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8B%95%E7%9A%84%E6%96%B9%E6%B3%95/">連續記錄挑戰Day20-float和清除浮動的方法</a></p>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>HTML/CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day34-position 定位</title>
    <url>/2019/06/30/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day34-position-%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<h1 id="定位-position"><a class="header-anchor" href="#定位-position"></a>定位 position</h1>
<p>Outline</p>
<ul>
<li>什麼是定位(position)？</li>
<li>定位(position)的語法設定</li>
<li>定位(position)的偏移(offset)</li>
<li>定位(position)的各語法定義
<ul>
<li>position:relative 相對定位</li>
<li>position:static</li>
<li>position:fixed 固定定位</li>
<li>position:absolute 絕對定位</li>
<li>position:sticky 黏貼定位</li>
<li>z-index</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h2 id="什麼是定位-position-？"><a class="header-anchor" href="#什麼是定位-position-？"></a>什麼是定位(position)？</h2>
<p>可以讓我們將元素輕易的放置在需求的位置上，是一個非常好用的技巧。</p>
<p>而定位的參考基準會依照語法設定的不同，其參考基準點也不同。</p>
<h2 id="定位-position-的語法設定"><a class="header-anchor" href="#定位-position-的語法設定"></a>定位(position)的語法設定</h2>
<table>
<thead>
<tr>
<th>語法</th>
<th>數值</th>
</tr>
</thead>
<tbody>
<tr>
<td>position</td>
<td>relative / absolute / static(Default) / sticky / fixed</td>
</tr>
<tr>
<td>offset</td>
<td>top / right / bottom / left</td>
</tr>
</tbody>
</table>
<h2 id="定位-position-的偏移-offset"><a class="header-anchor" href="#定位-position-的偏移-offset"></a>定位(position)的偏移(offset)</h2>
<p>先了解關於定位的補償，在對於後續語法的理解個人認為更能快速理解。</p>
<ul>
<li>
<p>偏移的用意？<br>
<strong>可以描述被定位元素的邊界和其對應的容器區塊的距離。</strong><br>
舉個例子： top表示<strong>被定位元素邊界範圍的上側邊與容器上側邊的距離</strong>，所以top為正值時，元素向下移動。</p>
<p><img src="https://i.imgur.com/76aoQLa.png" alt=""></p>
<p><a href="https://codepen.io/kids5346/pen/ewVBbb">測試範例一</a></p>
<p>而 其他方向的補償:right/ bottom / left 觀念同於 top的解說。</p>
</li>
</ul>
<h2 id="定位-position-的各語法定義"><a class="header-anchor" href="#定位-position-的各語法定義"></a>定位(position)的各語法定義</h2>
<h3 id="1-position-relative-相對定位"><a class="header-anchor" href="#1-position-relative-相對定位"></a>1.position:relative 相對定位</h3>
<p>做此設定時，元素會以<strong>目前自身所處的位置為參考基準</strong>，並透過偏移的設定移動相對的距離。<br>
<a href="https://codepen.io/kids5346/pen/ewVBbb">測試範例二</a></p>
<p><img src="https://i.imgur.com/9tTlySF.png" alt=""></p>
<h3 id="2-position-static"><a class="header-anchor" href="#2-position-static"></a>2. position:static</h3>
<p>元素會依照區塊元素及行內元素該有的文檔流向排序。不會有定位的效果，也是position的預設值。</p>
<h3 id="3-position-fixed-固定定位"><a class="header-anchor" href="#3-position-fixed-固定定位"></a>3. position:fixed 固定定位</h3>
<p>固定定位的元素，其參考基準為viewport，也就是<strong>相對瀏覽器視窗來定位。</strong><br>
<a href="https://codepen.io/kids5346/pen/ewVBbb">測試範例三</a></p>
<p><img src="https://i.imgur.com/jRNNGlk.png" alt=""></p>
<h3 id="4-position-absolute-絕對定位"><a class="header-anchor" href="#4-position-absolute-絕對定位"></a>4.position:absolute 絕對定位</h3>
<ul>
<li>
<p><strong>使元素脫離原本的文檔流向，並透過補償(offset)決定元素的位置</strong></p>
</li>
<li>
<p>絕對定位的元素和其他未被定位的內容並不會相互避開，因此會有這蓋其他元素的可能性。<br>
<a href="https://codepen.io/kids5346/pen/ewVBbb">測試範例四</a><br>
<img src="https://i.imgur.com/B4Rz4bg.png" alt=""></p>
</li>
<li>
<p>設定為絕對定位的元素，元素本身會成為其子元素的參考基準<br>
<a href="https://codepen.io/kids5346/pen/ewVBbb">測試範例五</a><br>
<img src="https://i.imgur.com/Kp7o3yC.png" alt=""></p>
</li>
<li>
<p>可以透過補償(offset)決定元素的寬高<br>
<a href="https://codepen.io/kids5346/pen/ewVBbb">測試範例六</a><br>
<img src="https://i.imgur.com/aQkQfFV.png" alt=""></p>
</li>
<li>
<p>當定位為fixed / absolute時的盒模型(box model)：<br>
<img src="https://i.imgur.com/0AfEbmY.png" alt=""><br>
<strong>由左至右的總寬度 = left + margin-left + border-left + padding-left + width + padding-right + border-right + margin-right + right</strong><br>
(詳細可以參考規範的此處：<a href="https://www.w3.org/TR/css-position-3/">8.1 The width of absolute or fixed positioned</a>)</p>
<p>而之所以margin能和絕對定位/固定定位搭配使用的緣故，是因為<strong>margin用於分配明確空間後的剩餘空間，而絕對定位/固定定位可達成確定明確空間的條件</strong>。<br>
<img src="https://i.imgur.com/0O0uQ4q.png" alt=""><br>
<a href="https://codepen.io/kids5346/pen/ewVBbb">測試範例七</a></p>
</li>
</ul>
<h3 id="5-position-sticky-黏貼定位"><a class="header-anchor" href="#5-position-sticky-黏貼定位"></a>5. position:sticky 黏貼定位</h3>
<ul>
<li>符合sticky觸發條件時：元素會被移除文檔流，行為如同絕對定位，<strong>但差異是會保留原本元素原本的位置</strong><br>
<img src="https://i.imgur.com/4GdJikA.png" alt=""></li>
<li>不符合sticky觸發條件時：元素回到原本的位置<br>
<img src="https://i.imgur.com/8dTkpSb.png" alt=""><br>
<a href="https://codepen.io/kids5346/pen/ewVBbb">測試範例八</a></li>
</ul>
<h3 id="6-z-index"><a class="header-anchor" href="#6-z-index"></a>6. z-index</h3>
<p>可以調整元素彼此重疊的情形。<strong>數字越大，順序越上面</strong><br>
<a href="https://codepen.io/kids5346/pen/ewVBbb">測試範例九</a></p>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>]]></content>
      <categories>
        <category>把玩Css</category>
      </categories>
      <tags>
        <tag>HTML/CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day35-Javascript-變數</title>
    <url>/2019/07/01/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day35-Javascript-%E8%AE%8A%E6%95%B8/</url>
    <content><![CDATA[<h1 id="JavaScript的變數、範疇與hoisting"><a class="header-anchor" href="#JavaScript的變數、範疇與hoisting"></a>JavaScript的變數、範疇與hoisting</h1>
<h2 id="變數"><a class="header-anchor" href="#變數"></a>變數</h2>
<p>關於變數這個部分會提到的是：</p>
<ol>
<li>變數是什麼?</li>
<li>變數的型別與介紹</li>
<li>ES6新的變數宣告方法: <code>let</code> 與 <code>const</code></li>
</ol>
<span id="more"></span>
<h3 id="什麼是變數"><a class="header-anchor" href="#什麼是變數"></a>什麼是變數 ?</h3>
<p>「變數」，可以想成是用來存放資料的箱子，透過這個箱子中儲存的值，才使程式在執行過程中不斷存取資料的行為得以執行。</p>
<p>變數的宣告方式在ES6之前只能透過<code>var</code>宣告，宣告方式如下:</p>
<p><strong>var 變數名稱 = 初始值;</strong></p>
<p><code>var number = 5;</code></p>
<p>如果你對於同一個變數宣告了兩次，<strong>則第二次的宣告值會覆蓋第一次的值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> number = <span class="number">15</span>;</span><br><span class="line"><span class="comment">//會得到值為15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number);</span><br></pre></td></tr></table></figure>
<p>那也許你會想問，是不是可以不要給予初始值呢？</p>
<p>答案是:當然可以。 所以下列這個寫法也是沒問題的:</p>
<p><strong>var 變數名稱;</strong></p>
<p><code>var number;</code></p>
<p>那又或許你會想問：那不宣告直接指定值可以嗎，如下:</p>
<p><code>msg = &quot;Hello World!&quot;</code></p>
<p>在Javascript中，如果沒有先宣告就指定值給變數，Javascript就會自動幫你宣告該變數。</p>
<p>但這樣可能會讓自己遇上些麻煩，所以請務必養成良好的習慣，<strong>使用變數前一定要記得宣告</strong>！</p>
<h4 id="變數的命名規則"><a class="header-anchor" href="#變數的命名規則"></a>變數的命名規則</h4>
<p>關於變數命名也是有其規則存在，必須按照這個規則設定才不會有問題</p>
<table>
<thead>
<tr>
<th>規則</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>開頭必須是英文字母、底線、錢字號</td>
<td><code>name</code>、<code>_name</code>、<code>$name</code></td>
</tr>
<tr>
<td>需要區分大小寫</td>
<td><code>Name</code>、<code>name</code></td>
</tr>
<tr>
<td>第二個字母後可以用數字、底線</td>
<td><code>msg1</code>、<code>msg_1</code></td>
</tr>
<tr>
<td>不能使用保留字</td>
<td><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Lexical_grammar#ECMAScript_2015_%E4%BF%9D%E7%95%99%E9%97%9C%E9%8D%B5%E5%AD%97">保留字一覽表</a></td>
</tr>
</tbody>
</table>
<h2 id="變數的型別與介紹"><a class="header-anchor" href="#變數的型別與介紹"></a>變數的型別與介紹</h2>
<p>變數分成兩大型別: 基本型別(primitive types)與物件型別(object types)</p>
<ul>
<li>基本型別 (primitive types)
<ul>
<li>數字(Number)</li>
<li>字串(String)</li>
<li>布林值(Boolean)</li>
<li>null</li>
<li>undefined</li>
</ul>
</li>
</ul>
<h4 id="基本型別-數字-Number"><a class="header-anchor" href="#基本型別-數字-Number"></a>基本型別:數字(Number)</h4>
<p>JavaScript中的數字都是以浮點數來表示，所有的實數在JavaSript都是以<strong>浮點數格式</strong>精確的表示。</p>
<p>JavaScript使用IEEE-754浮點表示法，為二元表示法。<strong>意即可以精確的表示1/2、1/8、1/1024這類小數，但對於0.1這類卻無法精確表示。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x= <span class="number">.3</span> - <span class="number">.2</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">.2</span> - <span class="number">.1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x == y); <span class="comment">// false，在JS中兩者不會得到相同答案</span></span><br></pre></td></tr></table></figure>
<p>而且當運算結果如果發生下列狀況，並不會有錯誤訊息。</p>
<table>
<thead>
<tr>
<th>運算結果</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>overflow(溢位)</td>
<td>Infinity(運算後的<strong>正值</strong>大於可表示的數字)</td>
</tr>
<tr>
<td>overflow(溢位)</td>
<td>-Infinity(運算後的<strong>負值</strong>大於可表示的數字)</td>
</tr>
<tr>
<td>underflow(下溢)</td>
<td>0 (運算後的值比最小可以表示的數字還要接近0時)</td>
</tr>
<tr>
<td>0/0</td>
<td>NaN(特殊的<strong>非數值</strong>)</td>
</tr>
<tr>
<td>Infinity/Infinity</td>
<td>NaN(特殊的<strong>非數值</strong>)</td>
</tr>
<tr>
<td>-Infinity/-Infinity</td>
<td>NaN(特殊的<strong>非數值</strong>)</td>
</tr>
</tbody>
</table>
<h4 id="NaN是什麼？"><a class="header-anchor" href="#NaN是什麼？"></a>NaN是什麼？</h4>
<p>NaN是Not-A-Number的意思，代表<strong>不是數值的數值</strong>。</p>
<p>夠抽象吧，什麼是<strong>不是數值的數值</strong>?我想也許只能透過例子來了解了。</p>
<p>首先，先確認一下NaN在JavaScript中是什麼型別？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">NaN</span>); <span class="comment">//型別為Number</span></span><br></pre></td></tr></table></figure>
<p>再來，我們測試看看在什麼情況會獲得NaN的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="number">1</span>)); <span class="comment">// 值為1，型別為Number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="string">&#x27;1&#x27;</span>)); <span class="comment">// 值為1，型別為Number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">// 值為NaN，型別為Number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="literal">undefined</span>)); <span class="comment">// 值為NaN，型別為Number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="number">0</span>/<span class="number">0</span>)); <span class="comment">// 值為NaN，型別為Number</span></span><br></pre></td></tr></table></figure>
<p>關於上面的測試結果，在MDN有這一敘述：</p>
<blockquote>
<p>NaN值的來源:NaN 會在算術運算（arithmetic operations）出現 undefined 或是 unrepresentable 值的結果時產生。這些值不一定是溢出條件。NaN 亦為試圖給毫無可用數字的原始值、予以強制運算之結果。<br>
<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/isNaN#NaN_%E5%80%BC%E7%9A%84%E4%BE%86%E6%BA%90">NaN 值的來源</a></p>
</blockquote>
<p>題外話，那有沒有辦法判斷輸入的值會不會得到NaN呢?</p>
<p>可以的，透過 <strong>Number.isNaN()</strong> 可以判斷，若回傳true，則表示值為NaN，否則為false。</p>
<p>將上面的測試例子透過Number.isNaN()檢視看看：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">Number</span>(<span class="number">1</span>))); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">isNaN</span>.(<span class="title class_">Number</span>(<span class="string">&#x27;1&#x27;</span>))); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">Number</span>(<span class="string">&#x27;abc&#x27;</span>))); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">Number</span>(<span class="literal">undefined</span>))); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">Number</span>(<span class="number">0</span>/<span class="number">0</span>))); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>終於到了最後一個關於NaN的特性，那就是<strong>NaN:與任何值都不相等，包含他自己本身。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//因為NaN與任何值都不相等，包含自己本身，所以當x!=x時，才會是true。</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x==<span class="title class_">NaN</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x!=x); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h4 id="基本型別-文字-String"><a class="header-anchor" href="#基本型別-文字-String"></a>基本型別:文字(String)</h4>
<p>文字型別其實蠻好理解的，我們可以透過單引號<code>''</code> 或者雙引號<code>&quot;&quot;</code>的方式讓值以字串格式呈現。</p>
<p><code>var str = 'Hello World'；</code></p>
<p><code>var str = &quot;Hello World&quot;；</code></p>
<p>至於什麼時候該用單引號或雙引號，則可以依照字串的狀況做選擇。</p>
<p>好比說字串的內容中已經有單引號，那就應該用雙引號包住字串</p>
<p><code>var str = &quot;He\'s hero!&quot;;</code></p>
<p>而且在上面的這個例子中有一個很明顯的 <code>\</code></p>
<p>之所以會用到的原因在於字串型別中有一些有意義的特殊字，如果不透過這樣子處理會有問題。</p>
<p>而透過 <strong><code>\</code>+字串</strong>的方式稱為跳脫序列</p>
<h4 id="基本型別-布林值-Boolean"><a class="header-anchor" href="#基本型別-布林值-Boolean"></a>基本型別:布林值(Boolean)</h4>
<ul>
<li>只有兩個值： <strong>true / false</strong></li>
<li>JavaScript中，任何值都可以轉為布林值。</li>
</ul>
<h4 id="基本型別-空值-null"><a class="header-anchor" href="#基本型別-空值-null"></a>基本型別:空值(null)</h4>
<p>用在表示<strong>沒有相對應的值</strong>，而有趣的點是，透過typeof(null)會得到它的<strong>錯誤型別為物件</strong>。</p>
<p>因為null才是正確型別，但許多網頁已經在這樣子的基礎上建立，所以如果修復的話會造成更多的bug。</p>
<h4 id="基本型別-未定義-undefined"><a class="header-anchor" href="#基本型別-未定義-undefined"></a>基本型別:未定義(undefined)</h4>
<p>用來表示某參數的值尚未被定義，有以下幾種情況:</p>
<ul>
<li>表示<strong>值不存在</strong>，但變數已經被宣告。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure>
<ul>
<li>使用物件未定義的屬性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Bill&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">hobbies</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>函式沒有回傳值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> result = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ary.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span>=&gt;</span>value*value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">result</span>(ary));</span><br></pre></td></tr></table></figure>
<h3 id="ES6新的變數宣告方法-let-與-const"><a class="header-anchor" href="#ES6新的變數宣告方法-let-與-const"></a>ES6新的變數宣告方法: let 與 const</h3>
<p>最後要提到的是ES6的新方法 let 與const，這兩個方法的出現，<strong>是為了更有效的控制變數的存取範圍</strong>。</p>
<p>而let、const的宣告方式與var無異，如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> number2 =<span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p><strong>但是這兩者都規定不能重複宣告變數，否則會有Identidier ‘XXX’ has already been declared的提示字樣</strong></p>
<p>而<code>const</code>的用途則又稍微有些不同，是用在<strong>常數的設定</strong>。</p>
<p>意思是，<strong>透過const宣告的值通常都有一個特殊意義的值，且這個值不會被更動。</strong></p>
<p>關於變數的介紹就到這邊為止囉！明天見～</p>
<h2 id="區塊範疇-block-scope-、函式範疇-function-scope"><a class="header-anchor" href="#區塊範疇-block-scope-、函式範疇-function-scope"></a>區塊範疇(block scope)、函式範疇(function scope)</h2>
<p>在了解什麼是區塊範疇(block scope)以及函式範疇(function scope)之前，要先知道什麼是範疇。</p>
<h3 id="範疇-scope"><a class="header-anchor" href="#範疇-scope"></a><strong>範疇(scope):</strong></h3>
<p>當我們在程式中引進變數時，我們必須給予這些變數<strong>一個安置它們的空間</strong>，如此一來我們才能在需要的時候將它們找出來使用。<strong>而範疇就是用來訂定安置變數的空間的規則</strong></p>
<h3 id="區域範疇"><a class="header-anchor" href="#區域範疇"></a>區域範疇</h3>
<p>區域範疇的定義是變數在 <code>&#123;...&#125;</code> 以外的地方為不可見的，只有在 <code>&#123;...&#125;</code> 裡面才可以使用到那些被宣告的變數。</p>
<h3 id="函式範疇"><a class="header-anchor" href="#函式範疇"></a>函式範疇</h3>
<p>函式範疇的定義是變數在 <code>function()&#123;...&#125;</code> 以外的地方為不可見，只有在函式中才可以使用那些被宣告的變數。</p>
<p><strong>JavaScript在ES6之前是透過 <code>var</code> 宣告變數，所以會建立以函式為範疇的變數。<br>
但在ES6之後可以透過 <code>let</code> / <code>const</code> 兩種新的變數宣告方法，建立以區塊為範疇的變數。</strong></p>
<p>Ex1. 函式範疇</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">scope</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> a =<span class="number">1</span>;</span><br><span class="line">  <span class="comment">//a=1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="keyword">let</span> b=<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span>(b&gt;<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="comment">//a = 1</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">scope</span>();</span><br><span class="line"><span class="comment">//a is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure>
<p>Ex2. 函式範疇2</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">scope</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> b=<span class="number">2</span>;</span><br><span class="line"> <span class="keyword">if</span>(b&gt;<span class="number">1</span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">let</span> c = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//a=2，因為var的宣告方式，讓變數使用的範疇規則為函式範疇，所以即使寫在if條件句中，也一樣可得到值。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="comment">//c is not defined。 let的宣告方式讓c只在if條件句中可見，所以在這裡得不到值。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">scope</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Ex3. <code>let</code> / <code>const</code> : 只在本身定義的區塊 <code>&#123;...&#125;</code> 中有效</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(foo)&#123;</span><br><span class="line"><span class="comment">//bar只在&#123;...&#125;的區塊有效，所以bar只在if條件句中可見</span></span><br><span class="line">  <span class="keyword">let</span> bar = foo*<span class="number">2</span>;</span><br><span class="line">  bar = <span class="title function_">something</span>(bar);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(bar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ReferenceError</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar); </span><br></pre></td></tr></table></figure>
<h2 id="提升-hoisting"><a class="header-anchor" href="#提升-hoisting"></a>提升(hoisting)</h2>
<ul>
<li>JavaScript環境建立時，會<strong>先將所有的變數、函數先存入記憶體位址中（但這過程並不包含指定給它們的值，其值會在原地等待被執行）</strong>，而這個會<strong>將宣告的變數、函式從原本撰寫的位置提升到程式碼最上端的行為也稱為hoisting</strong>。</li>
</ul>
<p>Ex. 變數的hoisting</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*透過console獲得a的值會得到 &#x27;undefined&#x27; 而非 &#x27;a is not defined&#x27; */</span></span><br><span class="line"><span class="comment">/*這裡就是因為hoisting的關係，變數a在一開始就被存入記憶體(但不包含值)，所以會是得到undefined(表示值不存在，但變數已經被宣告)。*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    執行過程等同：</span></span><br><span class="line"><span class="comment">    var a;</span></span><br><span class="line"><span class="comment">    console.log(a);</span></span><br><span class="line"><span class="comment">    a = 3;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p>Ex2. 函式的hoisting</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*觀念同於變數，會先將函式名稱存入記憶體中，所以當console時可以得到值。*/</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>());</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Ex3. 函式裡面的變數</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*函式中的變數會hoisting到函式區塊的最上層(因為JS函式範疇的規範，所以不會跑出function scope)*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<div style="text-align:center;font-weight:bold;">力圖在這個世界上找尋可留下的感動，並用著文字扎實的記錄著。</div>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day36-Javascript-運算式與運算子</title>
    <url>/2019/07/02/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day36-Javascript-%E9%81%8B%E7%AE%97%E5%BC%8F%E8%88%87%E9%81%8B%E7%AE%97%E5%AD%90/</url>
    <content><![CDATA[<h1 id="運算式與運算子"><a class="header-anchor" href="#運算式與運算子"></a>運算式與運算子</h1>
<p>Javascript直譯器可以透過計算運算式產生一個結果值，而複雜的運算式則是由運算子建構而成。</p>
<span id="more"></span>
<p>Outline</p>
<ul>
<li>運算式
<ul>
<li>基本運算式</li>
<li>物件與陣列的初值設定式 (概觀)</li>
<li>函式運算式 (概觀)</li>
<li>特性存取運算式 (概觀)</li>
<li>調用運算式 (概觀)</li>
<li>物件創建運算式(概觀)</li>
<li>算術運算式</li>
<li>關係運算式</li>
<li>邏輯運算式</li>
</ul>
</li>
</ul>
<h2 id="運算式"><a class="header-anchor" href="#運算式"></a>運算式</h2>
<h3 id="基本運算式"><a class="header-anchor" href="#基本運算式"></a>基本運算式</h3>
<p>包括：常數(constant)或字面值(literal value)、保留字、變數參考</p>
<ul>
<li>常數(constant)或字面值(literal value): 1.23 / “hello world”</li>
<li>語言關鍵字:
<ul>
<li>true / false 結果值為布林值的 true / false值</li>
<li>null 結果值為 null</li>
<li>this 結果值為物件</li>
</ul>
</li>
<li>變數參考:
<ul>
<li>undefined</li>
<li>sum (結果值為sum的值)</li>
</ul>
</li>
</ul>
<h3 id="物件與陣列的初值設定式-概觀"><a class="header-anchor" href="#物件與陣列的初值設定式-概觀"></a>物件與陣列的初值設定式(概觀)</h3>
<p>物件與陣列的初值設定式是一種運算式，其結果值為新創建的物件或陣列。</p>
<h3 id="函式運算式-概觀"><a class="header-anchor" href="#函式運算式-概觀"></a>函式運算式(概觀)</h3>
<p>運算值為定義的函式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> square = <span class="keyword">function</span>(<span class="params">x</span>)&#123;<span class="keyword">return</span> x*x;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="特性存取運算式-概觀"><a class="header-anchor" href="#特性存取運算式-概觀"></a>特性存取運算式(概觀)</h3>
<p>運算值為物件的特性值或者陣列的元素值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">x</span>:<span class="number">1</span>,<span class="attr">y</span>:&#123;<span class="attr">Z</span>:<span class="number">3</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">var</span> a - [o,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="property">x</span>) <span class="comment">// 運算式o的特性x</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[<span class="number">0</span>].<span class="property">x</span>) <span class="comment">// 運算式a[0]的特性x</span></span><br></pre></td></tr></table></figure>
<h3 id="調用運算式-概觀"><a class="header-anchor" href="#調用運算式-概觀"></a>調用運算式(概觀)</h3>
<ul>
<li>Javascript用來呼叫(調用)函式或方法的語法。</li>
<li>如果呼叫(調用)的是特性存取運算式，則稱為呼叫(調用)了物件的<strong>方法</strong></li>
</ul>
<h3 id="物件創建運算式"><a class="header-anchor" href="#物件創建運算式"></a>物件創建運算式</h3>
<p>透過 new 語法建立新物件，也稱為<strong>建構式</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title function_">point</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<h3 id="算術運算式"><a class="header-anchor" href="#算術運算式"></a>算術運算式</h3>
<ul>
<li>
<p>運算子的權重 : <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">運算子優先序</a><br>
Ex:加減乘除中，其運算子的權重為-&gt;加(13)減(13)乘(14)除(14)，所以處理的優先順序為 <strong>先乘除，後加減</strong>。</p>
</li>
<li>
<p>關於 + 運算子</p>
<ol>
<li>讓字串串接有較高的優先序，<strong>只要有任一個值為字串，或者可以轉換為字串，那麼另一個值就型別就會轉為字串</strong><br>
Ex:</li>
</ol>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//小細節： google 開發者工具下的數字為藍色，而文字為黑色，可以幫助判別</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>+<span class="number">2</span>); <span class="comment">// &#x27;12&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + &#123;&#125;); <span class="comment">// 1[object object]</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="關係運算式"><a class="header-anchor" href="#關係運算式"></a>關係運算式</h3>
<p>用於檢查值與值之間的關係，並回傳 true / false。</p>
<ul>
<li>相等性運算子 ==
<ul>
<li><strong>允許在型別轉換、較寬鬆的同等性定義下檢查</strong>兩個值是否相等。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>==的檢查模式</th>
<th>檢查兩個值的關係</th>
</tr>
</thead>
<tbody>
<tr>
<td>一個為null、一個為undefined</td>
<td>相等</td>
</tr>
<tr>
<td>值為true</td>
<td>轉為1後比較</td>
</tr>
<tr>
<td>值為false</td>
<td>轉為0後比較</td>
</tr>
<tr>
<td>一個為字串、一個為數字</td>
<td>型轉後若值相同則相等</td>
</tr>
</tbody>
</table>
<ul>
<li>嚴格相等性運算子 ===
<ul>
<li><strong>不允許型別轉換，並用嚴格的同等性定義檢查。</strong></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>===的檢查模式</th>
<th>檢查兩個值的關係</th>
</tr>
</thead>
<tbody>
<tr>
<td>型別都不同</td>
<td>不相等</td>
</tr>
<tr>
<td>兩者都是NaN、單一個NaN</td>
<td>都不相等</td>
</tr>
<tr>
<td>兩者都是null</td>
<td>相等</td>
</tr>
<tr>
<td>兩者都是undefined</td>
<td>相等</td>
</tr>
<tr>
<td>兩者都是true</td>
<td>相等</td>
</tr>
<tr>
<td>兩者都是false</td>
<td>相等</td>
</tr>
<tr>
<td>0和-0</td>
<td>相等</td>
</tr>
<tr>
<td>兩者參考到同一個物件</td>
<td>相等</td>
</tr>
</tbody>
</table>
<h3 id="邏輯運算式"><a class="header-anchor" href="#邏輯運算式"></a>邏輯運算式</h3>
<ul>
<li>AND &amp;&amp; : 條件需要都為true時，才會是true</li>
<li>OR || : <strong>由左至右判斷，當任一條件</strong>為true時即為true</li>
<li>NOT ! : 反轉布林值</li>
</ul>
<h2 id="額外的練習："><a class="header-anchor" href="#額外的練習："></a>額外的練習：</h2>
<ol>
<li>Ex1 null / ‘’ / undefined</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> c= <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!a)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(a);&#125; <span class="comment">// false才會顯示空值</span></span><br><span class="line"><span class="keyword">if</span>(!b)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(b);&#125; <span class="comment">//false才會顯示undefined</span></span><br><span class="line"><span class="keyword">if</span>(!b)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(b);&#125;<span class="comment">// false才會顯示undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> === <span class="literal">undefined</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="string">&#x27; &#x27;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> == <span class="string">&#x27; &#x27;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Ex2 Number.isNaN(NaN)</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// MDN</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>);        <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">Number</span>.<span class="property">NaN</span>); <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="number">0</span> / <span class="number">0</span>)       <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="literal">undefined</span>);  <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(&#123;&#125;);         <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&quot;blabla&quot;</span>);   <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的都返回 false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="number">37</span>);</span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&quot;37&quot;</span>);</span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&quot;37.37&quot;</span>);</span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&quot; &quot;</span>);</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>Ex3. 字串與數字執行四則運算時。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span> + <span class="number">2</span>); <span class="comment">//&quot;12&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span> - <span class="number">2</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span> * <span class="number">2</span>); <span class="comment">// 6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>Ex4. 字串與數字的相等性</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span> == <span class="number">1</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span> === <span class="number">1</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day37-Javascript-述句-part1</title>
    <url>/2019/07/03/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day37-Javascript-%E8%BF%B0%E5%8F%A5-part1/</url>
    <content><![CDATA[<h1 id="述句-statements-part1"><a class="header-anchor" href="#述句-statements-part1"></a>述句(statements) part1</h1>
<p>述句(statements)就像是js的句子。</p>
<p>當述句被執行時，會執行句中的設定，使得某些事情發生。</p>
<span id="more"></span>
<p>Outline:</p>
<ul>
<li>宣告述句
<ul>
<li>var</li>
<li>function</li>
</ul>
</li>
<li>條件句
<ul>
<li>if</li>
<li>switch</li>
</ul>
</li>
<li>迴圈
<ul>
<li>while</li>
<li>do/while</li>
<li>for</li>
</ul>
</li>
</ul>
<h2 id="宣告述句"><a class="header-anchor" href="#宣告述句"></a>宣告述句</h2>
<h3 id="var"><a class="header-anchor" href="#var"></a>var</h3>
<p>宣告一組變數或一個變數。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>,</span><br><span class="line">    c = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> x*x;&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="function"><a class="header-anchor" href="#function"></a>function</h3>
<p>function關鍵字來用定義函式，而且有三種建立函式的方式：</p>
<ul>
<li>
<p>函數宣告式 (這裡指的函式宣告述句)</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">x</span>)&#123;<span class="keyword">return</span> x*x;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>函數運算式</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//這裡的函式也稱為匿名函式</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">function</span>(<span class="params">x</span>)&#123;<span class="keyword">return</span> x*x;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//這裡的函式也可以有名稱</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">function</span> <span class="title function_">own</span>(<span class="params">x</span>)&#123;<span class="keyword">return</span> x*x;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>透過 new Function關鍵字建立</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意F大寫，且此方法會產生一個新的Function物件。</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;return x*x&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="條件句"><a class="header-anchor" href="#條件句"></a>條件句</h2>
<h3 id="if-條件句"><a class="header-anchor" href="#if-條件句"></a>if 條件句</h3>
<ul>
<li>if</li>
<li>if-else</li>
<li>if-elseif-else</li>
</ul>
<p>透過設定的條件，當條件為true時執行對應的內容，否則執行條件為false中的內容。</p>
<p>缺點:if條件句會將值帶入所有條件中進行判斷，直到符合條件後停止。</p>
<p>Ex1: if條件句</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*題目：當數字大於20時，顯示:「你輸入的數字大於20」*/</span></span><br><span class="line"><span class="comment">/*備註:因為沒有設定條件為false的內容，所以當數字小於20時不會有任何顯示。*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> number = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">if</span>(number &gt;<span class="number">20</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你輸入的數字大於20&#x27;</span>);&#125;</span><br></pre></td></tr></table></figure>
<p>Ex2: if-else條件句</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*題目：當數字大於20時，顯示:「你輸入的數字大於20」，否則顯示「你輸入的數字小於20」*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> number = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">if</span>(number &gt; <span class="number">20</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你輸入的數字大於20&#x27;</span>);&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你輸入的數字小於20&#x27;</span>);&#125;</span><br></pre></td></tr></table></figure>
<p>Ex2: if-elseif-else條件句</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*題目：當數字小於20時，顯示:「你輸入的數字小於20」，當數字大於20且小於50時，顯示:「你輸入的數字介於20~50之間」，否則顯示「你輸入的數字大於50」*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> number = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">if</span>(number &lt; <span class="number">20</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你輸入的數字小於20&#x27;</span>);&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(number &gt; <span class="number">20</span> &amp;&amp; number &lt; <span class="number">50</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你輸入的數字介於20~50之間&#x27;</span>);&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你輸入的數字大於50&#x27;</span>);&#125;</span><br></pre></td></tr></table></figure>
<h3 id="switch-條件句"><a class="header-anchor" href="#switch-條件句"></a>switch 條件句</h3>
<ul>
<li>
<p>語法:</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    statement</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>switch會透過expression與<em>case標籤後面的運算式判斷是否符合(使用===判斷)</em>，才執行條件中的內容。</strong></p>
</li>
<li>
<p>如果<strong>完全不符合條件，則找default的條件式執行</strong>，然而如果沒有default，則跳出switch程式碼。</p>
</li>
<li>
<p>ECMAScript標準允許每個case後面可以是任意運算式，但使用switch最好的方式還是將case後的運算式限制為<strong>常數運算式</strong>。</p>
</li>
</ul>
<p>Ex1:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*swtich會透過expression與case標籤的運算值比較(使用===判斷)獲得符合條件的值*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*判斷輸入的顏色為何，顯示對應的文字*/</span></span><br><span class="line"><span class="keyword">var</span> color = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line"><span class="keyword">switch</span>(color)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;red&#x27;</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;輸入為red&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;blue&#x27;</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;輸入為blue&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;沒有符合的選項&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Ex2:實現和if條件式相同的判斷方式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  題目：當數字小於20時，顯示:「你輸入的數字小於20」，</span></span><br><span class="line"><span class="comment">  當數字大於20且小於50時，顯示:「你輸入的數字介於20~50之間」，否則顯示「你輸入的數字大於50」    </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  1.將switch的expression設定為true時，會與case中的運算式比較。</span></span><br><span class="line"><span class="comment">  2.case後面的運算式會得到為true/false並找出與expression匹配的條件。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> number = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">switch</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> number &lt; <span class="number">20</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你輸入的數字小於20&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> number &gt; <span class="number">20</span> &amp;&amp; number &lt; <span class="number">50</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你輸入的數字介於20~50之間&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> number &gt; <span class="number">50</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你輸入的數字大於50&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="迴圈"><a class="header-anchor" href="#迴圈"></a>迴圈</h2>
<p>透過條件的限定，當條件符合時，重複執行某段程式碼。</p>
<h3 id="while"><a class="header-anchor" href="#while"></a>while</h3>
<p>條件符合時會執行迴圈中的內容</p>
<ul>
<li>
<p>語法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//當expression為true時，執行statement</span></span><br><span class="line"><span class="comment">//statement中一定要有個會隨著每次執行時而改變的變數，不然會造成無窮迴圈</span></span><br><span class="line"><span class="keyword">while</span>(expression)&#123;</span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<p>Ex1:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*當b=5時，跳出while迴圈*/</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(b&lt;<span class="number">5</span>)&#123;</span><br><span class="line"><span class="comment">/*b 隨著每次執行時而改變，不然會造成無窮迴圈*/</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    b++;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="do-while"><a class="header-anchor" href="#do-while"></a>do/while</h3>
<p>程式碼會先執行一次後在依照條件判斷是否要繼續執行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 先執行一次console.log(b)後在依照條件判斷下次是否執行*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    b++;</span><br><span class="line">&#125;<span class="keyword">while</span>(b&lt;<span class="number">1</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="for"><a class="header-anchor" href="#for"></a>for</h3>
<p>條件符合時會執行迴圈中的內容</p>
<ul>
<li>語法：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    initialize:初始化值，是個述句</span></span><br><span class="line"><span class="comment">    condition : 條件判斷</span></span><br><span class="line"><span class="comment">    increment: initialize變數的增量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(initialize;condition;increment)&#123;</span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Ex:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day38-Javascript-述句-part2</title>
    <url>/2019/07/04/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day38-Javascript-%E8%BF%B0%E5%8F%A5-part2/</url>
    <content><![CDATA[<h1 id="述句-statements-part2"><a class="header-anchor" href="#述句-statements-part2"></a>述句(statements) part2</h1>
<p>Outline:</p>
<ul>
<li>宣告述句
<ul>
<li>var</li>
<li>function</li>
</ul>
</li>
<li>條件句
<ul>
<li>if</li>
<li>switch</li>
</ul>
</li>
<li>迴圈
<ul>
<li>while</li>
<li>do/while</li>
<li>for</li>
<li>for/in</li>
</ul>
</li>
<li>跳躍句
<ul>
<li>break</li>
<li>continue</li>
<li>return</li>
<li>throw</li>
<li>try/catch/finally</li>
</ul>
</li>
<li>其他述句
<ul>
<li>with</li>
<li>debugger</li>
<li>‘use strict’</li>
</ul>
</li>
</ul>
<span id="more"></span> 
<h2 id="迴圈"><a class="header-anchor" href="#迴圈"></a>迴圈</h2>
<p>透過條件的限定，當條件符合時，重複執行某段程式碼。</p>
<h3 id="while"><a class="header-anchor" href="#while"></a>while</h3>
<p>條件符合時會執行迴圈中的內容</p>
<ul>
<li>
<p>語法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//當expression為true時，執行statement</span></span><br><span class="line"><span class="comment">//statement中一定要有個會隨著每次執行時而改變的變數，不然會造成無窮迴圈</span></span><br><span class="line"><span class="keyword">while</span>(expression)&#123;</span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<p>Ex1:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*當b=5時，跳出while迴圈*/</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(b&lt;<span class="number">5</span>)&#123;</span><br><span class="line"><span class="comment">/*b 隨著每次執行時而改變，不然會造成無窮迴圈*/</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    b++;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="do-while"><a class="header-anchor" href="#do-while"></a>do/while</h3>
<p>程式碼會先執行一次後在依照條件判斷是否要繼續執行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 先執行一次console.log(b)後在依照條件判斷下次是否執行*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    b++;</span><br><span class="line">&#125;<span class="keyword">while</span>(b&lt;<span class="number">1</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="for"><a class="header-anchor" href="#for"></a>for</h3>
<p>條件符合時會執行迴圈中的內容</p>
<ul>
<li>語法：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    initialize:初始化值，是個述句</span></span><br><span class="line"><span class="comment">    condition : 條件判斷</span></span><br><span class="line"><span class="comment">    increment: initialize變數的增量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(initialize;condition;increment)&#123;</span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Ex:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="for-in"><a class="header-anchor" href="#for-in"></a>for/in</h3>
<p>可以用於走訪陣列與物件屬性</p>
<ul>
<li>語法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(variable <span class="keyword">in</span> object)&#123;</span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Ex1: 走訪物件屬性，並取得物件屬性值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> x =&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>,<span class="attr">d</span>:&#123;<span class="attr">e</span>:<span class="number">1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(o <span class="keyword">in</span> x)&#123;</span><br><span class="line">    <span class="comment">//1,2,3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x[o]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Ex2: 走訪陣列，並取得陣列值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,&#123;<span class="attr">c</span>:<span class="number">1</span>&#125;,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(o <span class="keyword">in</span> a)&#123;</span><br><span class="line">    <span class="comment">//1,2,4,&#123;c:1&#125;,5</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a[o]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="跳躍句"><a class="header-anchor" href="#跳躍句"></a>跳躍句</h2>
<h3 id="break"><a class="header-anchor" href="#break"></a>break</h3>
<p>作用是跳離switch或迴圈(當迴圈沒必要完全執行完成時)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; a.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i] == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;找到目標數字:2，跳離&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="continue"><a class="header-anchor" href="#continue"></a>continue</h3>
<p>類似break，但break是跳離迴圈，而<strong>continue會中斷不符合條件的部分，並往下繼續執行</strong></p>
<p>Ex1:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (data[i] == <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">  <span class="comment">// 1,2,4</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="return"><a class="header-anchor" href="#return"></a>return</h3>
<ul>
<li>只能出現在函式中</li>
<li>使用時會回傳運算式的值給caller</li>
<li>在函式中任意位置都可以使用return，但要注意的是，當程式碼執行到return處就會回到呼叫者處。</li>
<li>可以用於中斷函式的進行。</li>
</ul>
<p>Ex:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">square</span>(<span class="params">x</span>)&#123;<span class="keyword">return</span> x*x;&#125;</span><br><span class="line"><span class="keyword">var</span> answer = <span class="title function_">square</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(answer);</span><br></pre></td></tr></table></figure>
<p>Ex: 中斷函式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只會顯示數字9，函式被中斷</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">square</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x*x;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;測試在return後能不能顯示&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> answer = <span class="title function_">square</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(answer);</span><br></pre></td></tr></table></figure>
<h3 id="throw"><a class="header-anchor" href="#throw"></a>throw</h3>
<p>當成是發生錯誤時，可以透過建立一個新的Error物件將相關錯誤訊息顯示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//透過Error將儲存相關錯誤訊息並顯示</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;不能是負值！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(-<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day41-物件-Object-part1</title>
    <url>/2019/07/07/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day41-%E7%89%A9%E4%BB%B6-Object-part1/</url>
    <content><![CDATA[<h1 id="物件-object"><a class="header-anchor" href="#物件-object"></a>物件(object)</h1>
<p>今天要學習的是物件(Object)，事不宜遲，開始學習吧！</p>
<span id="more"></span>
<h2 id="物件的特性與存取"><a class="header-anchor" href="#物件的特性與存取"></a>物件的特性與存取</h2>
<p>在物件中，每個特性都有一組對應的名稱(key)與值(value)，如下式程式碼的 <strong>name</strong> 與 <strong>Bill</strong>。</p>
<p>要注意的是<mark>物件中的特性並不是用<code>;</code>的方式區隔，而會以<code>,</code>的隔開每個特性。</mark></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// name為名稱，而Bill為值。</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span>,</span><br><span class="line">    <span class="attr">habbit</span>: <span class="string">&#x27;play computer&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>對於物件特性的取值方式則有兩種:</p>
<ul>
<li>透過 <code>.</code>的 <mark>特性存取</mark></li>
<li>透過<code>[&quot;&quot;]</code>的<mark>鍵值存取</mark></li>
</ul>
<p>Ex:透過 <code>.</code> 的方式<strong>取值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span>,</span><br><span class="line">    <span class="attr">habbit</span>: <span class="string">&#x27;play computer&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);</span><br></pre></td></tr></table></figure>
<p>Ex2:透過 <code>[&quot;&quot;]</code> 的方式<strong>取值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span>,</span><br><span class="line">    <span class="attr">habbit</span>: <span class="string">&#x27;play computer&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&quot;habbit&quot;</span>]);</span><br></pre></td></tr></table></figure>
<p>而存值的方式也不困難，如下:</p>
<p>Ex:透過 <code>.</code> 的方式<strong>存值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;Bill&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>
<p>Ex2:透過 <code>[&quot;&quot;]</code> 的方式<strong>存值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj[<span class="string">&quot;habbit&quot;</span>] = <span class="string">&#x27;play computer&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>
<h2 id="物件的方法"><a class="header-anchor" href="#物件的方法"></a>物件的方法</h2>
<p>用比較簡單的方式來講，就是<mark>在物件中使用函式(function)，就稱為使用物件的方法。</mark></p>
<p>Ex: 調用obj物件的方法 <code>sayHi()</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Bill&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHi</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello! <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure>
<p>關於物件的基本運用大概就到這裡囉，再來要提到關於物件比較深入的部份。</p>
<h2 id="原型-prototype-與原型鏈-prototype-chain"><a class="header-anchor" href="#原型-prototype-與原型鏈-prototype-chain"></a>原型(prototype)與原型鏈(prototype chain)</h2>
<p>所有的物件都有原型屬性(prototype)，而這個屬性參考到一個proto的物件。</p>
<p>來看看某個物件的原型物件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/lr6E9CG.png" alt=""></p>
<p>從上圖可以看到剛剛所提到的，proto這個物件。</p>
<p>再來讓我們透過例子理解<mark>原型鏈</mark>的概念:</p>
<p>這邊要注意的是這樣的寫法只適用於測試，實務運用會導致<mark>瀏覽器效能降低</mark>。</p>
<p>Ex. 透過 <code>__proto__</code> 將 <code>obj</code> 物件做為原型物件 assign(指定給) <code>obj2</code> 物件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">obj2.<span class="property">__proto__</span> = obj;</span><br><span class="line">obj2.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure>
<p>在 <code>obj</code> 原型鏈搜尋sayHi()方法的過程如下:</p>
<ol>
<li><code>obj2</code> 物件在自己的特性找不到 <code>sayHi</code> 這個方法時，會往原型物件中尋找該方法</li>
<li>發現在下一層的原型物件中找到 <code>sayHi</code> 這個方法(因為剛剛已經將 <code>obj</code> 物件當作原型物件傳給obj2)</li>
<li><code>obj2</code> 使用 <code>sayHi</code> 這個方法並回傳Hello</li>
</ol>
<p>之所以能夠不斷<mark>往原型物件尋找特性</mark>，就是因為<mark>原型鏈(prtotype chain)的概念</mark>。</p>
<p>就像是一條鏈子串接著， 一個物件連接著一個物件。</p>
<p>以上面的例子而言，可以得到這樣子的圖:</p>
<p><img src="https://i.imgur.com/heJtAMR.png" alt=""></p>
<p>那如果當原型物件與物件自身都有同樣的屬性時，會是得到怎麼樣的結果呢?</p>
<p>以這個例子來說明:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&quot;Bill&quot;</span>,</span><br><span class="line">  <span class="attr">sayHi</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2  = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&quot;John&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">name</span>);</span><br></pre></td></tr></table></figure>
<p>可以發現獲得的值是 <code>obj2</code> 特性 <code>name</code> 的值 John。所以可以知道:</p>
<p><mark>物件會由原型鏈最上方開始尋找，當符合條件時就停止，所以會找到John的名字而不是Bill這個名字</mark></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day40-提高效率的一些工具及技巧</title>
    <url>/2019/07/06/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day40-%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7%E5%8F%8A%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="提高效率的一些工具及技巧"><a class="header-anchor" href="#提高效率的一些工具及技巧"></a>提高效率的一些工具及技巧</h1>
<p>關於寫程式以外的一些工具，如果我們可以妥善的運用，對於整體的開發效率也會有相輔相成的效果！而底下是我目前會用的一些小工具</p>
<span id="more"></span>
<h2 id="Marinara-Pomodoro®-Assistant-br-google-應用程式商店"><a class="header-anchor" href="#Marinara-Pomodoro®-Assistant-br-google-應用程式商店"></a>Marinara: Pomodoro® Assistant <br/>(google 應用程式商店)</h2>
<p><img src="https://i.imgur.com/BDQ4uD1.png" alt=""></p>
<h2 id="什麼是番茄鐘工作法？"><a class="header-anchor" href="#什麼是番茄鐘工作法？"></a>什麼是番茄鐘工作法？</h2>
<p>關於蕃茄鐘的詳細解說，可以看看: <a href="https://zh.wikipedia.org/wiki/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95">維基百科-番茄工作法</a></p>
<p>不過作法就是： <strong>以25分鐘為一個單位，並專注於當前任務，並用五分鐘時間專心休息，重複循環。</strong></p>
<p>個人覺得如果無法時常保持專心的話，也許可以透過這個方法培養專注力。</p>
<h2 id="Life-Is-Too-Short-br-google-應用程式商店"><a class="header-anchor" href="#Life-Is-Too-Short-br-google-應用程式商店"></a>Life Is Too Short <br/>(google 應用程式商店)</h2>
<p><img src="https://i.imgur.com/pvXL1P3.png" alt=""></p>
<p><img src="https://i.imgur.com/jUznfBP.png" alt=""></p>
<p>透過倒數計時的呈現方式，可以自己看到距離55歲還有多久，還有每個月的剩餘時間。</p>
<h2 id="AdBlock-google-應用程式商店"><a class="header-anchor" href="#AdBlock-google-應用程式商店"></a>AdBlock (google 應用程式商店)</h2>
<p><img src="https://i.imgur.com/ibJYwdX.png" alt=""></p>
<p>關於這個工具應該蠻常使用的，可以在很多時候幫我們擋掉一些廣告，也省了很多等待的秒數，無形中也是一種累積。</p>
<h2 id="waka-time"><a class="header-anchor" href="#waka-time"></a>waka time!</h2>
<p><img src="https://i.imgur.com/3rQT4zs.png" alt=""></p>
<p><a href="https://wakatime.com/">https://wakatime.com/</a></p>
<p>用來追蹤自己平常在每個專案中使用的程式語言和所花費的時間，也可以紀錄整週的狀況。</p>
<h2 id="如何使用wakatime"><a class="header-anchor" href="#如何使用wakatime"></a>如何使用wakatime</h2>
<ol>
<li>透過自己的IDE安裝</li>
</ol>
<p><img src="https://i.imgur.com/D43QIKv.png" alt=""></p>
<ol start="2">
<li>
<p>安裝後會要求要輸入一組 key，而這組key要先申請wakatime的帳號(或透過github登入也可以)，再將key輸入即可。</p>
</li>
<li>
<p>setting -&gt; account -&gt;即可看到需要的key<br>
<img src="https://i.imgur.com/GM3Wcpk.png" alt=""></p>
</li>
<li>
<p>透過dashboard可以查看相關數據</p>
</li>
</ol>
<p><img src="https://i.imgur.com/eA8N6J1.png" alt=""></p>
<p>更多的操作就留給大家去玩玩看囉！</p>
<h2 id="skitch"><a class="header-anchor" href="#skitch"></a>skitch</h2>
<p><img src="https://i.imgur.com/h4gcey3.png" alt=""></p>
<p>是evernote的抓圖工具，可以快速截圖並做一些簡單註解。</p>
<p>而檔案在很多地方都可以使用，對於做筆記來說是一大福音！</p>
<p>但可惜的是目前只剩 Mac 才能使用。</p>
<p><img src="https://i.imgur.com/lToBTgt.png" alt=""></p>
]]></content>
      <categories>
        <category>工具程式</category>
      </categories>
      <tags>
        <tag>工具程式、提高開發效率</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day42-物件-Object-part2</title>
    <url>/2019/07/08/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day42-%E7%89%A9%E4%BB%B6-Object-part2/</url>
    <content><![CDATA[<h1 id="Object-方法"><a class="header-anchor" href="#Object-方法"></a>Object 方法</h1>
<p>這個部分要來學習的是關於 Object 的一些方法，那就開始吧！</p>
<span id="more"></span>
<h2 id="建立原型物件"><a class="header-anchor" href="#建立原型物件"></a>建立原型物件</h2>
<blockquote>
<p>MDN: <code>Object.create()</code>: 指定其原型物件與屬性，創建一個新物件。</p>
</blockquote>
<p>意思是<mark>我們可以透過這個語法 assign(指定) 一個新物件的原型物件，然後建立新物件。</mark></p>
<p>而透過 <code>Object.create</code> 將原型物件 assign(指定) 給一個新的物件，也稱為 <mark>原型繼承</mark></p>
<p>以下面這個例子來說：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;Bill&#x27;</span>,</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj);</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/66xh9hc.png" alt=""></p>
<p>透過上面這個圖可以知道，<mark>obj已經被當作newObj這個物件的原型物件，而且newObj也被建立</mark>。</p>
<p>但對於比較舊的瀏覽器而言， <code>Object.create</code> 也許是無法使用的，所以就必須透過其他方式解決。</p>
<p>而這個<mark>透過某段程式因應瀏覽器不支援的情況稱為<code>polyfill</code></mark></p>
<p>在 Understanding the weird parts 中對於因應這樣子的情況有著下列這段程式碼:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title class_">Object</span>.<span class="property">create</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="property">create</span> = <span class="keyword">function</span> (<span class="params">o</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Object.create implementation only accepts the first parameter&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span> = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>當瀏覽器不支援Object.create時，會符合條件判斷句並執行內容，而上述程式碼中的這段:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">F.<span class="property"><span class="keyword">prototype</span></span> = o;</span><br></pre></td></tr></table></figure>
<p><mark>就是透過建構式建立物件，達到跟Object.create一樣的用途</mark></p>
<h2 id="定義物件的特性"><a class="header-anchor" href="#定義物件的特性"></a>定義物件的特性</h2>
<p><mark>Object.defineProperty()</mark></p>
<p>用在定義某個物件的特性和值，而且可以決定是否 <strong>可寫入(writable)</strong>、<strong>可配置(configurable)<strong>及</strong>可列舉(enumerable)</strong>。</p>
<p>關於 <strong>可寫入(writable)、可配置(configurable)及可列舉(enumerable)</strong> 則需要說明一下:</p>
<ol>
<li>可寫入(writable): 決定是否能變更一個特性的值</li>
<li>可配置(configurable): 決定該特性能不能被刪除或修改，但有些情形需要注意:</li>
</ol>
<ul>
<li>可配置但不可寫入:可以更改特性的值</li>
<li>不可配置不可寫入: 無法更改特性的值</li>
<li>設定不可配置:不能將 <code>writable</code> 從 <code>false</code> 改成 <code>true</code> ，但可以從 <code>true</code>改為 <code>false</code></li>
</ul>
<ol start="3">
<li>可列舉(enumerable):決定特性是否能夠透過物件方法(如 <code>for...in</code> )被取出</li>
<li>特性的值(value): 設定這個被定義特性的值</li>
</ol>
<p>來看看測試的例子:</p>
<p>一、 將 <code>writable</code> 改為 <code>false</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;name&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;Bill&#x27;</span>,</span><br><span class="line">  <span class="attr">enumerable</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="attr">writable</span>:<span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>
<p>可以看到 <code>Jack</code> 這個值無法被寫入 <code>obj</code>物件<br>
<img src="https://i.imgur.com/aidZKLg.png" alt=""></p>
<p>二、 將 <code>configurable</code> 改為 <code>false</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;name&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;Bill&#x27;</span>,</span><br><span class="line">  <span class="attr">enumerable</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>:<span class="literal">false</span>,</span><br><span class="line">  <span class="attr">writable</span>:<span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete: 刪除特性</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>
<p>可以看到 <code>name</code> 這個特性並沒有被刪除<br>
<img src="https://i.imgur.com/aidZKLg.png" alt=""></p>
<p>三、 將 <code>enumerable</code> 改為 <code>false</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.<span class="property">habbit</span> = <span class="string">&quot;Read books&quot;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;name&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;Bill&#x27;</span>,</span><br><span class="line">  <span class="attr">enumerable</span>:<span class="literal">false</span>,</span><br><span class="line">  <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="attr">writable</span>:<span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> prop = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(prop);</span><br></pre></td></tr></table></figure>
<p>可以看到 <code>name</code> 這個特性並沒有被取出來(因為不可列舉)<br>
<img src="https://i.imgur.com/ZEFuTK2.png" alt=""></p>
<p>那又該怎麼同時定義多組特性呢? 其實也很簡單，透過 <code>Object.defineProperties()</code>。</p>
<p>直接來看測試的例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.<span class="property">habbit</span> = <span class="string">&quot;Read books&quot;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(obj,&#123;</span><br><span class="line">  <span class="string">&#x27;name&#x27;</span>:&#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;Bill&#x27;</span>,</span><br><span class="line">    <span class="attr">writable</span>:<span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;habbit&#x27;</span>:&#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;Read books&#x27;</span>,</span><br><span class="line">    <span class="attr">writable</span>:<span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>
<p>可以看到透過 <code>Object.defineProperties()</code> 就可以設定成功囉!<br>
<img src="https://i.imgur.com/hJLAHD3.png" alt=""></p>
<h2 id="測試特性的方法"><a class="header-anchor" href="#測試特性的方法"></a>測試特性的方法</h2>
<p><mark><code>hasOwnProperty()</code></mark>:</p>
<ul>
<li>如果<strong>沒有該特性</strong>則會回傳 <code>false</code>。</li>
<li><code>hasOwnProperty()</code> <mark>不會檢查原型物件中是否有該特性</mark>，所以會回傳 <code>false</code>。</li>
<li>這個方法可以測試物件本身是否有該特性，<mark>無論能否<a href="#enumerable%E5%88%97%E8%88%89-%E6%98%AF%E4%BB%80%E9%BA%BC">列舉</a></mark>，只要有就會回傳 <code>true</code></li>
</ul>
<p>來做些測試驗證看看:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj);</span><br><span class="line">obj2.<span class="property">habbit</span> = <span class="string">&#x27;Read books&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;驗證 obj2 有沒有該特性: &#x27;</span> + obj2.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;habbit&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;驗證 obj2 有沒有該特性: &#x27;</span> + obj2.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;sayHi&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;驗證 obj2 有沒有該特性: &#x27;</span> + obj2.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;playball&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p>可以得到值如下圖:</p>
<p><img src="https://i.imgur.com/cKX9Buc.png" alt=""></p>
<p>所以可以做個小結論:</p>
<ol>
<li>
<p><code>console.log(obj2.hasOwnProperty('habbit'));</code> 因為 <code>obj2</code> 中本來就有 <code>habbit</code> 這個特性，所以回傳 <code>true</code></p>
</li>
<li>
<p><code>console.log(obj2.hasOwnProperty('sayHi'));</code> 因為 <code>sayHi</code> 這個特性是存在於原型物件中，並非 <code>obj2</code> 本身自有的，所以回傳 <code>false</code></p>
</li>
<li>
<p><code>console.log(obj2.hasOwnProperty('playball'));</code> 因為 <code>obj2</code> 中沒有 <code>playball</code> 這個特性，所以回傳 <code>false</code></p>
</li>
</ol>
<p>再來測試關於不可列舉的特性，看看能否正常取出特性:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//透過 `Object.defineProperty()` 設定一個不可列舉的特性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;name&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;Bill&#x27;</span>,</span><br><span class="line">  <span class="attr">enumerable</span>:<span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;驗證 obj 能否取得不可列舉的特性: &#x27;</span> + obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/RcsyfgJ.png" alt=""></p>
<h2 id="測試可列舉特性"><a class="header-anchor" href="#測試可列舉特性"></a>測試可列舉特性</h2>
<p><mark>propertyIsEnumerable()</mark></p>
<ul>
<li>只會將物件中可列舉的特性回傳(這和 <code>hasOwnProperty()</code> 有些差別)。</li>
</ul>
<p>來看一下測試的例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span>,</span><br><span class="line">  <span class="attr">habbit</span>: <span class="string">&#x27;Read books&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;weight&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;65kg&#x27;</span>,</span><br><span class="line">  <span class="attr">enumerable</span>:<span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj物件的 name 是否為可列舉特性: &#x27;</span> + obj.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;name&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj物件的 habbit 是否為可列舉特性: &#x27;</span> + obj.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;habbit&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj物件的 weight 是否為可列舉特性: &#x27;</span> + obj.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;weight&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/N7KZKsB.png" alt=""></p>
<p>透過 <code>Object.defineProperty()</code> 設定一個不可列舉的特性 :<code>weight</code>，可以發現<br>
<code>propertyIsEnumerable()</code> 回傳 <code>false</code> ，代表為不可列舉的特性</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day44-陣列-Array-part1</title>
    <url>/2019/07/10/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day44-%E9%99%A3%E5%88%97-Array-part1/</url>
    <content><![CDATA[<h1 id="陣列-Array"><a class="header-anchor" href="#陣列-Array"></a>陣列(Array)</h1>
<p>今天的學習紀錄要記錄的是陣列的部分，著重的重點在於什麼是陣列及如何使用陣列。</p>
<p>關於陣列的相關方法則會在後面的篇幅做詳細的介紹與運用。</p>
<span id="more"></span>
<h2 id="關於陣列"><a class="header-anchor" href="#關於陣列"></a>關於陣列</h2>
<p>陣列是什麼？在ES6大全中提到了關於陣列的定義與一些特性:</p>
<ol>
<li>
<p>是<strong>一組值的有序群集</strong>，而值也稱為元素(element)，數值所在的位置稱為索引(index)</p>
</li>
<li>
<p><strong>陣列的索引值從0開始</strong></p>
</li>
</ol>
<p><img src="https://i.imgur.com/NvN49Xu.png" alt=""></p>
<ol start="3">
<li>陣列中的元素可以是不同型別的組成</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a =[<span class="number">1</span>,<span class="string">&#x27;Hello world&#x27;</span>,&#123;<span class="attr">name</span>:<span class="string">&#x27;Bill&#x27;</span>&#125;];</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>陣列是<strong>一種特殊形式的物件</strong>，所以其實也可以透過物件指定值的方法將值新增到陣列</li>
</ol>
<p>先複習一下將值指定給物件的其中一種方式:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;&#125;;</span><br><span class="line">obj[<span class="string">&#x27;str&#x27;</span>] = <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">str</span>); <span class="comment">// &#123;str:2&#125;</span></span><br></pre></td></tr></table></figure>
<p>然後再看看下面的例子，透過任意字串作為索引值:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [];</span><br><span class="line">a[<span class="string">&quot;str&quot;</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// [str:2]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">length</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<p>但有一點需要注意的是，<strong>透過上述的方式所新增的元素，是不會計入陣列長度計算的。</strong></p>
<p>所以使用數字作為索引值存取陣列才是比較好的方式。</p>
<ol start="5">
<li>自Array.prototype繼承特性，且Array.prototype定義了ㄧ組陣列操作方法，不只可以在陣列使用，而部分的方法也可以在類陣列(array-like)中使用</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以查看陣列的原型物件定義了哪些方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure>
<h2 id="建立陣列的方法"><a class="header-anchor" href="#建立陣列的方法"></a>建立陣列的方法</h2>
<ol>
<li>陣列字面值</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [];</span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="comment">// 指定陣列位置並賦予值</span></span><br><span class="line">b[<span class="number">4</span>]=<span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Array 建構式:
<ul>
<li>不帶引數的呼叫：等同空陣列<code>[]</code></li>
<li>帶入單一數值作為引數的呼叫：用於指定陣列的長度</li>
<li>帶入兩個(含)以上的元素或者單一非數值作為引數的呼叫：建立陣列並將元素依序放入</li>
</ul>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="comment">//[]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//[empty x 10]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">4</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="comment">//[1,4,&quot;test&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br></pre></td></tr></table></figure>
<h2 id="陣列讀取與寫入元素"><a class="header-anchor" href="#陣列讀取與寫入元素"></a>陣列讀取與寫入元素</h2>
<ul>
<li>讀取：透過 <code>array[index]</code> 讀取陣列中index位置的元素</li>
<li>寫入：透過 <code>array[index] = element</code> 的方式將元素新增到陣列索引值為index的位置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a =[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="comment">//陣列元素讀取，取得test</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[<span class="number">0</span>]); </span><br><span class="line"></span><br><span class="line"><span class="comment">//元素寫入陣列，放在陣列索引為1的位置</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="string">&#x27;add element&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); </span><br></pre></td></tr></table></figure>
<h2 id="陣列長度"><a class="header-anchor" href="#陣列長度"></a>陣列長度</h2>
<ul>
<li>可以得到該陣列的總長度</li>
<li>array.length</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(a,a[<span class="number">0</span>],&#123;</span><br><span class="line">    <span class="attr">writable</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">enumerable</span>:<span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day43-物件-Object-part3</title>
    <url>/2019/07/09/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day43-%E7%89%A9%E4%BB%B6-Object-part3/</url>
    <content><![CDATA[<h1 id="Object-方法"><a class="header-anchor" href="#Object-方法"></a>Object 方法</h1>
<p>這個部分要來學習的是關於 Object 的一些方法，那就開始吧！</p>
<span id="more"></span>
<h2 id="取出列舉特性"><a class="header-anchor" href="#取出列舉特性"></a>取出列舉特性</h2>
<p>第一個方法: <mark><code>for...in</code></mark></p>
<p>先來看一段關於 MDN對於 <code>for...in</code> 的解釋:</p>
<blockquote>
<p>for…in 迴圈只迭代可列舉屬性。…迴圈將迭代全部可列舉屬性，包括了物件自身的和物件繼承自它的建構式之原型的可列舉屬性。(原型鏈上較接近物件的屬性覆蓋原型的屬性)</p>
</blockquote>
<p>意思是使用 <code>for...</code>  <mark>不只將物件自己的可列舉特性取出，也會將繼承而來的可列舉特性也一併取出</mark></p>
<p>來看看個測試例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">sayHi</span>:<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj);</span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&quot;Bill&quot;</span>;</span><br><span class="line">obj2.<span class="property">habbit</span> = <span class="string">&quot;Read Books&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( key <span class="keyword">in</span> obj2)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/3MTrI0y.png" alt=""></p>
<p>透過 <code>Object.create()</code> 讓 <code>obj</code> 傳入<code>obj2</code> 當作 <code>obj2</code> 的原型物件，此時使用 <code>for...in</code> 可以發現取出來的特性<mark>包含了繼承而來的特性</mark></p>
<p>第二個方法: <mark><code>Obejct.keys()</code></mark></p>
<blockquote>
<p>MDN: Object.keys() 方法會回傳一個由指定物件所有可列舉之屬性組成的陣列，該陣列中的的排列順序與使用 for…in 進行迭代的順序相同（兩者的差異在於 for-in 迴圈還會迭代出物件自其原型鏈所繼承來的可列舉屬性）。</p>
</blockquote>
<p>在 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/keys">MDN</a> 的解釋中，可以歸納出幾個重點:</p>
<ol>
<li>使用 <code>Object.keys() </code> 會得到指定物件的所有可列舉特性所組成的陣列。</li>
<li>和 <code>for...in</code> 不同，並不會原型物件中繼承來的可列舉特性也一併取出。</li>
</ol>
<p>將上一個測試例子改寫一下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">sayHi</span>:<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj);</span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&quot;Bill&quot;</span>;</span><br><span class="line">obj2.<span class="property">habbit</span> = <span class="string">&quot;Read Books&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(keys);</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/urdMhbY.png" alt=""></p>
<p>第三個方法: <mark><code>Object.getOwnPropertyNames()</code></mark></p>
<p>透過 <code>Object.getOwnPropertyNames()</code> ，能回傳所有可列舉、不可列舉的特性所組成的陣列。</p>
<p>來個例子測試一下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span>,</span><br><span class="line">  <span class="attr">habbit</span>: <span class="string">&#x27;Read books&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;weight&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;65kg&#x27;</span>,</span><br><span class="line">  <span class="attr">enumerable</span>:<span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> prop = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(prop);</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/bMYxano.png" alt=""></p>
<p>將上述所提到取出列舉特性的部分做個表格歸納一下:</p>
<table>
<thead>
<tr>
<th>語法</th>
<th>可列舉</th>
<th>可列舉(原型物件)</th>
<th>不可列舉</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>for...in</code></td>
<td>O</td>
<td>O</td>
<td>X</td>
</tr>
<tr>
<td><code>Object.keys</code></td>
<td>O</td>
<td>X</td>
<td>X</td>
</tr>
<tr>
<td><code>Object.getOwnPropertyNames</code></td>
<td>O</td>
<td>X</td>
<td>O</td>
</tr>
</tbody>
</table>
<h2 id="物件的擴充性"><a class="header-anchor" href="#物件的擴充性"></a>物件的擴充性</h2>
<p>關於怎麼判斷某物件是否可以擴充，或者如何設定某物件的擴充性，以下有一些方法可以達成</p>
<p>第一個要提的是: <mark>Object.isExtensible()</mark></p>
<p>用來判斷某個物件是否具有擴充性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Bill&quot;</span>,</span><br><span class="line">  <span class="attr">habiit</span>: <span class="string">&quot;Read books&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj物件是否具擴充性: &#x27;</span> + <span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(obj)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/0ZZgXM3.png" alt=""></p>
<p>接下來來看看不可擴充的情況</p>
<p>第二個要提的是: <mark>Object.preventExtensions()</mark></p>
<p>讓<mark>物件的特性不能再被新增到物件中。</mark></p>
<p>但需要注意的是，<mark>物件依然可以刪除原本已存在的特性</mark></p>
<p>寫個測試的例子驗證一下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Bill&quot;</span>,</span><br><span class="line">  <span class="attr">habbit</span>: <span class="string">&quot;Read books&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj物件是否具擴充性: &#x27;</span> + <span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(obj)); </span><br><span class="line"></span><br><span class="line">obj.<span class="property">sayHi</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> prop = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj物件的特性有: &#x27;</span> + prop);</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/purg55i.png" alt=""></p>
<p>上面的測試為了檢查擴充性，所以新增了一個 <code>sayHi</code> 方法給 <code>obj</code> 物件，而透過結果可以發現，這個新增的特性並沒有被新增到 <code>obj</code> 中。</p>
<p>再來透過<code>delete</code> 刪除了 <code>obj</code> 物件的 <code>name</code> 特性，所以也就只剩下特性 <code>habbit</code> 了。</p>
<p>第三個要提的是: <mark>Object.seal()</mark></p>
<p><code>Object.seal()</code> 有一些特性需要注意，如下:</p>
<ol>
<li>物件變成不具擴充性(新特性無法加入)</li>
<li>密封(seal)的物件不能解密封</li>
<li>透過 <code>Object.isSealed()</code> 判斷該物件是否密封</li>
<li>現有特性無法被刪除，但可以修改特性的值</li>
<li>只對被指定的物件有效，該指定物件的原型物件則不起作用。</li>
</ol>
<p>來寫個測試例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Bill&quot;</span>,</span><br><span class="line">  <span class="attr">habbit</span>: <span class="string">&quot;Read books&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">seal</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj物件是否已經被密封(sealed): &#x27;</span> + <span class="title class_">Object</span>.<span class="title function_">isSealed</span>(obj));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看 sayHi 方法能否被新增</span></span><br><span class="line">obj.<span class="property">sayHi</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看 name 特性是否有被刪除</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line"><span class="comment">// 查看 name 的特性是否被修改</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/0XDUqxO.png" alt=""></p>
<p>第四個要提的是: <mark>Object.freeze()</mark></p>
<p><code>Object.freeze()</code> 有一些特性需要注意，如下:</p>
<ol>
<li>物件變成不具擴充性(新特性無法加入)</li>
<li>透過 <code>Object.isFrozen()</code> 判斷該物件是否凍結</li>
<li>現有特性無法被刪除並唯讀(代表值無法被修改)</li>
<li>只對被指定的物件有效，該指定物件的原型物件則不起作用。</li>
</ol>
<p>來寫個測試例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Bill&quot;</span>,</span><br><span class="line">  <span class="attr">habbit</span>: <span class="string">&quot;Read books&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj物件是否已經被凍結: &#x27;</span> + <span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(obj));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看 sayHi 方法能否被新增</span></span><br><span class="line">obj.<span class="property">sayHi</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看 name 特性是否有被刪除</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line"><span class="comment">// 查看 name 的特性是否被修改</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure>
<h2 id="物件的取值器-getter-、設值器-setter"><a class="header-anchor" href="#物件的取值器-getter-、設值器-setter"></a>物件的取值器(getter)、設值器(setter)</h2>
<ol>
<li>取值器(getter) 實際上會呼叫一個隱藏的函式來取回一個值。</li>
<li>設值器(setter) 實際上會呼叫一個隱藏的韓式用來設定值的特性</li>
</ol>
<p>當兩者搭配運用時，就會將其定義成 「存取器描述器」(accseeor descriptor)。</p>
<p>直接透過測試例子來看看怎麼運作:</p>
<p>先看看取值器(getter)的使用:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">sayHi</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello! &#x27;</span>;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> respond = obj.<span class="property">sayHi</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(respond);</span><br></pre></td></tr></table></figure>
<p>取值器(getter) 會呼叫一個隱藏的函式(也就是 <code>sayHi</code> )，並回傳 <code>Hello!</code> 這個值給 <code>respond</code> 變數。</p>
<p>再看看設值器(setter)的使用:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="variable language_">this</span>.<span class="property">name</span>,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">getName</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">getName</span> = <span class="string">&quot;Bill&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);</span><br></pre></td></tr></table></figure>
<ol>
<li>設值器(setter)會呼叫一個隱藏的函式(也就是 <code>getName</code> )，並將 <code>Bill</code> 這個值做為 <code>getName</code> 的參數傳入，此時 <code>obj</code> 物件 <code>name</code> 的特性值已變成 <code>Bill</code></li>
<li>所以當我們想要取得 <code>name</code> 特性的值時，就可以拿到 <code>Bill</code> 。</li>
</ol>
<p>最後看看兩者搭配的使用:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="variable language_">this</span>.<span class="property">name</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">sayHi</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello! &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">getName</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">getName</span> = <span class="string">&quot;Bill&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> respond = obj.<span class="property">sayHi</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(respond);</span><br></pre></td></tr></table></figure>
<ol>
<li>設值器(setter)會呼叫一個隱藏的函式(也就是 <code>getName</code> )，並將 <code>Bill</code> 這個值做為 <code>getName</code> 的參數傳入，此時 <code>obj</code> 物件 <code>name</code> 的特性值已變成 <code>Bill</code></li>
<li>取值器(getter) 會呼叫一個隱藏的函式(也就是 <code>sayHi</code> )，並回傳 <code>Hello! Bill</code> 這個值給 <code>respond</code> 變數。</li>
</ol>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day46-函式-function</title>
    <url>/2019/07/12/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day46-%E5%87%BD%E5%BC%8F-function/</url>
    <content><![CDATA[<h1 id="函式-function"><a class="header-anchor" href="#函式-function"></a>函式(function)</h1>
<p>函式(function)可以用在計算後得到某個值，也可以用於自定義某個任務。</p>
<p>關於定義函式的幾種方式，讓我們繼續接著往下看</p>
<span id="more"></span>
<h2 id="定義函式-function-的方式"><a class="header-anchor" href="#定義函式-function-的方式"></a>定義函式(function)的方式</h2>
<p>以下有幾種方式可以定義函式，而每一種方式都有自己對應的稱呼方式。</p>
<h3 id="函式陳述式-function-statements"><a class="header-anchor" href="#函式陳述式-function-statements"></a>函式陳述式(function statements)</h3>
<p>在學習函式陳述式(function statements)之前，要先來了解關於陳述式的意思。</p>
<p>陳述式就像句子，而我們透過執行句中的設定，使得某些事情發生。</p>
<p>如同下方的程式碼，我們宣告了變數 <code>a</code> 以及設定了一個 <code>if</code> 條件句，而這每一行都是一個陳述式，也就是剛剛提到的句子，這些句子會決定程式要執行的行為。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">5</span>)&#123;...&#125;</span><br></pre></td></tr></table></figure>
<p>將上述所提的概念用在函式上就成了 <mark>函式陳述式</mark>，如下:</p>
<p>這個函式陳述式說明了如果執行時，會得到 <code>Hello!</code> 的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看完函式陳述式怎麼宣告，接下來要看看怎麼使用它</p>
<p>其實使用的方式也很簡單，透過 <code>函式名稱()</code> 這樣就代表我們想要執行這個函式中我們定義的程式碼內容。</p>
<p>拿上面的例子來測試，會得到:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure>
<p>當然我們也可以透過傳遞參數，讓這個函式能有更多的運用:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">person</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello! <span class="subst">$&#123;person&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayHi</span>(<span class="string">&#x27;Bill&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>將 <code>Bill</code> 傳入到函式中，函式的內容就會找到與參數相同的名稱 <code>person</code> 並將 <code>Bill</code> 的值透過 <code>person</code> 給  <code>console.log(...);</code> 中的 <code>person</code> 使用</p>
<p>再來我們來看看兩個測試例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  a = <span class="number">5</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure>
<p>因為 <mark>傳值(call by value)</mark> 的關係，所以即使傳入到函式中的 變數 <code>a</code> 的值被更改，在全域的 <code>a</code> 也不會因此而被更改(兩者處於不同的記憶體空間)。</p>
<p><img src="https://i.imgur.com/5wXZKpX.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Bill&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">person</span>)&#123;</span><br><span class="line">  person.<span class="property">name</span> = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure>
<p>因為 <mark>傳參考(call by reference)</mark> 的緣故，傳入到函式中的 <code>person</code> 物件當特性值被更改時會導致在全域的 <code>person</code> 物件也被更改(兩者指向同一個記憶體位址)。</p>
<p><img src="https://i.imgur.com/U49LdQB.png" alt=""></p>
<h3 id="函式表達式-function-expression"><a class="header-anchor" href="#函式表達式-function-expression"></a>函式表達式(function expression)</h3>
<p>函式表達式(function expression) 可以將函式儲存在變數中，而這樣子的函式可以不需要函式名稱，也稱為匿名函式。使用方式如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> totalSum = <span class="keyword">function</span>(<span class="params">number,number2</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> number + number2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(totalSum);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">totalSum</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure>
<p>從第一個結果可以看到變數 <code>totalSum</code> 儲存了一個匿名函式，所以當執行 <code>變數名稱()</code> 就可以取得這個變數儲存的函式運算後的值。</p>
<p>而這個值我們必須透過 <code>return</code> 的方式將值傳回 <code>totalSum</code>。</p>
<p><img src="https://i.imgur.com/jJ6KuVV.png" alt=""></p>
<p>當用於遞迴時，這個匿名函式就可以有函式名稱。</p>
<p>如下方儲存於<code>result</code> 變數中的 <code>factorial</code> 函式。</p>
<p>當執行 <code>result(5)</code> 時就可以得到值 <code>120</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">number</span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(number === <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> number;</span><br><span class="line">	<span class="keyword">return</span> number * <span class="title function_">factorial</span>(number - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">result</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<h3 id="函式建構式-function-constructor-與-new"><a class="header-anchor" href="#函式建構式-function-constructor-與-new"></a>函式建構式(function constructor) 與 new</h3>
<p>函式建構式可以用於建立物件原型(也稱為模板)，關於建立時有一些可以先知道的部分:</p>
<ul>
<li>作為建構式的名稱，習慣上開頭會用大寫表示</li>
<li>透過建構式建立的模板:，可重複被運用於建立每一個不同的物件</li>
<li>建構式應該透過自身的 <code>prototype</code> 建立方法而不應該直接寫入到模板中</li>
</ul>
<p>接下來看看如何建立模板:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age,habbit</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">habbit</span> = habbit;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personA = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Bill&#x27;</span>,<span class="number">23</span>,<span class="string">&#x27;Read books&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personA);</span><br><span class="line"><span class="keyword">const</span> personB = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Jack&#x27;</span>,<span class="number">30</span>,<span class="string">&#x27;Play tennis&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personB);</span><br></pre></td></tr></table></figure>
<p>首先先定義好模板 <code>Person</code> ，並新增這個模板需要的特性。<br>
之後透過 <code>new</code> 關鍵字的方式建立物件，這邊需要注意的是 <code>this</code> 會指向透過 <code>new</code> 建立的物件。</p>
<p>而透過建立的模板，可以建立多個有相同特性的不同物件。</p>
<p><img src="https://i.imgur.com/BrfTnyK.png" alt=""></p>
<p>那如果我們需要新增一個方法給這個模板呢？</p>
<p>這裡可能會覺得為什麼不直接於一開始建立模板時就將方法也新增進去，</p>
<p>但其實這麼做會有個問題，那就是造成佔據太多的記憶體空間。</p>
<p>來看看測試的例子:</p>
<p>先將方法直接在模板中建立</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age,habbit</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">habbit</span> = habbit;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personA = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Bill&#x27;</span>,<span class="number">23</span>,<span class="string">&#x27;Read books&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personA);</span><br><span class="line"><span class="keyword">const</span> personB = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Jack&#x27;</span>,<span class="number">30</span>,<span class="string">&#x27;Play tennis&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personB);</span><br></pre></td></tr></table></figure>
<p>可以看到每一個物件都從模板中繼承了 <code>sayHi</code> 這個方法，</p>
<p>但是 <code>sayHi</code> 方法可以被重複使用，二來是這樣的寫法會造成記憶體需要多保留這些重複建立的方法，</p>
<p>也就造成了多餘的記憶體空間的浪費了</p>
<p><img src="https://i.imgur.com/80b4Jzi.png" alt=""></p>
<p>所以更好的方式是額外透過 <code>prototype</code> 語法將方法新增到模板，也就是這個原型物件上:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age,habbit</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">habbit</span> = habbit;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personA = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Bill&#x27;</span>,<span class="number">23</span>,<span class="string">&#x27;Read books&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> personB = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Jack&#x27;</span>,<span class="number">30</span>,<span class="string">&#x27;Play tennis&#x27;</span>);</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hi&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personA);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personB);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personB.<span class="title function_">sayHi</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure>
<p>從圖中可以看到，新建立的 <code>personA</code>、<code>personB</code> 物件並沒有 <code>sayHi</code> 這個方法，但是可以在 <code>Person</code> 模板<br>
中看到<code>sayHi</code> 這個方法，如此一來就能讓每個物件一樣能夠使用 <code>sayHi</code> ，但是記憶體卻只需要保留一個空間給它。</p>
<p><img src="https://i.imgur.com/s6mplsq.png" alt=""></p>
<h3 id="IIFE-Immediately-Invoked-Function-Expression-立即函式"><a class="header-anchor" href="#IIFE-Immediately-Invoked-Function-Expression-立即函式"></a>IIFE(Immediately Invoked Function Expression) 立即函式</h3>
<p>立即函式，顧名思義就是會馬上執行的函式。</p>
<p>JavaScript 引擎看到立即函式就會立刻編譯這個 function。</p>
<p>而立即函式透過在函式外用 <code>()</code> 包住整個函式，可以達到避免裡面的變數污染到全域環境變數的效用。</p>
<p>來看個測試例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<p>如同前面對於立即函式的描述，所以會馬上得到結果為 <code>3</code> 的值。</p>
<h3 id="arguments物件"><a class="header-anchor" href="#arguments物件"></a>arguments物件</h3>
<p><code>arguments</code> 物件是函式中的物件，是函式中可以調用的方法，可以用於儲存傳入的值。</p>
<p>但 <code>arguments</code> 物件是類陣列(array-like)物件，所以如果需要透過陣列的方式操作，則需要轉為陣列才可以。</p>
<p>來看看測試例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> test = <span class="keyword">function</span>(<span class="params">a,b,c</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>);</span><br></pre></td></tr></table></figure>
<p>可以看到 <code>arguments</code> 物件除了將傳入的值存於一個類陣列(array-like)中，還包含了其他的方法(如 <code>callee</code>等)。</p>
<p><img src="https://i.imgur.com/PbcIiIt.png" alt=""></p>
<p>所以如果需要透過陣列的方式操作的話則必須還要做些處理:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> test = <span class="keyword">function</span>(<span class="params">a,b,c</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> ary = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ary); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>);</span><br></pre></td></tr></table></figure>
<p>透過 <code>Array.prototype.slice.call()</code> 可以將 <code>arguments</code> 物件轉為陣列型別。</p>
<p><img src="https://i.imgur.com/6vCglVo.png" alt=""></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day45-陣列-Array-part2</title>
    <url>/2019/07/11/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day45-%E9%99%A3%E5%88%97-Array-part2/</url>
    <content><![CDATA[<h1 id="操作陣列的方法"><a class="header-anchor" href="#操作陣列的方法"></a>操作陣列的方法</h1>
<p>今天要來學一下關於操作陣列的手法，其實JavaScript提供了許多操作陣列的方法</p>
<p>如果能在適當時機使用，肯定會對於開發效率有正面的影響。</p>
<span id="more"></span>
<p>我們可以透過查看陣列的原型物件了解</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure>
<p>就讓我們對於一些常用的方法好好的一探究竟吧！</p>
<h3 id="Array-prototype-join"><a class="header-anchor" href="#Array-prototype-join"></a>Array.prototype.join()</h3>
<p><strong>陣列轉字串</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">join</span>([separator])</span><br></pre></td></tr></table></figure>
<ul>
<li>separator:用來隔開陣列中每個元素的字串。如果未傳入此參數，陣列中的元素將預設用英文逗號（「,」）隔開。</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/join">Array.prototype.join()</a></p>
</blockquote>
<p>join()方法可以將<mark>陣列或者類陣列的所有元素串接並合併成一個字串回傳</mark></p>
<p>而我們也可以自訂元素彼此之間的連接方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array =[<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;test&#x27;</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> string = array.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>);<span class="comment">//使用-分隔轉為字串後的每個元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string);</span><br></pre></td></tr></table></figure>
<h3 id="Array-prototype-reverse"><a class="header-anchor" href="#Array-prototype-reverse"></a>Array.prototype.reverse()</h3>
<p><strong>原陣列會改變</strong></p>
<p><mark>會反轉原陣列內的元素</mark></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray);<span class="comment">//[5,4,3,2,1]</span></span><br></pre></td></tr></table></figure>
<h3 id="Array-prototype-sort"><a class="header-anchor" href="#Array-prototype-sort"></a>Array.prototype.sort()</h3>
<p><strong>原陣列會改變</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">sort</span>([compareFunction])</span><br></pre></td></tr></table></figure>
<ul>
<li>compareFunction: 指定一個函式來定義排序順序。假如省略此參數，陣列將根據各個元素轉為字串後的每一個字元之 Unicode 編碼位置值進行排序。</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">Array.prototype.sort()</a></p>
</blockquote>
<p>會在原陣列內將元素排序並回傳排序後的陣列。</p>
<p>Ex: 不帶引數時，依照字母排序</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">sort</span>());</span><br></pre></td></tr></table></figure>
<p>Ex2 : 將陣列內的數字依大小排列</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array =[<span class="number">55</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">66</span>,<span class="number">97</span>,<span class="number">66</span>];</span><br><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">param1,param2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> param1 - param2;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray);</span><br></pre></td></tr></table></figure>
<p>Ex3: 不區分大小寫的排序</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="string">&#x27;Bug&#x27;</span>,<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;lion&#x27;</span>,<span class="string">&#x27;Cat&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">param1,param2</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> s = param1.<span class="title function_">toLowerCase</span>();</span><br><span class="line">    <span class="keyword">let</span> t = param2.<span class="title function_">toLowerCase</span>();</span><br><span class="line">    <span class="comment">//如果s的字母順位較t的字母順位高，往後排序</span></span><br><span class="line">    <span class="keyword">if</span>(s &gt; t) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    <span class="comment">//如果t的字母順位較s的字母順位高，往前排序</span></span><br><span class="line">    <span class="keyword">if</span>(t &gt; s) </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray);</span><br></pre></td></tr></table></figure>
<h3 id="Array-prototype-unshift"><a class="header-anchor" href="#Array-prototype-unshift"></a>Array.prototype.unshift()</h3>
<p><strong>原陣列會改變</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">unshift</span>(element1[, ...[, elementN]])</span><br></pre></td></tr></table></figure>
<ul>
<li>elementN:欲添加至陣列開頭的元素。</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift">Array.prototype.unshift()</a></p>
</blockquote>
<p>可以將<mark>一個或多個元素夾到陣列的開頭，並回傳陣列的新長度</mark></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"> <span class="comment">//新增單一元素到陣列</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">unshift</span>(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br></pre></td></tr></table></figure>
<h3 id="Array-prototype-shift"><a class="header-anchor" href="#Array-prototype-shift"></a>Array.prototype.shift()</h3>
<p><strong>原陣列會改變</strong></p>
<p>會<mark>移除並回傳陣列的第一個元素</mark>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> delElement = array.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(delElement);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br></pre></td></tr></table></figure>
<h3 id="Array-prototype-push"><a class="header-anchor" href="#Array-prototype-push"></a>Array.prototype.push()</h3>
<p><strong>原陣列會改變</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">push</span>(element1[, ...[, elementN]])</span><br></pre></td></tr></table></figure>
<ul>
<li>elementN:欲添加至陣列末端的元素。</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/push">Array.prototype.push()</a></p>
</blockquote>
<p>可以在<mark>陣列最後面的位置新增一個或多個元素</mark></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line">array.<span class="title function_">push</span>(<span class="string">&#x27;新增的文字&#x27;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br></pre></td></tr></table></figure>
<h3 id="Array-prototype-pop"><a class="header-anchor" href="#Array-prototype-pop"></a>Array.prototype.pop()</h3>
<p><strong>原陣列會改變</strong></p>
<p>會<mark>移除並回傳陣列的最後一個元素</mark>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> delElement = array.<span class="title function_">pop</span>(); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(delElement);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br></pre></td></tr></table></figure>
<h3 id="Array-prototype-splice"><a class="header-anchor" href="#Array-prototype-splice"></a>Array.prototype.splice()</h3>
<p><strong>原陣列會改變</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array.<span class="title function_">splice</span>(start[, deleteCount[, item1[, item2[, ...]]]])</span><br></pre></td></tr></table></figure>
<ul>
<li>start：指定起始的索引位置</li>
<li>deleteCount：要刪除的元素數量</li>
<li>item1.item2：從 <code>start</code> 開始，要加入到陣列的元素。</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">Array.prototype.splice()</a></p>
</blockquote>
<p>可<mark>刪除</mark>或<mark>新增元素</mark>到陣列中，也可以同時執行這兩件事情</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">4</span>); <span class="comment">// 從索引位置2(包含)刪除四個元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray);<span class="comment">// [3,4,5,6]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);<span class="comment">// [1,2,7,8,9]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array2 =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> newArray2 = array2.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">4</span>,<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array2);<span class="comment">// [1,2,&#x27;aa&#x27;,&#x27;bb&#x27;,7,8,9]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray2);<span class="comment">// [3,4,5,6]</span></span><br></pre></td></tr></table></figure>
<h3 id="Array-prototype-concat"><a class="header-anchor" href="#Array-prototype-concat"></a>Array.prototype.concat()</h3>
<p><strong>回傳新陣列，原陣列不改變</strong></p>
<p>需要合併兩個或多個陣列時使用<br>
<code>var new_array = old_array.concat(value1[, value2[, ...[, valueN]]]) </code></p>
<ul>
<li>valueN: 可以是陣列或值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = old_array.<span class="title function_">concat</span>(value1[, value2[, ...[, valueN]]])</span><br></pre></td></tr></table></figure>
<ul>
<li>valueN:陣列以及／或者值，用來合併成一個新的陣列。</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/concat">Array.prototype.concat()</a></p>
</blockquote>
<p>要注意的是concat()中的引數若是一維陣列，則會將陣列的元素值串接回傳。<mark>但若是與二維(或多維)陣列合併的話，則會將裡面的陣列一併串接。</mark></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// [1,2,3,4,5,6]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">concat</span>([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])); </span><br><span class="line"><span class="comment">// [1,2,3,7,8,9,Array(2)];</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">concat</span>([<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,[<span class="number">10</span>,<span class="number">11</span>]])); </span><br></pre></td></tr></table></figure>
<h3 id="Array-prototype-slice"><a class="header-anchor" href="#Array-prototype-slice"></a>Array.prototype.slice()</h3>
<p><strong>回傳新陣列，原陣列不改變</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">slice</span>([begin[, end]])</span><br></pre></td></tr></table></figure>
<ul>
<li>begin：起始位置(索引位置)</li>
<li>end：指定陣列結束位置(但不包含end的元素)</li>
<li>若是省略end，則會拷貝begin到最後一個元素</li>
<li>可使用負數索引，例如:
<ul>
<li><code>slice(-2)</code> 表示要拷貝陣列的最後兩個元素</li>
<li><code>slice(1,-1)</code> 表示拷貝陣列中的第二個元素至倒數第二個元素</li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">Array.prototype.slice()</a></p>
</blockquote>
<p>要注意的是在slice方法中，兩個數字皆為索引值，但是在splice的第二個參數是<strong>要刪除的元素數量</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,[<span class="number">9</span>,<span class="number">10</span>]];</span><br><span class="line"><span class="comment">// 回傳從索引位置2到索引位置5之前的陣列元素</span></span><br><span class="line"><span class="keyword">const</span> newArray = array.<span class="title function_">slice</span>(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray); </span><br><span class="line"><span class="comment">// 原陣列沒有被修改，所以回傳索引位置2之後至最後一個元素之前的所有元素</span></span><br><span class="line"><span class="keyword">const</span> newArray2 = array.<span class="title function_">slice</span>(<span class="number">2</span>,-<span class="number">1</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray2);</span><br></pre></td></tr></table></figure>
<h3 id="Array-prototype-map"><a class="header-anchor" href="#Array-prototype-map"></a>Array.prototype.map()</h3>
<p><strong>回傳新陣列，原陣列不改變</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr.<span class="title function_">map</span>(<span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">currentValue[, index[, array]]</span>) &#123;</span><br><span class="line">    <span class="comment">// Return element for new_array</span></span><br><span class="line">&#125;[, thisArg])</span><br></pre></td></tr></table></figure>
<ul>
<li>callback:為產生新陣列之元素的回呼函式，可傳入三個參數：
<ul>
<li>currentValue<br>
原陣列目前所迭代處理中的元素。</li>
<li>index<br>
原陣列目前所迭代處理中的元素之索引。</li>
<li>array<br>
呼叫 map 方法的陣列。</li>
<li>thisArg<br>
選擇性的參數。執行 callback 回呼函式的 this 值。</li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/map">Array.prototype.map()</a></p>
</blockquote>
<p>map的意思是映射，維基百科中對於映射的定義是:</p>
<blockquote>
<p>設 A,B 是兩個非空集合，若對 A 中的任一元素 x , 依照某種規律（或法則）f , 恆有 B 中的唯一確定的元素 y 與之對應，則稱對應規律 f 為一個從 A 到 B 的映射」</p>
</blockquote>
<p>要簡單一點的解釋可以想成當<mark>輸入一個x值時，會有一個對應的y值輸出</mark></p>
<p>且<mark>若是一個稀疏的陣列，則使用map()時，會將稀疏的位置一樣回傳</mark></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一個稀疏陣列</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,<span class="number">2</span>,,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> newArray = array.<span class="title function_">map</span>(<span class="function"><span class="params">value</span> =&gt;</span> value * value);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br></pre></td></tr></table></figure>
<h3 id="Array-prototype-filter"><a class="header-anchor" href="#Array-prototype-filter"></a>Array.prototype.filter()</h3>
<p><strong>回傳新陣列，原陣列不改變</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = arr.<span class="title function_">filter</span>(<span class="title function_">callback</span>(element[, index[, array]])[, thisArg])</span><br></pre></td></tr></table></figure>
<ul>
<li>callback:此函式為一個斷言，用於測試陣列中的每個元素。回傳值為 true 時將當前的元素保留至新陣列中，若為 false 則不保留。可傳入三個參數：
<ul>
<li>element<br>
原陣列目前所迭代處理中的元素。</li>
<li>index<br>
原陣列目前所迭代處理中的元素之索引。</li>
<li>array<br>
呼叫 filter 方法的陣列。</li>
<li>thisArg<br>
可選的。執行 callback 回呼函式的 this 值。</li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">Array.prototype.filter()</a></p>
</blockquote>
<p>filter的中文翻譯是「過濾」，可想而知就是可以用來作為<mark>資料篩選</mark>時使用</p>
<p>且filter()會跳過稀疏陣列的空值部分，永遠只會是個密集陣列</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> newArray = array.<span class="title function_">filter</span>(<span class="function">(<span class="params">element,index</span>) =&gt;</span> (index + <span class="number">1</span>) % <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br></pre></td></tr></table></figure>
<h3 id="Array-prototype-reduce"><a class="header-anchor" href="#Array-prototype-reduce"></a>Array.prototype.reduce()</h3>
<p><strong>回傳值，原陣列不改變</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">reduce</span>(callback[accumulator, currentValue, currentIndex, array], initialValue)</span><br></pre></td></tr></table></figure>
<ul>
<li>accumulator:一開始執行時，<strong>若是有初始值，則將初始值作為accumulator的第一個數值與陣列元素目前的值一併傳入函式運算</strong></li>
<li>currentValue: 當前的陣列元素值</li>
<li>currentIndex: 當前陣列元素的索引值元素。若有初始值則從索引值0的位置開始，如果沒有，則從索引值1的位置開始</li>
<li>array:使用reduce()方法的陣列</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">Array.prototype.reduce()</a></p>
</blockquote>
<p>使用<code>reduce()</code>時，<mark>累加器與下一個元素值進行運算並得到一個值，且這個值會成為累加器的值並繼續跟下一個元素運算</mark></p>
<p>而且處理陣列元素順序為由索引低至索引高(由左至右)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  執行步驟： </span></span><br><span class="line"><span class="comment">  1. 初始值=1，此時accumulator=1,currentValue=1(陣列索引值0的值)，並帶入函式運算得到 1*1 =1，accumulator的值變為1</span></span><br><span class="line"><span class="comment">  2. accumulator值=1,accumulator=1,currentValue=2，並帶入函式運算得到 1*2 =2，accumulator的值變為2</span></span><br><span class="line"><span class="comment">  3. accumulator值=2,accumulator=2,currentValue=3，並帶入函式運算得到 2*3 =6，accumulator的值變為6</span></span><br><span class="line"><span class="comment">  4. 回傳最後運算的值 = 6</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> value = array.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator,currentValue</span>) =&gt;</span> accumulator * currentValue,<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br></pre></td></tr></table></figure>
<h3 id="Array-prototype-reduceRight"><a class="header-anchor" href="#Array-prototype-reduceRight"></a>Array.prototype.reduceRight()</h3>
<p><strong>回傳值，原陣列不改變</strong></p>
<p>和reduce()行為相同，但處理陣列元素順序為由索引高至索引低(由右至左)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  執行步驟： </span></span><br><span class="line"><span class="comment">  1. 初始值=1，此時accumulator=1,currentValue=3(陣列索引值2的值)，並帶入函式運算得到 1*3 =3，此時accumulator的值變為3</span></span><br><span class="line"><span class="comment">  2. accumulator值=3,currentValue=2，並帶入函式運算得到 3*2 =6，accumulator的值變為6</span></span><br><span class="line"><span class="comment">  3. accumulator值=6,currentValue=1，並帶入函式運算得到 6*1 =6，accumulator的值變為6</span></span><br><span class="line"><span class="comment">  4. 回傳最後運算的值 = 6</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> value = array.<span class="title function_">reduceRight</span>(<span class="function">(<span class="params">accumulator,currentValue</span>) =&gt;</span> accumulator * currentValue,<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br></pre></td></tr></table></figure>
<h3 id="Array-prototype-every"><a class="header-anchor" href="#Array-prototype-every"></a>Array.prototype.every()</h3>
<p><strong>回傳布林值</strong></p>
<p>當元素都回傳true時，才會回傳true，如果有任一個元素為false則回傳false並停止走訪陣列</p>
<p><mark><code>every()</code>最終會回傳的值是一個布林值</mark></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> checkRemainder = array.<span class="title function_">every</span>(<span class="function"><span class="params">value</span> =&gt;</span> value % <span class="number">2</span> );</span><br><span class="line">   </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(checkRemainder); </span><br></pre></td></tr></table></figure>
<h3 id="Array-prototype-some"><a class="header-anchor" href="#Array-prototype-some"></a>Array.prototype.some()</h3>
<p><strong>回傳布林值</strong></p>
<p>當元素都回傳false時，才會回傳false，如果有任一個元素回傳true，則回傳true，並停止走訪整個陣列</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> checkRemainder = array.<span class="title function_">some</span>(<span class="function"><span class="params">value</span> =&gt;</span> value % <span class="number">2</span> ===<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(checkRemainder);</span><br></pre></td></tr></table></figure>
<h3 id="Array-prototype-foreach"><a class="header-anchor" href="#Array-prototype-foreach"></a>Array.prototype.foreach()</h3>
<p><strong>單純走訪陣列</strong></p>
<p>逐一將陣列元素值傳入自定義的函式中運算</p>
<p>沒有提供方法可以停止foreach走訪陣列，如果需要停止則需要丟出(throw)例外</p>
<blockquote>
<p>mdn:除非是拋出異常，否則並沒有中止 forEach() 迴圈的辦法。如果你需要這樣做，forEach() 就是錯誤的用法，相反的，應該要用簡單的迴圈。如果你要測試陣列裡面的元素並回傳布林值，可以用 every() 或 some()。如果可以的話，新的方法 find() 或 findIndex() 也可以用於 true 值之後提前終止。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">array.<span class="title function_">foreach</span>(<span class="keyword">function</span>(<span class="params">value,index</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Array-prototype-indexOf"><a class="header-anchor" href="#Array-prototype-indexOf"></a>Array.prototype.indexOf()</h3>
<p><strong>回傳索引值或元素值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">indexOf</span>(searchElement[, fromIndex])</span><br></pre></td></tr></table></figure>
<ul>
<li>searchElement:欲在陣列中搜尋的元素。</li>
<li>fromIndex:陣列中搜尋的起始索引。</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">Array.prototype.indexOf()<br>
</a></p>
</blockquote>
<p>在陣列中<strong>由左至右</strong>找尋元素並<mark>回傳第一個被找到的元素索引值，沒有的話回傳-1</mark></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="comment">// 回傳 index = 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="comment">// 在索引值2的位置開始找元素a，所以找不到元素，index = -1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure>
<h3 id="Array-prototype-lastIndexOf"><a class="header-anchor" href="#Array-prototype-lastIndexOf"></a>Array.prototype.lastIndexOf()</h3>
<p><strong>回傳索引值或元素值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">lastIndexOf</span>(searchElement, fromIndex)</span><br></pre></td></tr></table></figure>
<ul>
<li>searchElement:欲在陣列中搜尋的元素。</li>
<li>fromIndex:要由陣列尾部向後（即向前）搜尋的啟始索引。</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf#%E8%AA%9E%E6%B3%95">Array.prototype.lastIndexOf()</a></p>
</blockquote>
<p>行為和 indexOf()相反，<mark>從陣列最後面找尋元素並回傳第一個符合的索引值</mark></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="comment">// 回傳 index = 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="comment">// 回傳 index = 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure>
<h3 id="ES6-Array-prototype-copyWithin"><a class="header-anchor" href="#ES6-Array-prototype-copyWithin"></a>ES6: Array.prototype.copyWithin()</h3>
<p><strong>原陣列會改變</strong></p>
<p>copyWithin() 方法會對陣列的一部分進行淺拷貝至同一陣列的另一位置並回傳此陣列，而不修改其大小。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">copyWithin</span>(target)</span><br><span class="line">arr.<span class="title function_">copyWithin</span>(target, start)</span><br><span class="line">arr.<span class="title function_">copyWithin</span>(target, start, end)</span><br></pre></td></tr></table></figure>
<ul>
<li>target: 要複製序列（sequence）至該位置的索引（起始為 0）。若為負數，target 將會自陣列末項開始計算。</li>
<li>start: 開始拷貝的起始元素索引（起始為 0。若為負數，start 將會自陣列末項開始計算。</li>
<li>end : 結束拷貝的結尾元素索引（起始為 0）。若為負數，end 將會自陣列末項開始計算。</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin">Array.prototype.copyWithin()<br>
</a></p>
</blockquote>
<p>這邊要注意的是要拷貝的陣列<mark>不包含end索引值上的值</mark></p>
<p>讓我們看看下面的例子加速理解</p>
<p>Ex:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被拷貝的陣列元素:b,c，從元素a的位置開始取代</span></span><br><span class="line"><span class="comment">// [&#x27;b&#x27;, &#x27;c&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">copyWithin</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure>
<p>Ex2:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被拷貝的陣列元素:b,c,d,e，從元素a的位置開始取代</span></span><br><span class="line"><span class="comment">// [&#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;e&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">copyWithin</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>Ex3:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array2 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被拷貝的陣列元素:c,d，從元素e的位置開始取代</span></span><br><span class="line"><span class="comment">// 要注意的是如果要取代的位置後方已經沒有元素，則只會取代存在的元素</span></span><br><span class="line"><span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;c&#x27;];</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array2.<span class="title function_">copyWithin</span>(-<span class="number">1</span>,-<span class="number">3</span>,-<span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<h3 id="ES6-Array-prototype-keys"><a class="header-anchor" href="#ES6-Array-prototype-keys"></a>ES6: Array.prototype.keys()</h3>
<p><strong>回傳索引值或元素值</strong></p>
<p>keys() 方法會回傳一個包含陣列中的==每一個索引鍵（keys）==的新Array Iterator物件。</p>
<p>關於 Array Iterator物件，在mdn中有這麼一段解釋:</p>
<blockquote>
<p>可迭代協議: 可迭代（iterable）協議允許 JavaScript 物件定義或客制他們的迭代行為，例如哪些值可在 for…of 語法結構中被迭代出來。<br>
<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Iteration_protocols">可迭代協議</a></p>
</blockquote>
<p>可以先理解成能否使用for…of將值取出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> iterator = array.<span class="title function_">keys</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> iterator)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ES6-Array-prototype-values"><a class="header-anchor" href="#ES6-Array-prototype-values"></a>ES6: Array.prototype.values()</h3>
<p><strong>回傳索引值或元素值</strong></p>
<p>values() 方法會回傳一個包含陣列中的==每一個索引之對應值（values）==的新 Array Iterator 物件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>,<span class="string">&#x27;dd&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> iterator = array.<span class="title function_">values</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> iterator)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ES6-Array-prototype-entries"><a class="header-anchor" href="#ES6-Array-prototype-entries"></a>ES6: Array.prototype.entries()</h3>
<p>entries() 方法會回傳一個包含陣列中==每一個索引之鍵值對（key/value pairs）==的新陣列迭代器（Array Iterator）物件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>,<span class="string">&#x27;dd&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> iterator = array.<span class="title function_">entries</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> iterator)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`索引值為:<span class="subst">$&#123;key&#125;</span>，值為: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ES6-Array-prototype-find"><a class="header-anchor" href="#ES6-Array-prototype-find"></a>ES6: Array.prototype.find()</h3>
<p><strong>回傳索引值或元素值</strong></p>
<p>find() 方法會回傳第一個滿足所提供之測試函式的元素值。否則回傳 undefined。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">find</span>(callback[, thisArg])</span><br></pre></td></tr></table></figure>
<ul>
<li>callback:會處理陣列中每個元素的函數，它使用三個參數：
<ul>
<li>element<br>
在陣列中正被處理的元素。</li>
<li>index<br>
在陣列中正被處理的元素的索引。</li>
<li>array<br>
呼叫 find 的陣列。</li>
<li>thisArg<br>
執行 callback 函式時被當作 this 的物件。</li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/find">Array.prototype.find()</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,-<span class="number">5</span>,<span class="number">55</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> value = array.<span class="title function_">find</span>(<span class="function"><span class="params">value</span>=&gt;</span> value &gt;= <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br></pre></td></tr></table></figure>
<h3 id="ES6-Array-prototype-findIndex"><a class="header-anchor" href="#ES6-Array-prototype-findIndex"></a>ES6: Array.prototype.findIndex()</h3>
<p><strong>回傳索引值或元素值</strong></p>
<p>與Array.prototype.find()行為類似，只是回傳的為元素的索引值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,-<span class="number">5</span>,<span class="number">55</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> value = array.<span class="title function_">findIndex</span>(<span class="function"><span class="params">value</span>=&gt;</span> value &gt;= <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br></pre></td></tr></table></figure>
<h3 id="ES6-Array-prototype-fill"><a class="header-anchor" href="#ES6-Array-prototype-fill"></a>ES6: Array.prototype.fill()</h3>
<p><strong>原陣列會改變</strong></p>
<p>fill() 方法會將陣列中索引的第一個到最後一個的每個位置全部填入一個靜態的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">fill</span>(value[, start[, end]])</span><br></pre></td></tr></table></figure>
<ul>
<li>value:欲填入陣列的值。</li>
<li>start:起始的索引值，預設為 0。</li>
<li>end:結束的索引值</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/fill">Array.prototype.fill()</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,-<span class="number">5</span>,<span class="number">55</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="comment">//從索引值2的位置將值取代為4</span></span><br><span class="line"><span class="keyword">const</span> value = array.<span class="title function_">fill</span>(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//[1, -5, 4, 4, 4]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line"></span><br><span class="line"><span class="comment">//將索引值2至索引值3(不包含)間的元素值取代為8</span></span><br><span class="line"><span class="comment">//[1, -5, 8, 4, 4]</span></span><br><span class="line"><span class="keyword">const</span> value2 = array.<span class="title function_">fill</span>(<span class="number">8</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value2);</span><br></pre></td></tr></table></figure>
<h3 id="ES7-Array-prototype-includes"><a class="header-anchor" href="#ES7-Array-prototype-includes"></a>ES7: Array.prototype.includes()</h3>
<p><strong>回傳布林值</strong></p>
<p>includes() 方法會判斷陣列是否包含特定的元素，並以此來回傳 true 或 false。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">includes</span>(searchElement[, fromIndex])</span><br></pre></td></tr></table></figure>
<ul>
<li>searchElement:要搜尋的元素。</li>
<li>fromIndex:要於此陣列中開始搜尋 searchElement 的位置</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/includes">Array.prototype.includes()</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,-<span class="number">5</span>,<span class="number">55</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> value = array.<span class="title function_">includes</span>(-<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> value2 = array.<span class="title function_">includes</span>(-<span class="number">9</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value2);</span><br></pre></td></tr></table></figure>
<h3 id="ES10-Array-prototype-flat"><a class="header-anchor" href="#ES10-Array-prototype-flat"></a>ES10: Array.prototype.flat()</h3>
<p><strong>回傳新陣列，原陣列不改變</strong></p>
<p>flat() 函數以遞迴方式將特定深度的子陣列重新串接成為一新的陣列</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = arr.<span class="title function_">flat</span>([depth]);</span><br></pre></td></tr></table></figure>
<ul>
<li>depth:指定巢狀陣列展開的深度。預設為1。</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">Array.prototype.flat()</a></p>
</blockquote>
<p>透過這個方法我們可以很快速地攤平多維陣列，變成一維陣列</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>,-<span class="number">5</span>,[<span class="number">55</span>,<span class="number">33</span>,<span class="number">1</span>],<span class="number">4</span>,[[<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]]];</span><br><span class="line"><span class="keyword">const</span> value = array.<span class="title function_">flat</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> value2 = array.<span class="title function_">flat</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value2);</span><br></pre></td></tr></table></figure>
<p>在這之前的方法是運用reduce()搭配concat()完成</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line">arr1.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc.<span class="title function_">concat</span>(val), []);</span><br></pre></td></tr></table></figure>
<h3 id="ES10-Array-prototype-flatMap"><a class="header-anchor" href="#ES10-Array-prototype-flatMap"></a>ES10: Array.prototype.flatMap()</h3>
<p><strong>回傳新陣列，原陣列不改變</strong></p>
<p>是將<mark>flat()與map()合併運用</mark>，先透過map()映射每個元素後再透過flat()將多維陣列攤平成一維陣列。</p>
<p>這邊要注意的是<mark>flat()的深度=1，意思是只能將二維陣列攤平成一維陣列</mark></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr .<span class="property">flatMap</span>（<span class="keyword">function</span> callback（currentValue [，index [，array]]）&#123;</span><br><span class="line">    <span class="comment">//返回new_array的元素</span></span><br><span class="line">&#125; [，thisArg ]）</span><br></pre></td></tr></table></figure>
<ul>
<li>callback:會處理陣列中每個元素的函數，它使用三個參數：
<ul>
<li>currentValue<br>
在陣列中正被處理的元素值。</li>
<li>index<br>
在陣列中正被處理的元素的索引。</li>
<li>array<br>
呼叫flatMap的陣列。</li>
<li>thisArg<br>
執行callback函式時被當作this的物件。</li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap">Array.prototype.flatMap()</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> newArray = array.<span class="title function_">flatMap</span>(<span class="function"><span class="params">value</span> =&gt;</span> [value * value]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray);</span><br></pre></td></tr></table></figure>
<p>以上是陣列的方法，相信如果能妥善運用的話，肯定在陣列的操作上功力會大增!!</p>
<p>但你以為這樣就結束了嗎XD</p>
<p>除了陣列以外有些很常與陣列方法搭配運用的方法也需要提一提~</p>
<h3 id="String-prototype-split"><a class="header-anchor" href="#String-prototype-split"></a>String.prototype.split()</h3>
<p><strong>字串轉陣列</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str .<span class="property">split</span>（[ separator [，limit ]]）</span><br></pre></td></tr></table></figure>
<ul>
<li>separator: 拆分的依據，可以是字串或者是正規表達式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str =<span class="string">&#x27;1/2/4/5/7/6&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> array = str.<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>);<span class="comment">//透過/切割字串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br></pre></td></tr></table></figure>
<p>這麼多的方法是要怎麼記啊!!!</p>
<p>所以底下我整理成了一個表格，記憶方式的參考依據為<mark>這個陣列方法使用後所得到的結果</mark></p>
<p>對於我來說，我可以很快速地了解使用了這個方法會得到什麼值</p>
<h3 id="速記表"><a class="header-anchor" href="#速記表"></a>速記表</h3>
<div style="overflow-x:auto"><table style="width:1000px"><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>陣列轉字串</td><td>join()</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>原陣列會改變</td><td>reverse()</td><td>sort()</td><td>unshift()</td><td>shift()</td><td>push()</td><td>pop()</td><td>splice()</td><td>copyWithin()</td><td>fill()</td></tr><tr><td>回傳新陣列，原陣列不變</td><td>concat()</td><td>slice()</td><td>map()</td><td>filter()</td><td>flat()</td><td>flatMap()</td><td></td><td></td><td></td></tr><tr><td>回傳值，原陣列不變</td><td>reduce()</td><td>reduceRight()</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>回傳布林值</td><td>every()</td><td>some()</td><td>includes()</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>走訪陣列</td><td>foreach()</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>回傳索引值或元素值</td><td>indexOf()</td><td>lastIndexOf()</td><td>keys()</td><td>values()</td><td>entries()</td><td>find()</td><td>findIndex()</td><td></td><td></td></tr><tr><td>字串轉陣列</td><td>spilt()</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div>
<p>關於陣列方法的介紹就到這裡囉！</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day49-遞迴函式(recursive funciton)</title>
    <url>/2019/07/15/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day49-%E9%81%9E%E8%BF%B4%E5%87%BD%E5%BC%8F-recursive-funciton/</url>
    <content><![CDATA[<h1 id="遞迴函式-recursive-function"><a class="header-anchor" href="#遞迴函式-recursive-function"></a>遞迴函式(recursive function)</h1>
<p>這陣子寫到了關於遞迴相關的題目，所以記錄一下關於撰寫時的一些想法。</p>
<span id="more"></span>
<h2 id="遞迴函式的運用"><a class="header-anchor" href="#遞迴函式的運用"></a>遞迴函式的運用</h2>
<p>在函式中使用自身的函數進行資料的處理，直到符合條件時回傳值。</p>
<p>Ex1.寫一個遞迴函數 function umleven(n) 來求算 2x4 + 4x6 + 6x8…+(n-2)xn<br>
(n最小為 4, 只會出現偶數)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 撰寫思維：</span></span><br><span class="line"><span class="comment">  1. 資料不能是下列幾種</span></span><br><span class="line"><span class="comment">    - maxValue &lt; 4</span></span><br><span class="line"><span class="comment">    - string</span></span><br><span class="line"><span class="comment">    - float</span></span><br><span class="line"><span class="comment">  2. 用於遞迴的規則：(maxValue-2)*maxValue </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> maxValue = <span class="title class_">Number</span>(process.<span class="property">argv</span>[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">valueChecked</span>(maxValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">//過濾輸入的資料</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">valueChecked</span>(<span class="params">maxValue</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(maxValue)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你輸入的 &#x27;</span> + process.<span class="property">argv</span>[<span class="number">2</span>] + <span class="string">&#x27; 不是數字，請輸入不小於4的正偶數！&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isFloat</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你輸入的數字 &#x27;</span> + process.<span class="property">argv</span>[<span class="number">2</span>] + <span class="string">&#x27; 是小數，請輸入不小於4的正偶數！&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (maxValue &lt; <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你輸入的數字為 &#x27;</span> + process.<span class="property">argv</span>[<span class="number">2</span>] + <span class="string">&#x27;，請輸入不小於4的正偶數&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (maxValue % <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你輸入的數字 &#x27;</span> + process.<span class="property">argv</span>[<span class="number">2</span>] + <span class="string">&#x27; 是奇數，請輸入不小於4的正偶數！&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sumTotal = <span class="title function_">finalResult</span>(maxValue);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(sumTotal);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 執行遞迴的區塊，實際運作過程如下(以maxValue=6為例)：</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 6*(6-2) + finalResult(4)</span></span><br><span class="line"><span class="comment"> 6*(6-2) + 4*(4-2) +finalResult(2)</span></span><br><span class="line"><span class="comment"> 6*(6-2) + 4*(4-2) + 2*(2-2) + finalResult(0);</span></span><br><span class="line"><span class="comment"> =24+8 = 32</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span>：</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">finalResult</span>(<span class="params">maxValue</span>) &#123;</span><br><span class="line">  <span class="comment">// !maxValue 可以寫成 maxValue === 0，比較好理解</span></span><br><span class="line">  <span class="keyword">if</span> (!maxValue) &#123;</span><br><span class="line">    <span class="keyword">return</span> maxValue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// maxValue*(maxValue-2) +</span></span><br><span class="line">  <span class="keyword">return</span> maxValue * (maxValue - <span class="number">2</span>) + <span class="title function_">finalResult</span>(maxValue - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判斷是否為浮點數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isFloat</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (maxValue * <span class="number">10</span>) % <span class="number">10</span> != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Ex2:試寫一程式，讓使用者輸入一正整數n值，並撰寫一遞迴函數 function divi(n) 來求算當 n 值不斷除以 3 時，最少要除多少次，小數點後第 2 位會等於 0。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 需求分析：</span></span><br><span class="line"><span class="comment">  1.過濾非正整數以外的值</span></span><br><span class="line"><span class="comment">      - 文字</span></span><br><span class="line"><span class="comment">      - 負數</span></span><br><span class="line"><span class="comment">      - 0</span></span><br><span class="line"><span class="comment">      - 小數</span></span><br><span class="line"><span class="comment">  2.寫一個遞迴函數讓輸入的數字不斷除以3，取得小數點以下第三位(不四捨五入)的值</span></span><br><span class="line"><span class="comment">  3.當小數點後第2位為0時停止，並回傳總次數，不然數字就繼續除以3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">預計做法：</span></span><br><span class="line"><span class="comment">    -放置一個計數器，記錄遞迴執行的次數</span></span><br><span class="line"><span class="comment">    - 將每次除以3後得到的值轉成字串並取得小數點後第二位的值，使用chartAt()方法判斷是否為0，是的話就return 符合條件時的遞迴總次數，不然就繼續執行，直到符合條件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inputNumber = <span class="title class_">Number</span>(process.<span class="property">argv</span>[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">valueChecked</span>(inputNumber);</span><br><span class="line"><span class="comment">//過濾輸入資料</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">valueChecked</span>(<span class="params">inputNumber</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(inputNumber)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你輸入的 &#x27;</span> + process.<span class="property">argv</span>[<span class="number">2</span>] + <span class="string">&#x27; 不是數字，請輸入大於零的正整數！&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isFloat</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你輸入的數字 &#x27;</span> + process.<span class="property">argv</span>[<span class="number">2</span>] + <span class="string">&#x27; 是小數，請輸入大於零的正整數！&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (inputNumber &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你輸入的數字 &#x27;</span> + process.<span class="property">argv</span>[<span class="number">2</span>] + <span class="string">&#x27; 小於或等於零，請輸入大於零的正整數！&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> finalResult = <span class="title function_">calculate</span>(inputNumber);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;需要&#x27;</span> + finalResult + <span class="string">&#x27;次&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//執行遞迴的區塊</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculate</span>(<span class="params">inputNumber, recursiveCount = <span class="number">0</span></span>) &#123;</span><br><span class="line">  recursiveCount++;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//取得小數點以下第三位的數字</span></span><br><span class="line">  <span class="keyword">let</span> num = <span class="built_in">parseFloat</span>(inputNumber / <span class="number">3</span>).<span class="title function_">toFixed</span>(<span class="number">4</span>).<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> inputNumberString = num.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="keyword">let</span> len = inputNumberString.<span class="property">length</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//計算並判斷輸入的數字，直到符合小數點第二位為0的時候停止。</span></span><br><span class="line">  <span class="keyword">if</span> (inputNumberString.<span class="title function_">charAt</span>(len - <span class="number">2</span>) === <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> recursiveCount;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">calculate</span>(num, recursiveCount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isFloat</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (inputNumber * <span class="number">10</span>) % <span class="number">10</span> != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day48-this</title>
    <url>/2019/07/14/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day48-this/</url>
    <content><![CDATA[<h1 id="JavaScript-的-this-怎能不知道"><a class="header-anchor" href="#JavaScript-的-this-怎能不知道"></a>JavaScript 的 this 怎能不知道</h1>
<p>思來想去，還是決定先將我理解的 <code>this</code> 用兩句話做個結論，再由此延伸後續的詳細差別。</p>
<ol>
<li>在 ES6 之前，<mark>決定this的方式取決於函式如何被呼叫</mark>，除非直接指定 <code>this</code>  (例如: <code>bind</code> 、 <code>call</code> 、 <code>apply</code> 方法)。</li>
<li>在 ES6 之後，<mark>箭頭函式對於this的綁定則有了重新的定義。</mark></li>
</ol>
<span id="more"></span>
<h2 id="ES6之前的-this"><a class="header-anchor" href="#ES6之前的-this"></a>ES6之前的 <code>this</code></h2>
<p>如前面所提，<mark>決定this的方式取決於函式如何被呼叫</mark>。</p>
<p>所以再來要對於函式呼叫時 <code>this</code> 的綁定依序了解。</p>
<h3 id="什麼是全域"><a class="header-anchor" href="#什麼是全域"></a>什麼是全域</h3>
<p>在後面的篇幅中會很常提及「全域」，所以決定稍微解釋一下方便後續的理解。</p>
<p>在 克服JS的奇怪部分 中的第2節有提及對於全域的解釋:</p>
<blockquote>
<p><mark>在任何地方都可以取用它</mark>，這就是全域的意思。</p>
</blockquote>
<p>寫個測試的例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> habbit = <span class="string">&quot;Read books&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getHabbit</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> habbit = <span class="string">&quot;Read comics&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(habbit);</span><br></pre></td></tr></table></figure>
<p>當我們在全域查詢 <code>habbit</code> 的值時， 可以得到 <code>habbit</code> 的值為 <code>Read books</code> 而不是 <code>Read comic</code> ，就是因為 <code>habbit</code> 的值 <mark>位於全域</mark>。</p>
<p>關於對於全域的解釋就先到這裡，後續趕緊切入本章的主題~</p>
<h3 id="直接使用-this"><a class="header-anchor" href="#直接使用-this"></a>直接使用 <code>this</code></h3>
<p>來看看這個測試例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br></pre></td></tr></table></figure>
<p>如果我們直接調用 <code>this</code> 並查看，會發現 <mark><code>this</code> 指向全域</mark></p>
<p><img src="https://lh3.google.com/u/0/d/1Inm0L-x72-2Hglvkb3NQCQy-6Cth0GNO=w1298-h1498-iv1" alt="Day14-1"></p>
<p>所以當全域中有變數時:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Bill&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br></pre></td></tr></table></figure>
<p>因為 <code>this</code> 指向全域， 所以才可以取得同樣位於全域的 <code>name</code> 變數的值 <code>Bill</code>。</p>
<p><img src="https://lh3.google.com/u/0/d/1zPeo6oBRWEZ5U7Sx5Yw4hKJQweoTlGWY=w1298-h1498-iv1" alt="Day14-2"></p>
<h3 id="直接呼叫函式"><a class="header-anchor" href="#直接呼叫函式"></a>直接呼叫函式</h3>
<p>當我們 <mark>直接呼叫函式</mark> 的時候，此時的 <mark><code>this</code> 指向全域</mark></p>
<p>來看看測試例子驗證一下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Bill&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getName</span>();</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1dHO6FJ_734pxVckfxEmCgXn5b6vCriYz=w1298-h1498-iv1" alt="Day14-3"></p>
<p>因此可以得到全域的 <code>name</code> 的值 <code>Bill</code></p>
<h3 id="嚴格模式下的-this"><a class="header-anchor" href="#嚴格模式下的-this"></a>嚴格模式下的 <code>this</code></h3>
<blockquote>
<p>MDN: 嚴格模式下，如果 <code>this</code> 沒有定義到執行環境( Execution Context)內，其預設值就會是  <code>undefined</code> 。</p>
</blockquote>
<p>寫些測試例子驗證一下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br></pre></td></tr></table></figure>
<p>前面有提到，當我們直接呼叫函式的時候， <code>this</code> 會是指向全域而非 <code>test</code> 函式本身，所以在嚴格模式底下會因為 <code>this</code> 不是定義在執行環境(<code>test</code> 函式)中，所以會是 <code>undefined</code>。</p>
<p><img src="https://lh3.google.com/u/0/d/1BPoD-1Oyi0IHNV6Jt5dE-YC_bm-1LyGj=w1298-h1498-iv1" alt="Day14-4"></p>
<h3 id="物件呼叫方法"><a class="header-anchor" href="#物件呼叫方法"></a>物件呼叫方法</h3>
<p>如果是 <mark>呼叫物件的方法，此時的 <code>this</code> 指向該物件</mark></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> habbit = <span class="string">&quot;Read books&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">habbit</span>: <span class="string">&quot;Read comics&quot;</span>,</span><br><span class="line">  getHabbit : <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">habbit</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">getHabbit</span>());</span><br></pre></td></tr></table></figure>
<p>此時的 <code>this</code> 指向 <code>obj</code> 物件。 所以 <code>getHabbit</code> 方法中的 <code>this.habbit</code> 會取得 <code>obj</code> 物件的 <code>habbit</code> 的值 <code>Read comics</code> ，而不是全域 <code>habbit</code> 變數的值 <code>Read books</code>。</p>
<p><img src="https://lh3.google.com/u/0/d/1C5D6xL6LzPJgwqqX3eE_LzvHJPBF9nOI=w1298-h1498-iv1" alt="Day14-5"></p>
<p><mark>以下注意!!!</mark></p>
<p>讓我們改寫一下測試的例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> habbit = <span class="string">&quot;Read books&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">habbit</span>: <span class="string">&quot;Read comics&quot;</span>,</span><br><span class="line">  getHabbit : <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getHabbit方法的habbit值: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">habbit</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getAnotherHabbit</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getAnotherHabbit方法的habbit值: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">habbit</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getAnotherHabbit</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">getHabbit</span>();</span><br></pre></td></tr></table></figure>
<p>這時候依序會獲得什麼值呢?</p>
<p>解析的流程如下:</p>
<ol>
<li>呼叫 <code>obj</code> 物件的 <code>getHabbit</code> 方法，此時的 <code>this</code> 指向 <code>obj</code> 物件，所以可以看到 <code>getHabbit</code> 方法的值為 <code>Read comics</code></li>
<li>執行 <code>getHabbit</code> 的程式內容時，會執行 <code>getAnotherHabbit</code> 這個函式，由於在 <code>getHabbit</code> 方法是<mark>直接呼叫 <code>getAnotherHabbit</code></mark> ，所以此時的 <code>this</code> 已變成指向全域(就是Window物件)。</li>
<li>因為 <code>getAnotherHabbit</code> 函式的 <code>this</code> 指向全域，所以就取得位於全域的變數值 <code>Read books</code>。</li>
</ol>
<p><img src="https://lh3.google.com/u/0/d/167_GlrhL61N0cjpBr1eqdkAD0ESJQZ5A=w1298-h1498-iv1" alt="Day14-6"></p>
<h3 id="that-、-self-怎麼用"><a class="header-anchor" href="#that-、-self-怎麼用"></a><code>that</code> 、 <code>self</code> 怎麼用?</h3>
<p><code>this</code> 很常在執行過程中因為呼叫函式的方式改變，而 <code>this</code> 也跟著改變。</p>
<p>所以<mark>必須透過一個變數用來承接原本 <code>this</code> 的值</mark> ，而常見的寫法就是<code>that </code>或者 <code>self</code>  。</p>
<p>將前一個測試例子改寫一下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> habbit = <span class="string">&quot;Read books&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">habbit</span>: <span class="string">&quot;Read comics&quot;</span>,</span><br><span class="line">  getHabbit : <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getHabbit方法的habbit值: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">habbit</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getAnotherHabbit</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getAnotherHabbit方法的habbit值: &#x27;</span> + that.<span class="property">habbit</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getAnotherHabbit</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">getHabbit</span>();</span><br></pre></td></tr></table></figure>
<p>從圖中可以得知: 因為 <code>that</code> 的值為 <mark><code>this</code> 指向 <code>obj</code> 物件時候的值</mark>，所以 <code>that.habbit</code> 自然也就會拿到 <code>obj</code> 物件中的 <code>habbit</code> 的值 <code>Read comics</code>。</p>
<p>而 <code>that</code> 則取得 <code>obj</code> 這個物件的相關資訊。</p>
<p><img src="https://lh3.google.com/u/0/d/1rT_ySHAVkmiXG893z0Kj4pXp0Yxw-EkP=w1298-h1498-iv1" alt="Day14-7"></p>
<h3 id="在事件-event-中的-this"><a class="header-anchor" href="#在事件-event-中的-this"></a>在事件(event)中的 <code>this</code></h3>
<p><mark>事件中的 <code>this</code> 會指向那個綁定事件的元素</mark></p>
<p>寫個例子來驗證:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul class=&quot;orderList&quot;&gt;</span><br><span class="line">  &lt;li&gt;列表A&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;列表B&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;列表C&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;列表D&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;列表E&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> orderList = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.orderList&#x27;</span>);</span><br><span class="line">orderList.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,getListText);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getListText</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這裡在<code> &lt;ul&gt;&lt;/ul&gt;</code> 上 綁定 <code>click</code> 事件，所以當點擊 <code>&lt;ul&gt;&lt;/ul&gt;</code> ，會得到 <code>this</code> 值為 <code>&lt;ul&gt;&lt;/ul&gt;</code> 這個 html 標籤的所有元素。</p>
<p><img src="https://lh3.google.com/u/0/d/1vD84IxHfNq6EQ2X1S-pXyb_mN0Q-PIdd=w1298-h1498-iv1" alt="Day14-8"></p>
<h3 id="立即函式-Immediately-Invoked-Function-Expression-IIFE-的-this"><a class="header-anchor" href="#立即函式-Immediately-Invoked-Function-Expression-IIFE-的-this"></a>立即函式(Immediately Invoked Function Expression, IIFE)的 <code>this</code></h3>
<p>關於立即函式(IIFE)，在MDN中這麼解釋:</p>
<blockquote>
<p>MDN: IIFE (Immediately Invoked Function Expression) 是一個定義完馬上就執行的 JavaScript function。</p>
</blockquote>
<p>且<mark>立即函式的 <code>this</code>會指向全域</mark></p>
<p>來個測試例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1uHJ0G7Z4Q3avUjIyUIQI5c_IDxu_sMYC=w1298-h1498-iv1" alt="Day14-9"></p>
<h3 id="使用-call、apply-及-bind-指定-this-的值"><a class="header-anchor" href="#使用-call、apply-及-bind-指定-this-的值"></a>使用 <code>call</code>、<code>apply</code> 及 <code>bind</code> 指定 <code>this</code> 的值</h3>
<p>當我們如果需要一個特定的 <code>this</code> 值的時候，這時也許就會用到 <code>call</code>、<code>apply</code> 及 <code>bind</code> 強迫綁定 <code>this</code>。</p>
<p>關於 <code>call</code>、<code>apply</code> 及 <code>bind</code> 就讓我們依序往下看吧</p>
<h4 id="Function-prototype-call"><a class="header-anchor" href="#Function-prototype-call"></a>Function.prototype.call</h4>
<p>關於 <code> Function.prototype.call</code> 在MDN有這麼一段解釋:</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function/call">MDN: Function.prototype.call</a><br>
使用給定的 <code>this</code> 參數以及分別給定的參數來呼叫某個函數</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fun.<span class="title function_">call</span>(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure>
<p>簡單來說， <mark>自己定義 <code>this</code> 的值並傳給目標函式當作該函式的 <code>this</code> 值</mark></p>
<p>而MDN定義中提到的<strong>其他分別給定的參數</strong>則是 <mark>如果有設定除了 <code>this</code> 以外的參數，會將那些參數一併傳入目標函式中</mark>，如果不需要則不用設定。</p>
<p>還是很文謅謅，所以趕緊來寫個測試例子驗證看看:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Bill&quot;</span>,</span><br><span class="line">  <span class="attr">habbit</span>: <span class="string">&quot;Read Books&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">introduce</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;\&#x27;s habbit is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">habbit</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">introduce.<span class="title function_">call</span>(obj);</span><br></pre></td></tr></table></figure>
<p>前面有提到，當 <mark>直接呼叫函式的時候， <code>this</code> 指向全域</mark></p>
<p>但是當我們透過 <code>call()</code> 方法 <mark>將 <code>obj</code> 物件當作 <code>this</code> 傳入 <code>introduce</code> 函式的時候</mark>，此時已經綁定 <code>this</code> ，所以 <code>introduce</code> 函式才得以使用 <code>obj</code> 物件中的值。</p>
<p><img src="https://lh3.google.com/u/0/d/1RNd0bEpmd8wWe9rIGZTNUn3BRW5WOeva=w1298-h1498-iv1" alt="Day14-10"></p>
<p>來看看有額外設定其他參數時的情況:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;總和為: &#x27;</span> + (a+b));</span><br><span class="line">&#125;</span><br><span class="line">add.<span class="title function_">call</span>(<span class="literal">null</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/1_EOQieUqWb6ZafLwN33B2ZzdHGfJvyle=w1298-h1498-iv1" alt="Day14-11"></p>
<p>從結果可以看到， <code>this</code> 會是指向全域，而數值2及數值3被傳入  <code>add</code> 函式中，所以可以獲得加總後的值為 5。</p>
<h4 id="Function-prototype-apply"><a class="header-anchor" href="#Function-prototype-apply"></a>Function.prototype.apply()</h4>
<p>關於 <code> Function.prototype.apply</code> 在MDN有這麼一段解釋:</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">MDN: Function.prototype.apply</a><br>
apply() 方法會呼叫一個以 <code>this</code> 的代表值和一個陣列形式的值組(或是一個 array-like object )為參數的函式。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fun.<span class="title function_">apply</span>(thisArg, [argsArray])</span><br></pre></td></tr></table></figure>
<p>和 <code>call()</code> 差別在於 <mark><code>call()</code>接受一連串的參數傳入，而 <code>apply()</code> 只接受陣列型式的參數</mark></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Bill&quot;</span>,</span><br><span class="line">  <span class="attr">habbit</span>: <span class="string">&quot;Read Books&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">introduce</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;\&#x27;s habbit is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">habbit</span>);</span><br><span class="line">&#125;</span><br><span class="line">introduce.<span class="title function_">apply</span>(obj);</span><br></pre></td></tr></table></figure>
<p>可以這邊看起來和 <code>call()</code> 執行結果沒有差別</p>
<p><img src="https://lh3.google.com/u/0/d/1ojdayKV99LfsU60Qi6a4X1DptpxE6QVj=w1298-h1498-iv1" alt="Day14-12"></p>
<p>所以我們再往下看看有額外的參數需要被輸入時的情形:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">numberAry</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(numberAry);</span><br><span class="line">  <span class="keyword">const</span> sumTotal = numberAry.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc,number</span>)=&gt;</span> acc + number,<span class="number">0</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;總和為: &#x27;</span> + sumTotal);</span><br><span class="line">&#125;</span><br><span class="line">add.<span class="title function_">call</span>(<span class="literal">null</span>,[<span class="number">2</span>,<span class="number">3</span>]);</span><br></pre></td></tr></table></figure>
<p>因為接受陣列型別的參數，所以可以透過陣列的方法操作元素中的值，獲得總和值為 <code>5</code>。</p>
<p><img src="https://lh3.google.com/u/0/d/1_NurCl_g7pYzL8SfqVF-O4UuSLFFEJig=w1298-h1498-iv1" alt="Day14-13"></p>
<h4 id="Function-prototype-bind"><a class="header-anchor" href="#Function-prototype-bind"></a>Function.prototype.bind()</h4>
<p>最後一個是 <code>bind()</code> 方法， 在MDN有這麼一段解釋:</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">MDN: Function.prototype.bind()</a><br>
bind() 方法，會建立一個新函式。該函式被呼叫時，會將 this 關鍵字設為給定的參數，並在呼叫時，帶有提供之前，給定順序的參數。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fun.<span class="title function_">bind</span>(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure>
<p>和前兩者差別為 <mark>使用 <code>bind()</code> 會回傳一個綁定自定義 <code>this</code> 值的函式提供我們呼叫。</mark></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Bill&quot;</span>,</span><br><span class="line">  <span class="attr">habbit</span>: <span class="string">&quot;Read Books&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">introduce</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;\&#x27;s habbit is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">habbit</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newIntroduce = introduce.<span class="title function_">bind</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newIntroduce);</span><br><span class="line"><span class="title function_">newIntroduce</span>();</span><br></pre></td></tr></table></figure>
<p>從圖中可以看到透過變數 <code>newIntroduce</code> 儲存了 <mark>已經綁定 <code>this</code> 後的 <code>introduce</code>函式</mark>，而這裡的 <code>this</code> 指向的是 <code>obj</code> 物件。</p>
<p>所以當我們呼叫 <code>newIntroduce</code> 函式時，就可以取得與 <code>call()</code> 、 <code>apply()</code> 一樣的結果。</p>
<p><img src="https://lh3.google.com/u/0/d/1Ugi0uzmUMuFg1DvUTWERgoscJJ_Du6Tz=w1314-h1530-iv1" alt="Day14-14"></p>
<h3 id="建構式的-this"><a class="header-anchor" href="#建構式的-this"></a>建構式的 <code>this</code></h3>
<p><mark>建構式的 <code>this</code> 指向使用 <code>new</code> 關鍵字所建立的物件</mark></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age,habbit</span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">habbit</span> = habbit;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Bill&#x27;</span>,<span class="number">22</span>,<span class="string">&#x27;Read&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://lh3.google.com/u/0/d/16PG6Wdt74WMthgCvhQRvLz5EQ_6anmp2=w1314-h1530-iv1" alt="Day14-15"></p>
<h2 id="ES6之後的-this"><a class="header-anchor" href="#ES6之後的-this"></a>ES6之後的 <code>this</code></h2>
<p>ES6之後對於 <code>this</code> 有了額外的定義:</p>
<h3 id="箭頭函式-arrow-function-的this"><a class="header-anchor" href="#箭頭函式-arrow-function-的this"></a>箭頭函式(arrow function) 的<code>this</code></h3>
<blockquote>
<p>箭頭函式並不擁有自己的 this 變數；使用的 this 值來自封閉的文本上下文，也就是說，箭頭函式遵循常規變量查找規則。因此，如果在當前範圍中搜索不到 this 變量時，他們最終會尋找其封閉範圍。<br>
<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions#this_%E4%B8%8D%E5%88%86%E5%AE%B6">箭頭函式的this</a></p>
</blockquote>
<p>簡單來說，大致可以歸納出幾個重點:</p>
<ol>
<li>箭頭函式(arrow function) <mark>沒有自己的 <code>this</code></mark></li>
<li>箭頭函式(arrow function)的 <code>this</code> 綁定會透過 範圍鏈(scope chain) 的觀念找到其作用域的this指向，並當作自己的this。</li>
</ol>
<p>在往下講之前，需要先稍微了解一下什麼是範圍鏈(scope chain)。</p>
<p>範圍鏈(scope chain) 的概念會於閉包(closure)的篇幅來詳細的理解。</p>
<p>這邊只要知道 <mark>當變數在自己的執行環境中如果找不到該變數，就會往外層尋找，直到找到後才停止</mark></p>
<p>來看個測試例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Bill&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getName</span>();</span><br></pre></td></tr></table></figure>
<p>當執行 <code>getName</code> 函式時，因為在函式的執行環境中沒有 <code>name</code> 這個變數，所以會依照範圍鏈(scope chain)的概念往外層尋找，所以會找到位於全域的 <code>name</code> 變數的值 <code>Bill</code></p>
<p>了解箭頭函式(arrow function)的 <code>this</code> 與範圍鏈(scope chain)的觀念後，再來要看看測試的例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Bill&quot;</span>,</span><br><span class="line">  <span class="attr">checkThis</span>: <span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">checkThis</span>();</span><br></pre></td></tr></table></figure>
<p>箭頭函式的 <code>this</code> 會透過範圍鏈(scope chain)的觀念往外層尋找看看作用域的 <code>this</code> 是指向誰，會發現 <code>this</code> 指向 全域(因為<code>obj</code>物件位於全域)，所以箭頭函式的 <code>this</code> 指向 全域，於是就會得到 <code>name</code> 的值 <code>Jack</code></p>
<p>讓我們再看看另一個例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Bill&quot;</span>,</span><br><span class="line">  <span class="attr">checkThis</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    test = <span class="function">() =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);&#125;</span><br><span class="line">    <span class="title function_">test</span>(); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">checkThis</span>();</span><br></pre></td></tr></table></figure>
<p>箭頭函式的 <code>this</code> 會透過範圍鏈(scope chain)的觀念往外層尋找看看作用域的 <code>this</code> 是指向誰，會發現 <code>this</code> 指向<code>obj</code> 物件(因為箭頭函式 <code>test</code> 的外層 <code>checkThis</code> 函式指向 <code>obj</code>物件)，於是就會得到 <code>name</code> 的值 <code>Bill</code>。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day47-閉包(closure)</title>
    <url>/2019/07/13/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day47-%E9%96%89%E5%8C%85-closure/</url>
    <content><![CDATA[<h1 id="JavaScript-閉包-Closure"><a class="header-anchor" href="#JavaScript-閉包-Closure"></a>JavaScript 閉包(Closure)</h1>
<h2 id="閉包-closure-要先懂的一些觀念"><a class="header-anchor" href="#閉包-closure-要先懂的一些觀念"></a>閉包(closure)要先懂的一些觀念</h2>
<ol>
<li>JavaScript在執行時變數(variable)與函式(function)的流程</li>
<li>範疇鍊(scope chain)</li>
<li>閉包可以保留函式執行結束後，其外層作用域函式的變數</li>
</ol>
<span id="more"></span>
<p>接下來就來一一對於前面三點做個深入的理解</p>
<h3 id="JavaScript在執行時變數與函式的運作"><a class="header-anchor" href="#JavaScript在執行時變數與函式的運作"></a>JavaScript在執行時變數與函式的運作</h3>
<ol>
<li>JavaScript在執行時，會將變數、函式存入記憶體(hoisting行為)</li>
<li>當變數被賦予值時，將值指定給變數</li>
<li>函式被調用時，會建立自己的執行環境(Execution Context)，並將函式中的變數或函式一併存入記憶體中等待後續的執行</li>
<li>執行完成後，JavaScript 會執行垃圾回收的行為(garbage collection)，將執行完成的函式、變數等一併清除。</li>
</ol>
<h3 id="範疇鍊-scope-chain"><a class="header-anchor" href="#範疇鍊-scope-chain"></a>範疇鍊(scope chain)</h3>
<p>當函式的變數在 <mark>自己的範疇(scope)中找不到符合的值時，會往外層範疇(scope)尋找</mark>，直到找到全域後才停止，而這也稱為範疇鍊(scope chain)。</p>
<p>來看看這個測試例子了解一下範疇鍊(scope chain):</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">&quot;This is a text&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getText</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getText</span>();</span><br></pre></td></tr></table></figure>
<p><code>getText</code> 函式中因為沒有變數 <code>text</code>，所以往外層的全域尋 <code>text</code> 變數並使用它的值 <code>This is a text</code>。</p>
<p><img src="https://lh3.google.com/u/0/d/1cwrmXWRupCUot56gHmjNo4h3lrhu9rsG=w1314-h1530-iv1" alt="Day15-1"></p>
<h3 id="閉包可以保留函式執行結束後，在該函式裡面的變數"><a class="header-anchor" href="#閉包可以保留函式執行結束後，在該函式裡面的變數"></a>閉包可以保留函式執行結束後，在該函式裡面的變數</h3>
<p>直接透過一個測試例子來看看:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outerScope</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> scope = <span class="string">&#x27;This is outer scope value&#x27;</span>; </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> scope;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getText = <span class="title function_">outerScope</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getText);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getText</span>());</span><br></pre></td></tr></table></figure>
<p>來看看程式碼執行的流程:</p>
<ol>
<li>JavaScript執行時，將 <code>outerScope</code> 函式 、 <code>getText</code> 變數 存入記憶體中，等待被執行。</li>
<li>當要取得 <code>getText</code> 變數的值時， <code>outerScope</code> 函式被執行，建立 <code>outerScope</code> 函式的執行環境，回傳內部的函式，到這裡所獲得的是 <code>console.log(getText);</code> 的結果。</li>
<li><code>outerScope</code> 函式執行完成後會被JavaScript清除，但是 <code>scope</code> 變數會被保留，<mark>因為最內層的函式需要在被執行時取得 <code>scope</code> 變數的值。</mark></li>
<li>而此時的 <code>getText</code> 的值是一個函式，所以當執行這個函式時，裡面的 <code>scope</code> 變數在自己的範疇(scope)找不到這個變數，所以往外層 <code>outerScope</code> 函式中尋找並得到值 <code>This is outer scope value</code>，這裡是<code>console.log(getText());</code> 的結果。</li>
</ol>
<p>而這就是一個完整閉包的運作流程。</p>
<p><img src="https://lh3.google.com/u/0/d/1gtw13qB6sPD_2Sx_S0ao646GGJdXVhlJ=w1314-h1530-iv1" alt="Day15-2"></p>
<h2 id="讓我們再看看一個經典的例子"><a class="header-anchor" href="#讓我們再看看一個經典的例子"></a>讓我們再看看一個經典的例子:</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> arr =[];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">test</span>();</span><br><span class="line">result[<span class="number">0</span>]();</span><br><span class="line">result[<span class="number">1</span>]();</span><br><span class="line">result[<span class="number">2</span>]();</span><br></pre></td></tr></table></figure>
<p>此時 <code>result</code> 的值為一組儲存了三個函式的元素，當依序取出函式中的 <code>i</code> 的值時，預期要得到的值分別為 <code>0</code>、<code>1</code>、<code>2</code>。</p>
<p>但透過下圖可以發現結果卻不如預期:</p>
<p><img src="https://lh3.google.com/u/0/d/1sAmZ4KRA0k1YorITnkUbESm1PFfZL_ge=w1314-h1530-iv1" alt="Day15-3"></p>
<p>來試著了解程式執行的操作流程:</p>
<ol>
<li>JavaScript執行時，將 <code>test</code> 函式 、 <code>result</code> 變數 存入記憶體中，等待被執行。</li>
<li>當要取得 <code>result</code> 變數的值時， <code>test</code> 函式被執行，建立 <code>test</code> 函式的執行環境，<code>for</code> 迴圈會依序將函式作為元素值存入陣列中，這邊要注意的是<mark>作為陣列元素存入的函式還沒有被執行，所以並不會得到值為 <code>0</code>、<code>1</code>、<code>2</code>。</mark></li>
<li>當依序執行 <code>result[0]()</code>、<code>result[1]()</code>、<code>result[2]()</code>時，因為閉包(closure)的觀念，內部函式會取得 <code>for</code> 迴圈的 <code>i</code> 值，<mark>此時的 <code>i</code> 值則是已經跑完 <code>for</code> 迴圈後的值，而且因為處於相同的範疇(scope)，所以所有的執行結果最後都會拿到值為 <code>3</code></mark></li>
</ol>
<p>因為 JS 在ES6之前是 <mark>函式範疇(function scope)</mark>，所以上述的程式碼在每次執行時，<code>i</code> 都是處於同一個範疇(scope)中，進而得到上述的結論。</p>
<p>那要怎麼樣才能得到預期的結果，輸出為 <code>0</code>、<code>1</code>、<code>2</code> 呢?</p>
<p>剛剛有提到因為處於同一個範疇(scope)中而導致不是預期的結果，所以是不是 <mark>讓每次的 <code>i</code> 值都處於不同的範疇(scope)中就可以解決了?</mark></p>
<h2 id="兩種建立新的範疇-scope-方式"><a class="header-anchor" href="#兩種建立新的範疇-scope-方式"></a>兩種建立新的範疇(scope)方式:</h2>
<ol>
<li>IIEF 立即函式</li>
<li>ES6之後的 <code>let</code> 、 <code>const</code> 變數</li>
</ol>
<p>首先先來看看透過 IIFE 立即函式改寫後的測試例子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> arr =[];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">    arr.<span class="title function_">push</span>((<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;)());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">test</span>();</span><br></pre></td></tr></table></figure>
<p>IIFE 會建立一個新的範疇(scope)，所以在每次的 <code>for</code> 迴圈都建立一個新的範疇(scope)就能得到預期的值</p>
<p><img src="https://lh3.google.com/u/0/d/1NK3jkrY9QnNxUkE7mPtJevQmW02Iogcv=w1314-h1530-iv1" alt="Day15-4"></p>
<p>再來看看透過 ES6 的 <code>let</code> 、 <code>const</code> 變數:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> arr =[];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">    arr.<span class="title function_">push</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">test</span>();</span><br><span class="line">result[<span class="number">0</span>]();</span><br><span class="line">result[<span class="number">1</span>]();</span><br><span class="line">result[<span class="number">2</span>]();</span><br></pre></td></tr></table></figure>
<p>因為 <code>let</code> 、 <code>const</code> 變數會建立 區塊範疇(block scope)，所以在每次在執行 <code>for</code> 迴圈時都是處於不同的範疇(scope)，所以也能達到預期的結果。</p>
<p><img src="https://lh3.google.com/u/0/d/1dFNygCewZHgyJ2s9EmPk95t0sbYDcHjS=w1318-h1530-iv1" alt="Day15-5"></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day39-Javascript-述句-part3</title>
    <url>/2019/07/05/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day39-Javascript-%E8%BF%B0%E5%8F%A5-part3/</url>
    <content><![CDATA[<h3 id="try-catch-finally"><a class="header-anchor" href="#try-catch-finally"></a>try/catch/finally</h3>
<p>用來處理Javascript的例外機制</p>
<span id="more"></span>
<p>Ex:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  正常情況下，這個區塊的程式碼會依序執行，但當有丟出(throw)例外狀況時，就會將例外狀況丟入catch區塊處理。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// node js 於終端機輸入參數的方式</span></span><br><span class="line">  <span class="keyword">let</span> numInput = process.<span class="property">argv</span>[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">if</span> (numInput == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;符合條件：輸入為1&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> numInput;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  catch區塊透過 e 這個區域變數承接try區塊中所丟出的例外情況的訊息，而且除了值以外，也可以承接Error物件的內容。 </span></span><br><span class="line"><span class="comment">  而這裡的e為try區塊 throw的 numInput</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不符合條件，你輸入的值為&#x27;</span> + e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  finally區塊所包含的述句永遠會被執行。</span></span><br><span class="line"><span class="comment">  當try區塊以下列方式終止時，也會執行。</span></span><br><span class="line"><span class="comment">  1. 抵達區塊結尾正常結束</span></span><br><span class="line"><span class="comment">  2. 因為break / continue / return  </span></span><br><span class="line"><span class="comment">  3. catch有接到錯誤訊息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  狀況題：當使用try/catch/finally時，全域有撰寫一程式碼為 console.log(&#x27;test&#x27;)，試看執行時的情況。</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  1. 抵達區塊結尾正常結束 : try &gt; finally ，外部 console.log不執行</span></span><br><span class="line"><span class="comment">  2. 因為break / continue / return  :</span></span><br><span class="line"><span class="comment">    - 正常情況結束 ： try &gt; finally ，外部 console.log不執行</span></span><br><span class="line"><span class="comment">    - 有例外情況時：  try &gt; catch &gt; finally ，外部 console.log會執行。若是沒有自己的catch子句處理例外情況的話，則會先執行finally區塊，然後跳至最接近的catch子句</span></span><br><span class="line"><span class="comment">  3. catch有接到錯誤訊息:try &gt; catch &gt; finally ，外部 console.log會執行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">  numInput = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(numInput);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="其他述句"><a class="header-anchor" href="#其他述句"></a>其他述句</h2>
<h3 id="with"><a class="header-anchor" href="#with"></a>with</h3>
<p>可以更容易讀取深層巢狀的物件階層。</p>
<ul>
<li>語法：<br>
with(object){<br>
statement<br>
}</li>
<li>在strict模式中被禁用，而在非strict中也應該盡可能不要用到。因為使用with的程式碼很難優化。</li>
</ul>
<p>Ex:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">WangFamily</span> = &#123;</span><br><span class="line">  <span class="attr">father</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">27</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//雖然使用with子句可以更容易讀取WangFamily這個物件的深層特性(name、age)，但還是少用為妙。</span></span><br><span class="line"><span class="keyword">with</span> (<span class="title class_">WangFamily</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="property">name</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="debugger"><a class="header-anchor" href="#debugger"></a>debugger</h3>
<p>透過在需要除錯的程式碼區塊設定debugger，就可以透過瀏覽器查看相關除錯訊息、執行順序</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">WangFamily</span> = &#123;</span><br><span class="line">  <span class="attr">father</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Bill&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">27</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用with子句可以更容易讀取WangFamily這個物件的深層特性(name、age)。</span></span><br><span class="line"><span class="keyword">with</span> (<span class="title class_">WangFamily</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="property">name</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="property">age</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//設定中斷點</span></span><br><span class="line">  <span class="keyword">debugger</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day50-關於瀏覽器的window物件</title>
    <url>/2019/07/16/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day50-%E9%97%9C%E6%96%BC%E7%80%8F%E8%A6%BD%E5%99%A8%E7%9A%84window%E7%89%A9%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="window物件"><a class="header-anchor" href="#window物件"></a>window物件</h1>
<p>透過瀏覽器的開發者工具，打上window指令時可以看到很多特性，而這些特性都是我們可以用來實現需求的方法。</p>
<p>所以透過這篇記錄，會慢慢的將有使用上的方法都新增到這裡。</p>
<span id="more"></span>
<h2 id="setTimeout-setInterval"><a class="header-anchor" href="#setTimeout-setInterval"></a>setTimeout() / setInterval()</h2>
<ul>
<li>預設的時間單位: 毫秒(ms)</li>
<li>setTimeout():當符合指定時間時，會執行函式一次</li>
<li>setInterval():依照指定的時間作為每次執行的間隔，並不斷的執行函式</li>
</ul>
<p>Ex: setTimeout()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 1.當2秒時，會執行sayHello這個函式，並回傳Hello World。</span></span><br><span class="line"><span class="comment"> 2.而setTimeout()的this指向window</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(sayHello,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure>
<p>Ex1: setInterval()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 1.每2秒時就會執行sayHello這個函式，並回傳Hello World。</span></span><br><span class="line"><span class="comment"> 2.setInterval()的this指向window</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(sayHello,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure>
<h2 id="location-物件"><a class="header-anchor" href="#location-物件"></a>location 物件</h2>
<ul>
<li>window的location指向一個location物件，代表當前視窗文件的URL</li>
<li>Document物件也有一個location物件，兩者指向的是同一個location物件</li>
<li>location物件中：
<ul>
<li>assign:可以指定要跳轉頁面的URL，<strong>跳轉後，若點擊上一頁則可以回到前一個歷程記錄</strong></li>
<li>replace:類似assign，可以指定要跳轉頁面的URL，<strong>但是若點擊上一頁，則不會回到前一個歷程記錄，因為replace在跳轉至新頁面時，會將歷程紀錄都刪除。</strong><br>
Ex:location(以google網頁為例)</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//http://www.google.com</span></span><br><span class="line"><span class="comment">//取出location物件中的search特性的字串，並以&amp;作為分隔將字串存入陣列。</span></span><br><span class="line"><span class="keyword">let</span> ary = [];</span><br><span class="line"><span class="keyword">let</span> searchUrl = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>;</span><br><span class="line"><span class="keyword">let</span> searchUrlAry = searchUrl.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>).<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(searchUrlAry);</span><br></pre></td></tr></table></figure>
<p>Ex2:比較location物件中的assign/replace特性(以google跳轉yahoo為例)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先連結至google頁面，並將下面程式碼貼上瀏覽器的開發者工具查看</span></span><br><span class="line"><span class="comment">//assgin點擊上一頁會跳回google頁面</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">assign</span>(<span class="string">&quot;http://www.yahoo.com.tw&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//replace點擊上一頁不會跳回google頁面</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">replace</span>(<span class="string">&quot;http://www.yahoo.com.tw&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="history-物件"><a class="header-anchor" href="#history-物件"></a>history 物件</h2>
<ul>
<li>
<p>window的history特性指向一個history物件</p>
</li>
<li>
<p>可用於操作瀏覽歷程，如上一頁、下一頁或者跳至特定數目的頁面等這類功能</p>
<ul>
<li>back()</li>
<li>forward()</li>
<li>go():以當前頁面為基準，正數會往下跳至指定的頁面;負數會往回到至指定的頁面</li>
</ul>
</li>
<li>
<p>安全性考量，所以無法透過指令存取這些歷程記錄的URL</p>
</li>
</ul>
<p>Ex: 測試back()/forward/go()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先連結至google頁面，並將下面程式碼貼上瀏覽器的開發者工具查看(執行完一行後在執行下一行)</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">back</span>();</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">forward</span>();</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">go</span>(-<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<h2 id="navigator物件"><a class="header-anchor" href="#navigator物件"></a>navigator物件</h2>
<ul>
<li>可以該特性取得瀏覽器的資訊等，<strong>用於要處理特定瀏覽器的特定版本時會很有幫助</strong></li>
</ul>
<p>Ex:透過navigator特性取得一些資訊</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">appName</span>);<span class="comment">// web瀏覽器完整名稱</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">appVersion</span>);<span class="comment">//瀏覽器供應商與版本號碼資訊</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">userAgent</span>);<span class="comment">//包含了許多資訊，通常也會包含appVersion的所有資訊</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">platform</span>);<span class="comment">//辨別運作於哪種系統</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">online</span>);<span class="comment">//辨別瀏覽器是不是正連接至網路</span></span><br></pre></td></tr></table></figure>
<h2 id="screen-物件"><a class="header-anchor" href="#screen-物件"></a>screen 物件</h2>
<ul>
<li>可以提供使用者顯示器寬高，或者實際可供顯示的寬高等資訊</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">scree</span>.<span class="property">width</span>;<span class="comment">//取得使用者顯示器寬度</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">scree</span>.<span class="property">availHeight</span>;<span class="comment">//取得使用者顯示器可用於顯示瀏覽器畫面的寬度(已經扣除工作列等高度)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day51-使用Javascript操作DOM(Document Object Model) part1</title>
    <url>/2019/07/17/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day51-%E4%BD%BF%E7%94%A8Javascript%E6%93%8D%E4%BD%9CDOM-Document-Object-Model-part1/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>使用Javascript操作DOM(Document Object Model)
<ul>
<li>關於DOM的樣子</li>
<li>選取DOM元素
<ul>
<li>特定的id屬性
<ul>
<li>document.getElementById(‘id’)</li>
</ul>
</li>
<li>表單元素的name屬性
<ul>
<li>document.getElementByName(‘name’)</li>
</ul>
</li>
<li>透過取得html tag名稱操作
<ul>
<li>document.getElementByTagName</li>
</ul>
</li>
<li>class名稱
<ul>
<li>document.getElementByClassName</li>
</ul>
</li>
<li>搭配css selector選擇器
<ul>
<li>document.querySelector(’#id / class / html tag’)</li>
<li>document.querySelectorAll(‘class’)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="使用Javascript操作DOM-Document-Object-Model-part1"><a class="header-anchor" href="#使用Javascript操作DOM-Document-Object-Model-part1"></a>使用Javascript操作DOM(Document Object Model) part1</h1>
<p>DOM是W3C制訂的一個規範，是獨立於平台和語言的標準。並提供了一組DOM的API用於操作DOM使用，讓我們可以修改結構、樣式與內容</p>
<h2 id="關於DOM的樣子"><a class="header-anchor" href="#關於DOM的樣子"></a>關於DOM的樣子</h2>
<p>所有我們在透過html語言撰寫的程式碼的都會被轉為類似樹狀的結構圖，如下</p>
<p>Ex:簡單的html架構與樹狀圖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Doucment&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;An Document&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;This is a &lt;b&gt;simple&lt;/b&gt; </span><br><span class="line">.&lt;/p&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/hpIdqUI.png" alt=""></p>
<h2 id="選取DOM元素"><a class="header-anchor" href="#選取DOM元素"></a>選取DOM元素</h2>
<p>有幾種方式可以用於選取元素(element)</p>
<ul>
<li>特定的id屬性</li>
<li>表單元素的name屬性</li>
<li>透過取得html tag名稱操作</li>
<li>class名稱</li>
<li>搭配css selector選擇器</li>
</ul>
<h3 id="特定的id屬性"><a class="header-anchor" href="#特定的id屬性"></a>特定的id屬性</h3>
<p>在html tag中我們可以透過 <strong>id</strong> 對該元素設定樣式，而在js中我們也可以透過取得該元素的id對那個元素作動態的操作</p>
<ul>
<li>語法：document.getElementById(‘id’)</li>
</ul>
<p>Ex: document.getElementById的使用(使用編輯器編譯並開起網頁查看)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 id=&quot;title&quot;&gt;This is a title.&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">//透過id操作 h1 tag</span></span><br><span class="line"><span class="comment">//為了更直觀呈現，使用了監聽事件的語法addEventListener</span></span><br><span class="line"><span class="comment">//點擊文字查看效果</span></span><br><span class="line"><span class="keyword">let</span> h1Title = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;title&#x27;</span>);</span><br><span class="line">h1Title.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, hoverTitle, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hoverTitle</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  h1Title.<span class="property">textContent</span> = <span class="string">&#x27; This is a new title.&#x27;</span>;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="表單元素的name屬性"><a class="header-anchor" href="#表單元素的name屬性"></a>表單元素的name屬性</h3>
<p>表單元素都有一個name的屬性，所以我們可以透過下列語法操作表單元素</p>
<ul>
<li>document.getElementByName(‘name’)</li>
<li>這個語法會回傳一個NodeList的物件(也就是array-like物件)，所以可以透過length這個特性進行一些操作</li>
</ul>
<p>Ex1: document.getElementsByName的使用(使用編輯器編譯並開起網頁查看)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;#&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;usertext&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;usertext&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">//透過name屬性操作 表單元素</span></span><br><span class="line"><span class="comment">//會取得NodeList物件，透過length特性改變輸入時的文字顏色為紅色</span></span><br><span class="line"><span class="keyword">let</span> inputUsetText = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;usertext&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; inputUsetText.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  inputUsetText[i].<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;#f00&#x27;</span>;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="透過取得html-tag名稱操作"><a class="header-anchor" href="#透過取得html-tag名稱操作"></a>透過取得html tag名稱操作</h3>
<ul>
<li>document.getElementByTagName</li>
<li>這個語法會回傳一個NodeList的物件(也就是array-like物件)，所以可以透過length這個特性進行一些操作</li>
</ul>
<p>Ex2: document.getElementsByTagName的使用(使用編輯器編譯並開起網頁查看)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;This is a main title.&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;This is a sub title.&lt;/h2&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//透過選取 h2 tag操作h2</span></span><br><span class="line"><span class="comment">//因為會回傳NodeList物件，所以可以透過length的特性將文字顏色改變為紅色</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">let</span> h2Title = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;h2&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; h2Title.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    h2Title[i].<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;#f00&quot;</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="class名稱"><a class="header-anchor" href="#class名稱"></a>class名稱</h3>
<ul>
<li>document.getElementByClassName</li>
<li>這個語法會回傳一個NodeList的物件(也就是array-like物件)，所以可以透過length這個特性進行一些操作</li>
</ul>
<p>Ex3: document.getElementsByClassName的使用(使用編輯器編譯並開起網頁查看)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h2 class=&quot;title&quot;&gt;This is a main title.&lt;/h2&gt;</span><br><span class="line">&lt;h2 class=&quot;title&quot;&gt;This is a sub title.&lt;/h2&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//透過選取 class名稱 操作h2</span></span><br><span class="line"><span class="comment">//因為會回傳NodeList物件，所以可以透過length的特性將文字顏色改變為紅色</span></span><br><span class="line"><span class="keyword">let</span> h2Title = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;title&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; h2Title.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    h2Title[i].<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;#f00&quot;</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="搭配css-selector選擇器"><a class="header-anchor" href="#搭配css-selector選擇器"></a>搭配css selector選擇器</h3>
<ul>
<li>document.querySelector(‘#id / class / html tag’)
<ul>
<li>可以透過id、class或者html tag操作元素</li>
<li>如果有多個相同名稱的元素，但只會回傳第一個元素的結果</li>
</ul>
</li>
<li>document.querySelectorAll(‘class’)
<ul>
<li>可以用於多個相同名稱的元素</li>
<li>這個語法會回傳一個NodeList的物件(也就是array-like物件)，所以可以透過length這個特性進行一些操作</li>
</ul>
</li>
</ul>
<p>Ex4: document.querySelector(‘#id / class / html tag’)的使用(使用編輯器編譯並開起網頁查看)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h2 class=&quot;title&quot;&gt;This is a main title.&lt;/h2&gt;</span><br><span class="line">&lt;h2 class=&quot;title&quot;&gt;This is a sub title.&lt;/h2&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//透過選取 class名稱 操作h2</span></span><br><span class="line"><span class="comment">//因為會回傳NodeList物件，所以可以透過length的特性將文字顏色改變為紅色</span></span><br><span class="line"><span class="keyword">let</span> h2Title = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.title&#x27;</span>);</span><br><span class="line">h2Title.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;#f00&quot;</span>;  </span><br></pre></td></tr></table></figure>
<p>Ex5: document.querySelectorAll( ’ class / html tag’)的使用(使用編輯器編譯並開起網頁查看)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h2 class=&quot;title&quot;&gt;This is a main title.&lt;/h2&gt;</span><br><span class="line">&lt;h2 class=&quot;title&quot;&gt;This is a sub title.&lt;/h2&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//透過選取 class名稱 操作h2</span></span><br><span class="line"><span class="comment">//因為會回傳NodeList物件，所以可以透過length的特性將文字顏色改變為紅色</span></span><br><span class="line"><span class="keyword">let</span> h2Title = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.title&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;h2Title.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    h2Title[i].<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;#f00&quot;</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day52-箭頭函式(arrow function)</title>
    <url>/2019/07/18/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day52-%E7%AE%AD%E9%A0%AD%E5%87%BD%E5%BC%8F-arrow-function/</url>
    <content><![CDATA[<h1 id="ES6-箭頭函式-arrow-function"><a class="header-anchor" href="#ES6-箭頭函式-arrow-function"></a>ES6 箭頭函式(arrow function)</h1>
<p>今天要提的部分是關於 ES6的新語法，箭頭函式(arrow function)。</p>
<p>它與ES6之前的函式有著一些差別:</p>
<ul>
<li>箭頭函式(arrow function) 特有寫法</li>
<li>箭頭函式(arrow function) 沒有自己的this</li>
<li>箭頭函式(arrow function) 沒有自己的arguments</li>
<li>箭頭函式(arrow function) 不能用作建構式，因此沒有自己的prototype</li>
<li>箭頭函式(arrow function)的this不因為 call()/apply()/bind()而被修改</li>
</ul>
<span id="more"></span>
<h2 id="箭頭函式-arrow-function-的特有寫法"><a class="header-anchor" href="#箭頭函式-arrow-function-的特有寫法"></a>箭頭函式(arrow function)的特有寫法</h2>
<p>箭頭函式有著全新樣貌的寫法，整理如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">arrowFunc</span> = (<span class="params"></span>) =&gt;&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test&#x27;</span>);&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">arrowFunc2</span> = a =&gt; &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(a);&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">arrowFunc3</span> = a =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">arrowFunc4</span> = (<span class="params">a,b</span>)=&gt;&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(a+b);&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">arrowFunc5</span> = (<span class="params"></span>)=&gt;(&#123;<span class="attr">name</span>:<span class="string">&quot;Bill&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>
<ol>
<li>如果<mark>沒有參數</mark>，可以只寫 <code>()</code>，如 <code>arrowFunc</code></li>
<li>如果<mark>只有一個參數</mark>，可以不寫 <code>()</code>，如 <code>arrowFunc2</code></li>
<li>如果<mark>程式碼行數只有單行</mark>，可以不需要 <code>&#123;&#125;</code>，如 <code>arrowFunc3</code></li>
<li>如果<mark>有兩個參數以上</mark>，則必須寫 <code>()</code>，如 <code>arrowFunc4</code></li>
<li>如果是<mark>物件格式</mark>，因為 <code>&#123;&#125;</code> 在箭頭函式中有意義， 所以必須要用 <code>()</code> 將整個物件包住，如<code>arrowFunc5</code></li>
</ol>
<h2 id="箭頭函式-arrow-function-沒有自己的this"><a class="header-anchor" href="#箭頭函式-arrow-function-沒有自己的this"></a>箭頭函式(arrow function)沒有自己的this</h2>
<p>因為箭頭函式沒有自己的 <code>this</code>，所以依照範疇鍊(scope chain)的觀念會往外層找。</p>
<p>來看看測試例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Jin&#x27;</span>,</span><br><span class="line">    <span class="attr">callName</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">callName</span>();</span><br></pre></td></tr></table></figure>
<p><code>setTimeout</code> 裡面為一個箭頭函式，所以會往外層的匿名函式尋找 <code>this</code> ，並拿來使用。而匿名函式的 <code>this</code> 因為是透過方法調用所以指向 <code>obj()</code>。</p>
<p><img src="https://i.imgur.com/p3vJcRs.png" alt=""></p>
<p>但如果是下面這個例子的話:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name=<span class="string">&#x27;Bill&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Jin&#x27;</span>,</span><br><span class="line">    <span class="attr">callName</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">callName</span>();</span><br></pre></td></tr></table></figure>
<p>因為箭頭函式的外層作用域就是全域，所以 <code>this</code> 指向全域，也得到全域變數 <code>name</code> 的值 <code>Bill</code></p>
<p><img src="https://i.imgur.com/rxiHoiz.png" alt=""></p>
<h2 id="箭頭函式-arrow-function-沒有arguments"><a class="header-anchor" href="#箭頭函式-arrow-function-沒有arguments"></a>箭頭函式(arrow function)沒有arguments</h2>
<p>直接看看箭頭函式與 ES6之前的函式使用 <code>arguments</code> 的差別</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable language_">arguments</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">arr</span> = (<span class="params"></span>) =&gt; <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arr</span>()); </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">arguments</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arr2</span>(<span class="number">1</span>,<span class="number">2</span>)); </span><br></pre></td></tr></table></figure>
<p>對於箭頭函式而言 <code>arguments</code> 只是單純的一個變數。但對於ES6之前的函式 <code>arguments</code>則是一個物件</p>
<p><img src="https://i.imgur.com/eCTu9Ba.png" alt=""></p>
<h2 id="箭頭函式-arrow-function-不能用作建構式，也沒有自己的prototype"><a class="header-anchor" href="#箭頭函式-arrow-function-不能用作建構式，也沒有自己的prototype"></a>箭頭函式(arrow function) 不能用作建構式，也沒有自己的prototype</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">car</span> = (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> toyota = <span class="keyword">new</span> <span class="title function_">car</span>(); </span><br></pre></td></tr></table></figure>
<p>箭頭函式用於建構式會報錯。</p>
<p><img src="https://i.imgur.com/JpwA4m4.png" alt=""></p>
<p>也沒有自己的 prototype</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">Foo</span> = (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>); </span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/rQ4gCjv.png" alt=""></p>
<h2 id="箭頭函式-arrow-function-的this不因為call-apply-bind而被修改"><a class="header-anchor" href="#箭頭函式-arrow-function-的this不因為call-apply-bind而被修改"></a>箭頭函式(arrow function)的this不因為call/apply/bind而被修改</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> test = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">test.<span class="title function_">call</span>(<span class="string">&#x27;可以改變函式的this&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">test2</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">test2.<span class="title function_">call</span>(<span class="string">&#x27;無法改變函式的this，而且this指向window物件&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>可以看到箭頭函式的 <code>this</code> 指向全域，沒有因為使用 <code>call()</code> 而被修改</p>
<p><img src="https://i.imgur.com/1WDW13j.png" alt=""></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day53-使用Javascript操作DOM-Document-Object-Model-part2</title>
    <url>/2019/07/19/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day53-%E4%BD%BF%E7%94%A8Javascript%E6%93%8D%E4%BD%9CDOM-Document-Object-Model-part2/</url>
    <content><![CDATA[<h1 id="使用Javascript操作DOM-Document-Object-Model-part2"><a class="header-anchor" href="#使用Javascript操作DOM-Document-Object-Model-part2"></a>使用Javascript操作DOM(Document Object Model) part2</h1>
<h2 id="node物件中的特性"><a class="header-anchor" href="#node物件中的特性"></a>node物件中的特性</h2>
<ul>
<li>parentNode : 當前節點的父節點，若沒有則為null</li>
<li>childNodes : 一個唯讀的類陣列物件</li>
<li>firstChild / lastChild : 一個節點的第一個/最後一個節點</li>
<li>nextSibling / previousSibling : 一個節點的下一個/前一個節點(具有共同父節點的的稱為兄弟節點)</li>
<li>nodeType:節點的類型，Document = 9 , Element = 1 …等</li>
<li>nodeValue:Text / Comment節點的文字內容</li>
<li>nodeName:元素的tag name，會被轉為大寫</li>
</ul>
<span id="more"></span>
<p>Ex1:parentNode(使用編輯器編譯並開起網頁查看)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ul的父節點為body，所以會取得body的程式碼</span></span><br><span class="line"><span class="keyword">let</span> getList = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getList.<span class="property">parentNode</span>);</span><br></pre></td></tr></table></figure>
<p>Ex2:childNodes(使用編輯器編譯並開起網頁查看)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取得li的子節點，就是文字這個節點</span></span><br><span class="line"><span class="keyword">let</span> getList = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list li&#x27;</span>);</span><br><span class="line"><span class="comment">//NodeList(1)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getList.<span class="property">childNodes</span>); </span><br></pre></td></tr></table></figure>
<p>Ex3:firstChild(使用編輯器編譯並開起網頁查看)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取得li的子節點，就是文字這個節點</span></span><br><span class="line"><span class="keyword">let</span> getList = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"><span class="comment">//#text</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getList.<span class="property">firstChild</span>); </span><br></pre></td></tr></table></figure>
<p>Ex4:nextSibling(使用編輯器編譯並開起網頁查看)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;secondLi&quot;</span>&gt;</span>string2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;secondUl&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取得li的子節點，就是文字這個節點</span></span><br><span class="line"><span class="keyword">let</span> getList = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.secondLi&#x27;</span>);</span><br><span class="line"><span class="comment">//取得下一個兄弟節點(都以ul.list為父節點)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getList.<span class="property">nextSibling</span>.<span class="property">nextSibling</span>);</span><br></pre></td></tr></table></figure>
<p>Ex5:nodeName(使用編輯器編譯並開起網頁查看)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;secondLi&quot;</span>&gt;</span>string2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;secondUl&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>test<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> getList = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"><span class="comment">//取得節點的tag name</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getList.<span class="property">nodeName</span>);</span><br></pre></td></tr></table></figure>
<h2 id="透過js動態操作HTML屬性並修改屬性值"><a class="header-anchor" href="#透過js動態操作HTML屬性並修改屬性值"></a>透過js動態操作HTML屬性並修改屬性值</h2>
<ul>
<li>透過getAttribute 取得屬性的值
<ul>
<li>elment.getAttribute(“屬性名稱”)</li>
</ul>
</li>
<li>透過setAttribute 設定屬性的值</li>
<li>透過hasAttribute 查詢是否有設定屬性的值</li>
<li>透過removeAttribute 刪除屬性的值</li>
</ul>
<p>Ex1. 取得 a tag的值(使用編輯器編譯並開起網頁查看)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> getLink =  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getLink.<span class="title function_">getAttribute</span>(<span class="string">&quot;href&quot;</span>));</span><br></pre></td></tr></table></figure>
<p>Ex2. 設定 a tag的屬性href，更改為google網址(使用編輯器編譯並開起網頁查看)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> getLink =  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getLink.<span class="title function_">setAttribute</span>(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;http://www.google.com&quot;</span>));</span><br></pre></td></tr></table></figure>
<p>Ex3.查詢 a tag 是否有設定href屬性的值，有的話就回傳true(使用編輯器編譯並開起網頁查看)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> getLink =  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getLink.<span class="title function_">hasAttribute</span>(<span class="string">&quot;href&quot;</span>));</span><br></pre></td></tr></table></figure>
<p>Ex4.刪除 a tag 的href屬性(使用編輯器編譯並開起網頁查看)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> getLink =  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getLink.<span class="title function_">removeAttribute</span>(<span class="string">&quot;href&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getLink);<span class="comment">//href屬性已經被刪除</span></span><br></pre></td></tr></table></figure>
<h2 id="自定義屬性-data"><a class="header-anchor" href="#自定義屬性-data"></a>自定義屬性 data-*</h2>
<p>將額外的資訊加到html tag中通常都有用途，並透過dataset取得額外加入的資訊然後操作它。</p>
<p>Ex.設定data-num=&quot;0&quot;的元素，透過js取得其值。(使用編輯器編譯並開起網頁查看)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-num</span>=<span class="string">&quot;0&quot;</span>&gt;</span>string1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//進階運用可以用在取得自定義的值後，動態刪除該元素</span></span><br><span class="line"><span class="keyword">let</span> getList =  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list li&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getList.<span class="property">dataset</span>.<span class="property">num</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="textContent"><a class="header-anchor" href="#textContent"></a>textContent</h2>
<p>可以透過js操作元素的文字內容並修改</p>
<p>Ex. 修改li的文字內容為:這是被修改過的文字內容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> el = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list li&#x27;</span>);</span><br><span class="line"><span class="comment">//只會修改到第一個的原因是因為使用querySelector語法只會抓取到第一個</span></span><br><span class="line">el.<span class="property">textContent</span> = <span class="string">&quot;這是被修改過的文字內容&quot;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="innerHTML元素內容作為HTML"><a class="header-anchor" href="#innerHTML元素內容作為HTML"></a>innerHTML元素內容作為HTML</h2>
<p>innerHTML特性會回傳以markup字串呈現的元素內容，且會調用web解析器並以此新字串解析結果來取代該元素目前的內容。</p>
<p>使用+=運算子重複地將部份文字附加至innerHTML特性的效能通常很低。</p>
<p>Ex:透過innerHTML渲染頁面，並覆蓋原本網頁內容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//因為innerHTML會重新渲染頁面的關係，所以原本的ul就會不見</span></span><br><span class="line"><span class="keyword">let</span> el = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>);</span><br><span class="line">el.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;a href=&quot;#&quot;&gt;Link&lt;/a&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="creatElement創建節點"><a class="header-anchor" href="#creatElement創建節點"></a>creatElement創建節點</h2>
<p>除了透過innerHTML之外，也可以透過這個方式將元素內容作為HTML的方法。</p>
<p>這個方法會將新增的元素掛載到指定的元素底下。</p>
<p>Ex:新增一個li元素到ul中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//選取到ul元素</span></span><br><span class="line"><span class="keyword">let</span> getList = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"><span class="comment">//新增li元素</span></span><br><span class="line"><span class="keyword">let</span> newElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="comment">//加入文字內容</span></span><br><span class="line">newElement.<span class="property">textContent</span> = <span class="string">&#x27;這是新增進來的元素&#x27;</span>;</span><br><span class="line"><span class="comment">//將newElement掛載到ul(指的是getList)裡面</span></span><br><span class="line">getList.<span class="title function_">appendChild</span>(newElement);</span><br></pre></td></tr></table></figure>
<h2 id="removeChild刪除節點"><a class="header-anchor" href="#removeChild刪除節點"></a>removeChild刪除節點</h2>
<p>可以將DOM中的節點移除，使用時要注意要在<strong>父節點在調用這個方法來刪除子節點</strong>。</p>
<p>Ex2:到ul中刪除一個li元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>string2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;listLi&quot;</span>&gt;</span>string3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//選取到ul元素</span></span><br><span class="line"><span class="keyword">let</span> getList = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> listLi = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.listLi&#x27;</span>);</span><br><span class="line"><span class="comment">//刪除 class名稱為listLi的元素</span></span><br><span class="line">getList.<span class="title function_">removeChild</span>(listLi);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day54-陣列方法的 filter / map / reduce 深入理解與運用</title>
    <url>/2019/07/20/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day54-%E9%99%A3%E5%88%97%E6%96%B9%E6%B3%95%E7%9A%84-filter-map-reduce-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%88%87%E9%81%8B%E7%94%A8/</url>
    <content><![CDATA[<h1 id="陣列方法的-filter-map-reduce-深入理解與運用"><a class="header-anchor" href="#陣列方法的-filter-map-reduce-深入理解與運用"></a>陣列方法的 filter / map / reduce 深入理解與運用</h1>
<h2 id="Array-prototype-filter"><a class="header-anchor" href="#Array-prototype-filter"></a>Array.prototype.filter()</h2>
<p>filter的中文翻譯是「過濾」，可想而知就是可以用來作為資料篩選時使用</p>
<span id="more"></span>
<p>而 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">MDN</a> 上是這麼解釋關於filter的用途:</p>
<blockquote>
<p>filter() 方法會建立一個經<strong>指定之函式運算</strong>後，由<strong>原陣列中通過該函式檢驗之元素所構成的新陣列</strong>。</p>
</blockquote>
<p>意思是<strong>filter()會讓陣列中的元素一個個傳入我們自定義的函式裡，並回傳經過判斷後為true的值到新的陣列中</strong>，而這個過程<strong>不會修改到原陣列</strong>。</p>
<p>而其語法為:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = arr.<span class="title function_">filter</span>(<span class="title function_">callback</span>(element[, index[, array]])[, thisArg])</span><br></pre></td></tr></table></figure>
<ul>
<li>callback:用在測試陣列中的每個元素，回傳為true時將當前元素保留至新陣列</li>
<li>element:原陣列中的每個元素</li>
<li>index:原陣列中每個元素的索引值</li>
<li>array:原陣列</li>
<li>thisArg:callback函式的this值</li>
</ul>
<p>Ex: 過濾10~20之間的質數出來(箭頭函式版本的寫法)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//質數：指在大於1的自然數中，除了1和該數自身外，無法被其他自然數整除的數</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> prime = numbers.<span class="title function_">filter</span>(<span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; value; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value % i === <span class="number">0</span>) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(prime);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Ex1: 過濾10~20之間的質數出來(一般函式版本的寫法)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//質數：指在大於1的自然數中，除了1和該數自身外，無法被其他自然數整除的數</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isPrime</span>(<span class="params">value, index</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; value; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value % i === <span class="number">0</span>) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> prime = numbers.<span class="title function_">filter</span>(isPrime);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(prime);</span><br></pre></td></tr></table></figure>
<h2 id="Array-prototype-map"><a class="header-anchor" href="#Array-prototype-map"></a>Array.prototype.map()</h2>
<p>map的意思是映射，維基百科中對於映射的定義是:「設 A,B 是兩個非空集合，<strong>若對 A 中的任一元素 x , 依照某種規律（或法則）f , 恆有 B 中的唯一確定的元素 y 與之對應</strong>，則稱對應規律 f 為<strong>一個從 A 到 B 的映射</strong>」</p>
<p>要簡單一點的解釋可以想成當<strong>輸入一個數字x值時，會有一個對應的y值輸出</strong>。</p>
<p>而<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/map">MDN</a> 上是這麼解釋關於map的用途:</p>
<blockquote>
<p>map() 方法會<strong>建立一個新的陣列</strong>，其內容為<strong>原陣列的每一個元素經由回呼函式運算後所回傳的結果之集合</strong></p>
</blockquote>
<p>和維基百科的解釋對應，就不難理解map method的用途。</p>
<p>而其語法為:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr.<span class="title function_">map</span>(<span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">currentValue[, index[, array]]</span>) &#123;</span><br><span class="line">    <span class="comment">// Return element for new_array</span></span><br><span class="line">&#125;[, thisArg])</span><br></pre></td></tr></table></figure>
<p>Ex: 印出數字5~10在100中的所有倍數(箭頭函式+遞迴函式版本的寫法)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//質數：指在大於1的自然數中，除了1和該數自身外，無法被其他自然數整除的數</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> multiple = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">value,index</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> eachMultiple = [];</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">caculate</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value * count &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> eachMultiple;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      eachMultiple.<span class="title function_">push</span>(value * count);</span><br><span class="line">      count++;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">caculate</span>(value, count);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">caculate</span>(value);</span><br><span class="line">  <span class="keyword">return</span> eachMultiple;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Array-prototype-reduce"><a class="header-anchor" href="#Array-prototype-reduce"></a>Array.prototype.reduce()</h2>
<p>reduce是一個比較難理解的觀念，因為在使用上不像map/filter直觀，但reduce的功能其實很強大，甚至可以透過reduce實現和map/filter一樣的結果</p>
<p>而<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">MDN</a> 上是這麼解釋關於reduce的用途:</p>
<blockquote>
<p>reduce() 方法將一個累加器及陣列中每項元素（由左至右）傳入回呼函式，將陣列化為單一值。</p>
</blockquote>
<p>但其實透過撰寫手法，我們也可以獲得不只是單一值的值(例如陣列等)</p>
<p>而其語法為:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr.<span class="title function_">reduce</span>(callback[accumulator, currentValue, currentIndex, array], initialValue)</span><br></pre></td></tr></table></figure>
<ul>
<li>accumulator:用來累積回呼函式回傳值的累加器（accumulator）或 initialValue（若有提供的話，詳如下敘）。累加器是上一次呼叫後，所回傳的累加數值。</li>
<li>currentValue:原陣列中的元素。</li>
<li>currentIndex:原陣列目前所迭代處理中的元素之索引。若有傳入 initialValue，則由索引 0 之元素開始，若無則自索引 1 之元素開始。</li>
<li>array:呼叫 reduce() 方法的陣列。</li>
</ul>
<p>Ex: 取得a陣列[2, 3, 1, 7, 9]的加總值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//透過reduce實現</span></span><br><span class="line"><span class="keyword">let</span> totalSum = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>].<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, value, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//acc 的初始值 = [8, 7, 9, 3, 1]這個陣列</span></span><br><span class="line">  <span class="comment">//取出初始值的元素值與value相加後修改掉初始值陣列的元素值</span></span><br><span class="line">  acc = acc + value;</span><br><span class="line">  <span class="keyword">return</span> acc;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(totalSum);</span><br></pre></td></tr></table></figure>
<p>Ex1: 取得a陣列[2, 3, 1, 7, 9]和B陣列[8, 7, 9, 3, 1]相對應元素的加總值[10, 10, 10, 10, 10]</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> totalSum = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>].<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, value, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//acc 的初始值 = [8, 7, 9, 3, 1]這個陣列</span></span><br><span class="line">  <span class="comment">//取出初始值的元素值與value相加後修改掉初始值的元素值</span></span><br><span class="line">  <span class="comment">//注意是拿初始值的元素值出來做運算，而不是這個初始值的整個陣列</span></span><br><span class="line">  acc[index] = acc[index] + value;</span><br><span class="line">  <span class="keyword">return</span> acc;</span><br><span class="line">&#125;, [<span class="number">8</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(totalSum);</span><br></pre></td></tr></table></figure>
<p>Ex2: 透過 reduce實現map方法取得[ 1, 2, 3, 4, 5]的平方根值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//map method</span></span><br><span class="line"><span class="keyword">let</span> square = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].<span class="title function_">map</span>(<span class="function">(<span class="params">value, index</span>) =&gt;</span> value * value);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(square);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//reduce method </span></span><br><span class="line"><span class="keyword">let</span> square = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, value, index</span>) =&gt;</span> &#123;</span><br><span class="line">  acc.<span class="title function_">push</span>(value * value);</span><br><span class="line">  <span class="keyword">return</span> acc;</span><br><span class="line">&#125;, []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(square);</span><br></pre></td></tr></table></figure>
<p>Ex3: 透過 reduce實現filter方法取得[ 1, 2, 3, 4, 5]的奇數值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//filter method</span></span><br><span class="line"><span class="keyword">let</span> odd = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].<span class="title function_">filter</span>(<span class="function">(<span class="params">value, index</span>) =&gt;</span> index % <span class="number">2</span> === <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(odd);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//reduce method </span></span><br><span class="line"><span class="keyword">let</span> totalSum = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, value, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (index % <span class="number">2</span> === <span class="number">0</span>) </span><br><span class="line">    acc.<span class="title function_">push</span>(value);</span><br><span class="line">  <span class="keyword">return</span> acc;</span><br><span class="line">&#125;, []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(totalSum);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day55-使用Javascript操作DOM(Document Object Model) part3</title>
    <url>/2019/07/22/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day55-%E4%BD%BF%E7%94%A8Javascript%E6%93%8D%E4%BD%9CDOM-Document-Object-Model-part3/</url>
    <content><![CDATA[<h1 id="使用Javascript操作DOM-Document-Object-Model-part3"><a class="header-anchor" href="#使用Javascript操作DOM-Document-Object-Model-part3"></a>使用Javascript操作DOM(Document Object Model) part3</h1>
<h2 id="scrollBy-pageXOffSet-pageYOffSet-scrollX-scrollY"><a class="header-anchor" href="#scrollBy-pageXOffSet-pageYOffSet-scrollX-scrollY"></a>scrollBy / pageXOffSet / pageYOffSet / scrollX / scrollY</h2>
<p>scrollBy的用途是：「在窗口中依照指定的偏移量滾動文檔。」</p>
<p>scrollBy語法是window物件中才有的方法，使用時需要注意透過<strong>window</strong>.scrollBy()控制。</p>
<span id="more"></span>
<p>而pageXOffSet其實就是scrollX以及pageYOffSet是scrollY，使用上是相等的。</p>
<p>當透過scrollBy獲得值時，可以發現其中的x偏移量=scrollX、y偏移量=scrollY</p>
<p>寫法一：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollBy</span>(x偏移量,y偏移量)</span><br></pre></td></tr></table></figure>
<p>寫法二：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollBy</span>(&#123;</span><br><span class="line">    <span class="attr">top</span>:<span class="number">100</span>, <span class="comment">//＝y偏移量</span></span><br><span class="line">    <span class="attr">left</span>:<span class="number">100</span>, <span class="comment">//＝x偏移量</span></span><br><span class="line">    <span class="attr">behavior</span>: <span class="comment">//instant(瞬移，預設值)/ smooth()滑順，兩種滾軸移動時的效果</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Ex:<a href="https://codepen.io/kids5346/pen/JgYjKo">scrollBy練習</a></p>
<h2 id="getBoundingClientRect"><a class="header-anchor" href="#getBoundingClientRect"></a>getBoundingClientRect</h2>
<p>可以獲得元素的大小以及相對於窗口的位置。</p>
<p>會得到DOMRect物件並包含一組資訊：x/y/top/left/bottom/right/weight/height的值，這組資訊其實就是與該元素相關的css邊框資訊的集合。</p>
<p>關於元素的位置，在<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect">MDN</a>中有示意圖：</p>
<p><img src="https://i.imgur.com/qBJrAFe.png" alt=""></p>
<p>Ex:取得box的css邊框資訊</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#aaaadd</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> getBoxinfo = box.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getBoxinfo);</span><br></pre></td></tr></table></figure>
<h2 id="elementFromPoint"><a class="header-anchor" href="#elementFromPoint"></a>elementFromPoint</h2>
<p>getBoundingClientRect可以取得元素的邊框資訊，而有時候我們會想要反過來透過座標點獲得該座標上的元素是什麼，這個時候就可以使用 elementFromPoint()。</p>
<p>這組方法會回傳位於指定坐標上的元素為何。</p>
<p>Ex: 取得座標位置(50,50)上的元素值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#aaaadd</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> getBoxinfo = box.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getBoxinfo);</span><br></pre></td></tr></table></figure>
<h2 id="scrollTop"><a class="header-anchor" href="#scrollTop"></a>scrollTop</h2>
<blockquote>
<p>屬性可以設置和獲取元素被向上捲動的高度(pixels). 元素的 scrollTop 是元素頂端和能被看見的最頂端之間的距離</p>
</blockquote>
<p>Ex:獲得滾動時元素的水平、垂直和最頂端的距離</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">3000px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">3000px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#aaaadd</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&#x27;</span>);</span><br><span class="line"></span><br><span class="line">container.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, scrollEl);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">scrollEl</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.showText&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;Horizontally: &quot;</span> + e.<span class="property">target</span>.<span class="property">scrollLeft</span> + <span class="string">&quot;px&lt;br&gt;Vertically: &quot;</span> + e.<span class="property">target</span>.<span class="property">scrollTop</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>連續記錄挑戰Day56-查找特定li節點的索引值</title>
    <url>/2019/07/23/%E9%80%A3%E7%BA%8C%E8%A8%98%E9%8C%84%E6%8C%91%E6%88%B0Day56-%E6%9F%A5%E6%89%BE%E7%89%B9%E5%AE%9Ali%E7%AF%80%E9%BB%9E%E7%9A%84%E7%B4%A2%E5%BC%95%E5%80%BC/</url>
    <content><![CDATA[<h1 id="查找特定li節點的索引值"><a class="header-anchor" href="#查找特定li節點的索引值"></a>查找特定li節點的索引值</h1>
<p>當我們可能有需要點擊到某個節點後刪除那個節點時，就需要取得節點的位置。</p>
<span id="more"></span>
<p>例如一個ul li 的清單，我們想要刪除特定的li時，就需要前面提到的方法，其中有些方法需要知道</p>
<ol>
<li>list.children 代表要找的是ul裡面的所有子節點，會回傳一組HTMLCollection(4) [li, li, li, li]的資料。 而children與childNodes不同的地方在於children只會回傳節點不為空值的子節點，而childNodes則都會回傳</li>
<li>parentNode則是可以得到指定節點的父節點</li>
<li>因為透過querySelectorAll會得到為nodeList的類陣列物件，所以可以以Array.prototype.indexOf.call()的方式取得該節點的索引值</li>
</ol>
<p>Ex: 點擊a連結時，取得li的索引值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1234 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>點擊<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1234 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>點擊<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1234 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>點擊<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1234 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>點擊<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> listLi = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.list li&#x27;</span>);</span><br><span class="line">list.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, getLiIndex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取得ul的所有子節點</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="property">children</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLiIndex</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">nodeName</span> !== <span class="string">&#x27;A&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">//將ul的所有子節點作為this值傳入，並取得點擊到的li的索引值</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">indexOf</span>.<span class="title function_">call</span>(list.<span class="property">children</span>, e.<span class="property">target</span>.<span class="property">parentNode</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
</search>
